<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SA.Cirs.Common</name>
    </assembly>
    <members>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendDatabasesData">
            <summary>
            The class AppendDatabasesData holds the name of the primary database 
            and the names of the secondary databases in an Append operation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendDatabasesData.PrimaryDatabaseName">
            <summary>
            Gets / sets the name of the primary database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendDatabasesData.SecondaryDatabaseNames">
            <summary>
            Gets / sets the names of the secondary databases.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendDatabasesData.ColumnsMetadata">
            <summary>
            Gets / sets an array containing information about the maximal set of columns 
            of the append operation's result.
            This information can be used to add to the actual append result the missing 
            columns as dummy computed columns.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendHistoryEntryOptions">
            <summary>
            Defines the options for the DoAppendHistoryEntry API.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendHistoryEntryOptions.None">
            <summary>
            No options were specified.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendHistoryEntryOptions.IncludeDateStamp">
            <summary>
            If specified, the API includes date-stamp-related data
            in the new history entry.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData">
            <summary>
            The class ComputedColumnData holds the metadata of a computed column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.#ctor">
            <summary>
            Initializes a new empty ComputedColumnData.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.#ctor(Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Initializes a new ComputedColumnData instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsCharacterType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type alphanumeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsDateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Date.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsNumericType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Numeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsTimeType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Time.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsTristateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Tristate.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsBooleanType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Boolean.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsVirtualType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is virtual / computed.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.ColumnType">
            <summary>
            Gets / sets the type of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.Length">
            <summary>
            Gets / sets the length of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.Decimals">
            <summary>
            Gets / sets the number of decimals.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.Equation">
            <summary>
            Gets / sets the equation of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.EquationProvider">
            <summary>
            Gets / sets a function that can resolve the Equation of this object
            in case it was not specified explicitly.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.Description">
            <summary>
            Gets / sets the description of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsCharacter">
            <summary>
            Gets a Boolean indicating wether the column is alphanumeric.
            </summary>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsDate">
            <summary>
            Gets a Boolean indicating whether to column is of type Date.
            </summary>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsNumeric">
            <summary>
            Gets a Boolean indicating whether to column is of type Numeric.
            </summary>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsTime">
            <summary>
            Gets a Boolean indicating whether to column is of type Time.
            </summary>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsTristate">
            <summary>
            Gets a Boolean indicating whether to column is of type Tristate.
            </summary>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsBoolean">
            <summary>
            Gets a Boolean indicating whether to column is of type Boolean.
            </summary>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData.IsVirtual">
            <summary>
            Gets a Boolean indicating whether to column is virtual / computed.
            </summary>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata">
            <summary>
            The class ColumnMetadata holds the metadata of an IDEA column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.#ctor">
            <summary>
            Initializes a new empty ColumnMetadata.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.#ctor(Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata)">
            <summary>
            Initializes a new ColumnMetadata instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.#ctor(COMDBLib.IField)">
            <summary>
            Initializes a new ColumnMetadata by copying metadata from
            an IDEA field.
            </summary>
            <param name="field">The COMDBLib.IField from which to copy the metadata.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsCharacterType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type alphanumeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsDateType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Date.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsNumericType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Numeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsTimeType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Time.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsTristateType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Tristate.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsBooleanType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Boolean.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsVirtualType(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is virtual / computed.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.ColumnType">
            <summary>
            Gets / sets the type of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.Length">
            <summary>
            Gets / sets the length of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.Decimals">
            <summary>
            Gets / sets the number of decimals.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.Equation">
            <summary>
            Gets / sets the equation of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.Description">
            <summary>
            Gets / sets the description of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsCharacter">
            <summary>
            Gets a Boolean indicating wether the column is alphanumeric.
            </summary>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsDate">
            <summary>
            Gets a Boolean indicating whether to column is of type Date.
            </summary>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsNumeric">
            <summary>
            Gets a Boolean indicating whether to column is of type Numeric.
            </summary>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsTime">
            <summary>
            Gets a Boolean indicating whether to column is of type Time.
            </summary>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsTristate">
            <summary>
            Gets a Boolean indicating whether to column is of type Tristate.
            </summary>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsBoolean">
            <summary>
            Gets a Boolean indicating whether to column is of type Boolean.
            </summary>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata.IsVirtual">
            <summary>
            Gets a Boolean indicating whether to column is virtual / computed.
            </summary>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2">
            <summary>
            The class ComputedColumnData2 holds the metadata of a computed column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2.#ctor">
            <summary>
            Initializes a new empty ComputedColumnData2.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2.#ctor(Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Initializes a new ComputedColumnData instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2.#ctor(Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2)">
            <summary>
            Initializes a new ComputedColumnData instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2.FinalName">
            <summary>
            Gets / sets the final name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2.FinalDescription">
            <summary>
            Gets / sets the final description of the column.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions">
            <summary>
            The class ContextExtensions contains extensions for IDataPreparationContext.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FindImportedDatabase(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Searches the collection of imported databases in the given context for the element 
            with the specified alias.
            </summary>
            <param name="context">The context to search.
            An exception is thrown if this reference is null.</param>
            <param name="alias">The alias of the database.
            An exception is thrown if this reference is null.</param>
            <returns>An ISimpleImportFile object if the collection of imported databases contains an element
            with the specified alias; null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetImportFiles(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Enumerates the file descriptors of the current CIR or extension.
            </summary>
            <param name="context">The context to enumerate.
            An exception is thrown if this reference is null.</param>
            <returns>An ISimpleImportFile enumerator.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DeleteTemporaryDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Deletes a temporary database ignoring any non-critical exceptions.
            The methods delegates to GetRidOf.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to delete.
            An exception is thrown if this reference is null.
            If the name is empty, the method does nothing.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DeleteTemporaryDatabasesNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Collections.Generic.Stack{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile},System.Boolean)">
            <summary>
            Deletes a collection of temporary result files ignoring any non-critical exceptions.
            </summary>
            <param name="context">An IExecutionContext reference to the CIR execution context.
            An exception is thrown if this reference is null.</param>
            <param name="temporaryResultFiles">A stack of ITestResultFiles to delete.
            An exception is thrown if this reference is null.</param>
            <param name="resetNameOfDeletedDatabase">An optional boolean that specifies
            whether the method resets the Name of a successfully deleted database object
            to String.Empty.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If temporaryResultFiles is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DeleteTemporaryDatabasesNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile},System.Boolean)">
            <summary>
            Deletes a collection of temporary result files ignoring any non-critical exceptions.
            </summary>
            <param name="context">An IExecutionContext reference to the CIR execution context.
            An exception is thrown if this reference is null.</param>
            <param name="temporaryResultFiles">A sequence of ITestResultFiles to delete.
            An exception is thrown if this reference is null.</param>
            <param name="resetNameOfDeletedDatabase">An optional boolean that specifies
            whether the method resets the Name of a successfully deleted database object
            to String.Empty.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If temporaryResultFiles is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DeleteTemporaryDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,System.Boolean)">
            <summary>
            Deletes a a temporary result file ignoring any non-critical exceptions.
            </summary>
            <param name="context">An IExecutionContext reference to the CIR execution context.
            An exception is thrown if this reference is null.</param>
            <param name="temporaryResultFile">The ITestResultFile to delete.
            An exception is thrown if this reference is null.
            If the name of the database to delete is empty, the method does nothing.</param>
            <param name="resetNameOfDeletedDatabase">An optional boolean that specifies
            whether the method resets the Name of a successfully deleted database object
            to String.Empty.
            Default value: false.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If temporaryResultFile is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DeleteDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Deletes a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to delete.
            An exception is thrown if this reference is null.
            If the name is empty, the method does nothing.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <remarks>The method assumes that the database is located at the entity location of
            the specified context.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetColumnName(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the name of the column with the specified id from the string table.
            </summary>
            <param name="context">The context to search.
            An exception is thrown if this reference is null.</param>
            <param name="columnNameId">The identifier of the column.
            An exception is thrown if this string is null or empty.
            </param>
            <returns>A string.
            An exception is thrown if this string is null or empty.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnNameId is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameId is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If the string table does not contain 
            a value for the requested column.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetResourceStringValue(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Gets the value of the item with the specified id from the string table.
            </summary>
            <param name="context">The context to search.
            An exception is thrown if this reference is null.</param>
            <param name="resourceId">The identifier of the resource.
            An exception is thrown if this string is null or empty.
            </param>
            <param name="defaultValue">The value to return if the specified
            resource was not found.</param>
            <returns>A string. If the specified resource was not found,
            the method returns defaultValue.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
            <exception cref="T:System.ArgumentException">If resourceId is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetMissingStringTableEntryMessage(System.String)">
            <summary>
            Gets a message similar to 'The string table does not contain a value with id entryIdentifier'.
            </summary>
            <param name="entryIdentifier">The id of the missing entry.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.RenameColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData)">
            <summary>
            Changes the name of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="renameColumnData">A RenameColumnData object containing
            the old and new names of the column and an optional new description.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData is null.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData.Name is null.</exception>
            <exception cref="T:System.ArgumentException">If renameColumnData.Name is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData.NewName is null.</exception>
            <exception cref="T:System.ArgumentException">If renameColumnData.NewName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.RenameColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Changes the name of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="oldColumnName">The name of the column to change.
            An exception is thrown if this string is null or empty.</param>
            <param name="newColumnName">The new name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="newDescription">An optional new description of the column.
            It can be null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If oldColumnName is null.</exception>
            <exception cref="T:System.ArgumentException">If oldColumnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If newColumnName is null.</exception>
            <exception cref="T:System.ArgumentException">If newColumnName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.RenameColumn2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData)">
            <summary>
            Changes the name of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="renameColumnData">A RenameColumnData object containing
            the old and new names of the column and an optional new description.
            An exception is thrown if this reference is null.</param>
            <returns>The actual name of the renamed field.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData is null.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData.Name is null.</exception>
            <exception cref="T:System.ArgumentException">If renameColumnData.Name is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If renameColumnData.NewName is null.</exception>
            <exception cref="T:System.ArgumentException">If renameColumnData.NewName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.RenameColumn2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Changes the name of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="oldColumnName">The name of the column to change.
            An exception is thrown if this string is null or empty.</param>
            <param name="newColumnName">The new name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="newDescription">An optional new description of the column.
            It can be null.</param>
            <returns>The actual name of the renamed field.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If oldColumnName is null.</exception>
            <exception cref="T:System.ArgumentException">If oldColumnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If newColumnName is null.</exception>
            <exception cref="T:System.ArgumentException">If newColumnName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.RenameColumnAt(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Int32,System.String,System.String)">
            <summary>
            Changes the name of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="position">The one-based TableDef-position of the column to change.
            An exception is thrown if this string is null or empty.</param>
            <param name="newColumnName">The new name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="newDescription">An optional new description of the column.
            It can be null.</param>
            <returns>The actual name of the renamed field.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If position is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">If newColumnName is null.</exception>
            <exception cref="T:System.ArgumentException">If newColumnName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogRenameColumnParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Writes the actual parameters of a column rename operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            </param>
            <param name="oldColumnName">The name of the column to change.
            </param>
            <param name="newColumnName">The new name of the column.
            </param>
            <param name="newDescription">The new description of the column.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogRenameColumnAtParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes the actual parameters of a column rename operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            </param>
            <param name="position">The position of the column to change.
            </param>
            <param name="newColumnName">The new name of the column.
            </param>
            <param name="newDescription">The new description of the column.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AlterColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData,System.String)">
            <summary>
            Updates the metadata of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnData">The object that contains the metadata
            of the column to update.
            An exception is thrown if this reference is null.
            </param>
            <param name="columnName">An optional string containing the name
            of the column to alter.
            If null or empty, the method uses the name in columnData
            to identify the column.
            This is useful in case the column changes also its name.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AlterColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,COMMONIDEACONTROLSLib.IIdeaDatabase,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData,System.String)">
            <summary>
            Updates the metadata of a column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="target">The target database.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The object that contains the metadata
            of the column to update.
            An exception is thrown if this reference is null.</param>
            <param name="columnName">An optional string containing the name
            of the column to alter.
            If null or empty, the method uses the name in columnData
            to identify the column.
            This is useful in case the column changes also its name.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.ReplaceColumn(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,COMDBLib.IField)">
            <summary>
            Replaces a column of a database.
            </summary>
            <param name="target">The database to alter.
            An exception is thrown if this reference is null.</param>
            <param name="columnName">The name of the column to alter.
            An exception is thrown if this string is null or empty.</param>
            <param name="field">A field object containing the new metadata of the column.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,COMMONIDEACONTROLSLib.IIdeaDatabase,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Adds a computed column to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="target">The target database.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The object that contains the metadata
            of the column to add.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumn2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,COMMONIDEACONTROLSLib.IIdeaDatabase,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Adds a computed column to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="target">The target database.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The object that contains the metadata
            of the column to add.
            An exception is thrown if this reference is null.</param>
            <returns>The actual name of the new column.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumns(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,COMMONIDEACONTROLSLib.IIdeaDatabase,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData})">
            <summary>
            Adds a sequence of computed columns to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="target">The target database.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The sequence of computed columns to add.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumns(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{COMMONIDEACONTROLSLib.IIdeaDatabase,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData}})">
            <summary>
            Adds a sequence of computed columns to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="targetDatabaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnDataBuilder">A method that takes a database reference 
            and returns the the sequence of computed columns to add.
            An exception is thrown if this reference is null.
            The method opens the target database and calls this method to get the
            sequence of computed columns to add. The method receives a reference
            to the target database.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If targetDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If targetDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnDataBuilder is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumnsCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{COMMONIDEACONTROLSLib.IIdeaDatabase,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData}})">
            <summary>
            Implements the method AddComputedColumns.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="targetDatabaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnDataBuilder">A method that takes a database reference 
            and returns the the sequence of computed columns to add.
            An exception is thrown if this reference is null.
            The method opens the target database and calls this method to get the
            sequence of computed columns to add. The method receives a reference
            to the target database.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If targetDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If targetDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnDataBuilder is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumn2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Adds a computed column to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnData">The object that contains the metadata
            of the column to add.
            An exception is thrown if this reference is null.</param>
            <returns>The actual name of the new column.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumnCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Adds a computed column to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnData">The object that contains the metadata
            of the column to add.
            An exception is thrown if this reference is null.</param>
            <returns>The actual name of the new column.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumns(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData})">
            <summary>
            Adds a sequence of computed columns to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnData">The sequence of computed columns to add.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogAddComputedColumnsParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData})">
            <summary>
            Writes the actual parameters of an AddComputedColumns operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.</param>
            <param name="columnData">A reference to the columns to be added.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AddComputedColumnsCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData})">
            <summary>
            Adds a sequence of computed columns to a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnData">The sequence of computed columns to add.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.OpenDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Opens the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to open.
            An exception is thrown if this string is null or empty.</param>
            <returns>An IIdeaDatabase reference.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <remarks>If the current task is not a server task, the method uses ExecutionContextUtil.GetDefaultEntityLocation 
            to determine the location of the database. In case the database is located on the server and the
            current task is running on the desktop, the method instructs the IDEA client in the context to enter the run-at-server mode
            before opening the database and leaves it executing in this mode.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.BuildUniqueTemporaryDatabaseName(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Builds a string of the form TemporaryDatabaseNamePrefix+nameAffix+Guid+TemporaryDatabaseNameSuffix+DatabaseExtension
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="nameAffix">The caller-supplied affix that the method appends after the TemporaryDatabaseNamePrefix.
            An exception is thrown if this string is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If nameAffix is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AssignTagsNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair})">
            <summary>
            Assigns tags to the columns of a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to tag.
            An exception is thrown if this string is null or empty.</param>
            <param name="tags">The sequence of tags.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If tags is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AssignTagsNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.Interfaces.ITagAssignment},Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions)">
            <summary>
            Assigns tags to the columns of a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to tag.
            An exception is thrown if this string is null or empty.</param>
            <param name="tags">The sequence of tags.
            An exception is thrown if this reference is null.</param>
            <param name="testFilter">An IExpression object containing the test filter for shared tagging
            or null if a test filter is not required.</param>
            <param name="options">A TaggingOptions value containing tagging-related options.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If tags is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AssignTagsNoErrorCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.Interfaces.ITagAssignment},Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions)">
            <summary>
            Assigns tags to the columns of a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to tag.
            An exception is thrown if this string is null or empty.</param>
            <param name="tags">The sequence of tags.
            An exception is thrown if this reference is null.</param>
            <param name="testFilter">An IExpression object containing the test filter for shared tagging
            or null if a test filter is not required.</param>
            <param name="options">A TaggingOptions value containing tagging-related options.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If tags is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.SuppressSharedTaggingPublishingIfSupported(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging)">
            <summary>
            Suppresses shared tagging publishing if the specified tagging object supports
            this feature.
            </summary>
            <param name="taggingHelper">An ITagging reference to the tagging object.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If taggingHelper is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.SaveTagging(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves the defined tags to the underlying database.
            </summary>
            <param name="helper">An ITagging reference to the tagging object.
            An exception is thrown if this reference is null.</param>
            <param name="testFilter">An IExpression object containing the test filter for shared tagging
            or null if a test filter is not required.</param>
            <exception cref="T:System.ArgumentNullException">If helper is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.ThrowIfCancellationRequested(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Throws a System.OperationCanceledException if cancellation has been requested for the task running
            in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.OperationCanceledException">If cancellation has been requested for the task
            running in the specified context.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoExtract2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Performs an extraction on the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index). If the source database is empty, zero is also valid.
            An exception is thrown if this value is not -1, 0 (see above) or in the range [1, database-record-count].</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoExtractCore2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements the method DoExtract.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the 
            extraction creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index). If the source database is empty, zero is also valid.
            An exception is thrown if this value is not -1, 0 (see above) or in the range [1, database-record-count].</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogExtractionArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the actual parameters of an extraction operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.</param>
            <param name="destinationDatabaseName">The name of the destination database.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the 
            extraction creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index).</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoDupKeyDetection(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a DupKeyDetection on the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="outputDuplicates">An optional Boolean that specifies whether to output duplicates 
            or non-duplicates.
            <para>Default value: false.</para></param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context or keys is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogDupKeyDetectionArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the actual parameters of a DupKeyDetection operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="columnNames">A sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">A criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="outputDuplicates">A Boolean that specifies whether to output duplicates 
            or non-duplicates.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoDupKeyExclusion(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Performs a DupKeyExclusion on the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="differentColumnName">The value of DifferentField. Cannot be null or empty
            or part of keys.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context, sourceDatabaseName, keys or differentColumnName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName, databaseName or differentColumnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogDupKeyExclusionArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Writes the actual parameters of a DupKeyExclusion operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="differentColumnName">The value of DifferentField.</param>
            <param name="columnNames">A sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">A criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoExtract(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Performs an extraction on the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index).</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <param name="createEmptyDatabaseIfSourceIsEmpty">A Boolean that specifies
            whether the method should create an empty result database with the specified columns
            if the source is empty. 
            <para>If false, the method throws an exception if the source database
            is empty. This is consistent with IDEA's behavior that does not support extracting data
            from empty databases.
            </para>
            <para>If true, then the method will create a new empty database with the specified source and new columns.</para></param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoExtractCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoExtract.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">A sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the 
            extraction creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index).</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <param name="createEmptyDatabaseIfSourceIsEmpty">A Boolean that specifies
            whether the method should create an empty result database with the specified columns
            if the source is empty. 
            <para>If false, the method throws an exception if the source database
            is empty. This is consistent with IDEA's behavior that does not support extracting data
            from empty databases.
            </para>
            <para>If true, then the method will create a new empty database with the specified source and new columns.</para></param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogExtractionParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Writes the actual parameters of an extraction operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.</param>
            <param name="destinationDatabaseName">The name of the destination database.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the 
            extraction creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="startRow">The one-based index of the first row to extract.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index).</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <param name="createEmptyDatabaseIfSourceIsEmpty">A Boolean that specifies
            whether the method should create an empty result database with the specified columns
            if the source is empty.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSort(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.Boolean)">
            <summary>
            Creates a new database that is physically sorted in the specified order.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.
            Default value: false.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSortCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoSort.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogSortArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.Boolean)">
            <summary>
            Writes the actual parameters of a sort operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to be sorted.</param>
            <param name="destinationDatabaseName">The name of the destination database.</param>
            <param name="keys">A sequence specifying the sort keys.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSort(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData})">
            <summary>
            Creates a new database that is physically sorted in the specified order.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSortCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData})">
            <summary>
            Implements the method DoSort.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this string is null or empty.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogSortParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData})">
            <summary>
            Writes the actual parameters of a sort operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to be sorted.</param>
            <param name="destinationDatabaseName">The name of the destination database.</param>
            <param name="keys">A sequence specifying the sort keys.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppend(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Appends two databases.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the database to append.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppendCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Implements the method DoAppend.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the database to append.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppend(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String[],System.String,System.String)">
            <summary>
            Appends the specified databases to a primary database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppend2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified databases to a primary database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppendCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Implements the method DoAppend.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A Boolean that specifies
            if the method should disable progress notifications</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogAppendParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Writes the actual parameters of an append operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.</param>
            <param name="resultDatabaseName">The name of the result database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A Boolean that specifies
            if the method should disable progress notifications</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSummarize2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoSummarize.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An optional IdeaStatistics value specifying the
            statistics to include in the result.
            The default value is IdeaStatistics.None.</param>
            <param name="createPercentField">An optional boolean specifying whether to
            create percent fields. The default value is false.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.
            The default value is false.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.
            The default value is false.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.
            The default value is true.
            </param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <param name="useQuickSummarization">An optional boolean that specifies
            if a quick summarization is requested.
            Default value: false.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If statisticsToInclude is 'None'.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSummarize(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Implements the method DoSummarize.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An optional IdeaStatistics value specifying the
            statistics to include in the result.
            The default value is IdeaStatistics.None.</param>
            <param name="createPercentField">An optional boolean specifying whether to
            create percent fields. The default value is false.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.
            The default value is false.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.
            The default value is false.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.
            The default value is true.
            </param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If statisticsToInclude is 'None'.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoSummarizeCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoSummarize.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An IdeaStatistics value specifying the
            statistics to include in the result.</param>
            <param name="createPercentField">A boolean specifying whether to
            create percent fields.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <param name="useQuickSummarization">A boolean that specifies
            if a quick summarization is requested.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsToSummarize is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsToSummarize is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogSummarizationParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the actual parameters of a summarization operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the source database.</param>
            <param name="resultDatabaseName">The name of the destination database.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An IdeaStatistics value specifying the
            statistics to include in the result.</param>
            <param name="createPercentField">A boolean specifying whether to
            create percent fields.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <param name="useQuickSummarization">A boolean that specifies
            if a quick summarization is requested.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoVisualJoin(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Joins two databases using IDEA's Visual Connector.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinOptions">An optionsl set of join options. Specifies whether to include
            all the records of the primary table and whether to append the databades names
            to the result's columns.
            Default value: VisualJoinOptions.None.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoVisualJoin(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Joins two databases using IDEA's Visual Connector.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinOptions">An optionsl set of join options. Specifies whether to include
            all the records of the primary table and whether to append the databades names
            to the result's columns.
            Default value: VisualJoinOptions.None.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoVisualJoin2(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Joins two databases using IDEA's Visual Connector.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinOptions">An optionsl set of join options. Specifies whether to include
            all the records of the primary table and whether to append the databades names
            to the result's columns.
            Default value: VisualJoinOptions.None.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoJoin(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Joins two databases.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoJoin(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Joins two databases.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoJoinCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Implements the method DoJoin.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">A sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">A sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">A boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If primaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If primaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogJoinParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Writes the actual parameters of a join operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="primaryDatabaseName">The name of the primary database.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.</param>
            <param name="resultDatabaseName">The name of the destination database.</param>
            <param name="matchingColumns">A sequence specifying the matching columns.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">A sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">A boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FirstColumnNameOrDefault(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.ColumnExists(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Determines whether the specified column exists in the given database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnName">The name of the column. Column names
            are case insensitive. The method uses the OrdinalIgnoreCase string comparison type.
            An exception is thrown if this string is null.
            </param>
            <returns>True, if the column exists; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context, databaseName or columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FirstColumnNameOrDefaultCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FirstColumnNameOrDefault(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{System.Int32,COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            The function receives the TableDef-index of the field, an IField reference to
            the field metadata and returns true if the field matches the criteria, otherwise false.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FirstColumnNameOrDefaultCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Func{System.Int32,COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            The function receives the TableDef-index of the field, an IField reference to
            the field metadata and returns true if the field matches the criteria, otherwise false.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetRecordCount(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the record count of the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <returns>The record count of the specified database as a long.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetRecordCountCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the record count of the specified database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <returns>The record count of the specified database as a long.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetIdeaDateMask(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Gets the default IDEA data mask.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetComputedDateColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.DateTime)">
            <summary>
            Gets the IDEA equation of a computed column of type date.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="value"></param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultDateColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Gets an IDEA equation for a date column having the default value 'zero'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDateEquation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.DateTime)">
            <summary>
            Returns a string that represents a date value in an IDEA equation.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="value">The DateTime value to represent.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultNumericColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets an IDEA equation for a numeric column having the default value 'zero'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultTimeColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets an IDEA equation for a time column having the default value 'zero'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultBooleanColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets an IDEA equation for a boolean column having the default value 'false'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultMultistateColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets an IDEA equation for a multistate column having the default value 'zero'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultStringColumnEquation(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets an IDEA equation for a string column having the default value 'empty'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDefaultStringColumnLength(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Gets the length of an IDEA string column having the default value 'empty'.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <returns>An int.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.TryGetColumnDescription(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String@)">
            <summary>
            Retrieves the description of a specified database column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnName">The name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnDescription">A string that receives the description of
            the column.</param>
            <returns>True, if the column exists, false, if the database
            does not have a column with the specified name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.TryGetColumnMetadata(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ColumnMetadata@)">
            <summary>
            Retrieves the metadata of a specified database column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnName">The name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnMetadata">A ColumnMetadata that receives the description of
            the column.</param>
            <returns>True, if the column exists, false, if the database
            does not have a column with the specified name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.TryGetColumnMetadata(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata@)">
            <summary>
            Retrieves the metadata of a specified database column.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnName">The name of the column.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnMetadata">A ComputedColumnData that receives the description of
            the column.</param>
            <returns>True, if the column exists, false, if the database
            does not have a column with the specified name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDatabaseColumnNameAt(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Int32)">
            <summary>
            Gets the name of the field at the specied position in a database's TableDef object.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="index">The one-based index of the field or -1, if the caller requests
            the name of the last field.
            <para>An exception is thrown if the index is not in the valid range.</para></param>
            <returns>A string containing the name of the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If context or databaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDatabaseColumnMetadataAt(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Int32)">
            <summary>
            Gets the metadata of the field at the specied position in a database's TableDef object.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="index">The one-based index of the field or -1, if the caller requests
            the name of the last field.
            <para>An exception is thrown if the index is not in the valid range.</para></param>
            <returns>An IdeaColumnMetadata object for the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If context or databaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDatabaseColumnNames(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the names of the specified database's columns in the increasing order of their TableDef position.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <returns>An array containing the column names in the increasing order of their TableDef position.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDatabaseColumnNamesCore(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the names of the specified database's columns in the increasing order of their TableDef position.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <returns>An array containing the column names in the increasing order of their TableDef position.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetAlphanumericDatabaseColumnNames(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the names of the specified database's columns of type alphanumeric in the increasing order of their TableDef position.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <returns>The record count of the specified database as a long.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogDebugMessage(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Object[])">
            <summary>
            Logs a message if a debug license is available in the context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="message">The message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
            <remarks>The method logs a message if a debug license is available in the context; otherwise
            the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetAppendResultMetadata(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an array containing information about the maximal set of columns of an append operation's result.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseNames">A reference to the sequence of databases to be appended.
            An exception is thrown if this reference is null.</param>
            <returns>An array containing information about the maximal set of columns of an append operation's result.
            If the input sequence is empty, the method returns an empty array.</returns>
            <remarks>The method assumes that the metadata of the databases is compatibile with
            the append operation and returns a union of all database columns in the input sequence.</remarks>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDummyComputedColumnsData(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String,System.Tuple{System.String,COMMONIDEACONTROLSLib.VBFieldType}[],System.String)">
            <summary>
            
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the database to check.
            An exception is thrown if this reference is null or empty.</param>
            <param name="expectedColumns">An array containing the metadata of the columns
            to check. The method creates a ComputedColumnData object for each column
            of this sequence that is not present in the specified database.
            If the sequence is empty, the method returns an empty array.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="dummyColumnDescription">An optional string containing
            the description of the dummy columns.</param>
            <returns>A ComputedColumnData array containing metadata for those columns
            in expectedColumns that are missing from the specified database.
            If the set of missing columns is empty, the method returns an empty array.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If expectedColumns is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetDummyComputedColumnData(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String,COMMONIDEACONTROLSLib.VBFieldType,System.String)">
            <summary>
            Creates a ComputedColumnData object that contains the metadata for a computed column to be added in
            case the real column is not available.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="columnName">The name of the column.
            This string can be null or empty.
            </param>
            <param name="columnType">The type of the real column.</param>
            <param name="description">An optional description.</param>
            <returns>A ComputedColumnData.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetAppendDatabasesData(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets an object that contains the name of the primary input file,
            the array of secondary files that are not empty and information
            about the maximal set of columns of the result.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseNames">A reference to the sequence of databases to be appended.
            The method ignores null empty items and assumes that these databases exist.
            An exception is thrown if this reference is null.</param>
            <returns>An AppendDatabasesData object that contains the name of the primary input file and
            the array of secondary file names. If a non-empty primary input file
            is not available, the method returns a null primary input file and an empty 
            array of secondary database names.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FlagDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Flags the specified IDEA database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database at the context's default entity location.
            An exception is thrown if this string is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <remarks>The method flips the specified databases's Flagged property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FlagDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Flags a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database at the context's default entity location to flag.
            An exception is thrown if this reference is null.
            If the name is empty, the method does nothing.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <remarks>The method flips the specified databases's Flagged property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FlagDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Boolean)">
            <summary>
            Turns on or off the flagged property of the specified IDEA database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database at the context's default entity location to flag.
            An exception is thrown if this reference is null.
            If the name is empty, the method does nothing.</param>
            <param name="flagged">A Boolean that specifies whether to turn on or off the flagged property.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <remarks>The method flips the specified databases's Flagged property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.IsDatabaseFlagged(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Determines whether the specified database is flagged.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database at the context's default entity location.</param>
            <returns>True, if the database is flagged; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FlagDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Boolean)">
            <summary>
            Turns on or off the flagged property of the specified IDEA database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database at the context's default entity location.
            An exception is thrown if this string is null or empty.</param>
            <param name="flagged">A Boolean that specifies whether to turn on or off the flagged property.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogFlagDatabaseParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Boolean)">
            <summary>
            Writes the actual parameters of a FlagDatabase operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to be flagged.</param>
            <param name="flagged">A Boolean that specifies whether to turn on or off the flagged property.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FindFirstMissingColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the name of the first column that is not present in a given database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="columnNames">A reference to the sequence of column names.
            <para>An exception is thrown if this reference is null or if it contains
            null or empty items.</para>
            <para>If the sequence of columns is empty, the method returns null.</para>
            <para>The column names are compared using StringComparer.InvariantCultureIgnoreCase.</para></param>
            <returns>The name of the first missing column, or null, if all specified
            columns are present in the database.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If columnNames contains null or empty items.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FindFirstMissingColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String[])">
            <summary>
            Returns the name of the first column that is not present in a given database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="columnNames">One or more column names.
            <para>An exception is thrown if this reference is null or if it contains
            null or empty items.</para>
            <para>If the sequence of columns is empty, the method returns null.</para>
            <para>The column names are compared using StringComparer.InvariantCultureIgnoreCase.</para></param>
            <returns>The name of the first missing column, or null, if all specified
            columns are present in the database.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If columnNames contains null or empty items.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetColumnCount(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Gets the number of columns in a database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <returns>An int.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetFirstColumnValue(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Returns the value of a column in the first row of a database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="columnName">A string containing the name of the column.
            An exception is thrown if this name is null or empty.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.ExistsRow(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Determines whether an IDEA database contains a row that satisfies a given predicate.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="predicate">A string containing the predicate (i.e., an IDEA equation valid for the specified database) or null. 
            If null or empty, the method checks whether the database contains any rows.</param>
            <returns>True if the predicate is not null or empty and the database contains a row that satisfies the given predicate or 
            if the predicate is null or empty and the database is not empty; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogExistsRowParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Writes the actual parameters of an ExistsRow operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="predicate">The predicate.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoDeleteColumn(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Deletes a column from a database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the target database.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnName">The name of the column to delete.
            An exception is thrown if this string is null or empty.
            An exception is thrown if the field does not exist.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If columnName does not exist.</exception>
            <remarks>The method accepts both regular and virtual columns. For regular columns,
            the method will temporarily turn off - if required - IDEA's option DoNotDeleteNaturalFields.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.IsTableValid(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Determines whether a database is valid.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            If the name is null or if it consists only of whitespace chars,
            the method returns false.</param>
            <returns>True, if databaseName is not null and it does not consist only of whitespace chars and 
            the database file exists and the database contains at least one row; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.IsTableValid(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile)">
            <summary>
            Determines whether an imported table is valid.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="file">An ISimpleImportFile reference to the object to check or null.</param>
            <returns>True, if file is not null, its ImportedFileName is not null or empty, the table
            ImportedFileName exists and is not empty; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.AreTablesValid(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile[])">
            <summary>
            Determines whether all specified tables are valid.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="firstFile">An ISimpleImportFile reference to the object to check or null.</param>
            <param name="secondFile">An ISimpleImportFile reference to the object to check or null.</param>
            <param name="additionalFiles">An optional array of ISimpleImportFile references or null.</param>
            <returns>True if all ISimpleImportFiles are valid (a file is valid if and only if its object is not null, 
            its ImportedFileName is not null or empty, the table ImportedFileName exists and is not empty); otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetGlobalParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation)">
            <summary>
            Gets an instance of the ExtendedParameterizer for the specified IdeaEntityLocation.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="location">An IdeaEntityLocation value representing the location of the parameters' owner.</param>
            <returns>An ExtendedParameterizer object.</returns>
            <remarks>This is a shortcut for context.MacroCommands.GlobalParameters.</remarks>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.CreateActionFieldForIDEAScript(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String)">
            <summary>
            Creates an action field of type IDEA Script for a database column.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this name is null.</param>
            <param name="columnName">The name of the column
            for which an action field will be created.
            An exception is thrown if this name is null or empty
            or if the column does not exist.</param>
            <param name="scriptFileName">The name of the script file.
            An exception is thrown if this name is null or empty.</param>
            <param name="type1">The type of the first script parameter.</param>
            <param name="param1">The value of the first script parameter.</param>
            <param name="type2">The type of the second script parameter.</param>
            <param name="param2">The value of the second script parameter.</param>
            <param name="type3">The type of the third script parameter.</param>
            <param name="param3">The value of the third script parameter.</param>
            <param name="type4">The type of the fourth script parameter.</param>
            <param name="param4">The value of the fourth script parameter.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If scriptFileName is null.</exception>
            <exception cref="T:System.ArgumentException">If scriptFileName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.CreateActionFieldForExtraction(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates an action link from the specified source database to the specified target database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the database containing the field for which the link
            will be created.
            An exception is thrown if this name is null or empty.</param>
            <param name="sourceFieldName">The name of the field for which the link will be created.
            An exception is thrown if this name is null or empty.</param>
            <param name="targetDatabaseName">The name of the database to which the link will be created.
            An exception is thrown if this name is null or empty.</param>
            <param name="lookupFieldName">The name of the lookup field.
            An exception is thrown if this name is null or empty.</param>
            <param name="additionalLookupFieldNames">An optional array of additional lookup field names.
            Only the first seven non-empty entries will be considered.</param>
            <exception cref="T:System.ArgumentNullException">If context or sourceDatabase or sourceFieldName or targetDatabaseName or lookupFieldName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogCreateActionFieldForExtractionArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates an action link from the specified source database to the specified target database.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="sourceDatabaseName">The name of the database containing the field for which the link
            will be created.
            </param>
            <param name="sourceFieldName">The name of the field for which the link will be created.
            </param>
            <param name="targetDatabaseName">The name of the database to which the link will be created.
            </param>
            <param name="lookupFieldName">The name of the lookup field.
            </param>
            <param name="additionalLookupFieldNames">An optional array of additional lookup field names.
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogCreateActionFieldForIDEAScriptArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String)">
            <summary>
            Writes the actual parameters of a CreateActionFieldForIDEAScript operation to the log 
            in the specified context.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            </param>
            <param name="columnName">The name of the column
            for which an action field will be created.
            </param>
            <param name="scriptFileName">The name of the script file.
            </param>
            <param name="type1">The type of the first script parameter.</param>
            <param name="param1">The value of the first script parameter.</param>
            <param name="type2">The type of the second script parameter.</param>
            <param name="param2">The value of the second script parameter.</param>
            <param name="type3">The type of the third script parameter.</param>
            <param name="param3">The value of the third script parameter.</param>
            <param name="type4">The type of the fourth script parameter.</param>
            <param name="param4">The value of the fourth script parameter.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoAppendHistoryEntry(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendHistoryEntryOptions,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail})">
            <summary>
            Appends a new entry to a database's history.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this name is null.</param>
            <param name="title">A string containing the title of
            the new entry.</param>
            <param name="options">An optional AppendHistoryEntryOptions value.
            Default value: AppendHistoryEntryOptions.None.</param>
            <param name="details">An optional reference to a sequence of HistoryEntry Detail
            objects.
            An exception is thrown if the sequence contains nulls.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If details contains nulls.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogAppendHistoryEntryArguments(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.AppendHistoryEntryOptions,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail})">
            <summary>
            Writes the actual parameters of an AppendHistoryEntry operation to the log 
            in the specified context.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="title">The title of the new history entry.</param>
            <param name="options">An AppendHistoryEntryOptions value.</param>
            <param name="details">A reference to the sequence of details.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.CreatePivotTable``1(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions,System.String@)">
            <summary>
            Creates a new pivot table result inside an IDEA database and optionally
            exports the the result to an IDEA database and detects the actual result name.
            </summary>
            <typeparam name="TDataField">The type of the data field collection element.</typeparam>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to which the pivot table result will be added.
            An exception is thrown if this value is null or empty.</param>
            <param name="resultName">A string that specifies the name of the result or null.
            If null, empty or if it consists of only white-space chars, IDEA will choose a default name.
            <para>IDEA will make sure that the name of the new result is unique in the list of the results of the target database.</para>
            <para>To have the method retrieve the actual result name, a potentially expensive operation, the caller must turn on
            the PivotTableOptions.DetectActualResultName.</para></param>
            <param name="columnFields">Specifies the sequence of fields to be put in the columns of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="rowFields">Specifies the sequence of fields to be put in the rows of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="dataFields">Specifies the sequence of fields to be put in the data area of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="pageFields">Specifies the sequence of fields to be put in the page area of the pivot table or null.</param>
            <param name="options">A PivotTableOptions value that specifies zero, one or more options that will
            affect the behavior of the creator.</param>
            <param name="actualResultName">A string reference that receives the actual result name if 
            the option PivotTableOptions.DetectActualResultName was set; otherwise null.</param>
            <exception cref="T:System.ArgumentNullException">If context, databaseName, columnFields, rowFields or dataFields is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogCreatePivotTableArguments``1(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions)">
            <summary>
            Writes the actual parameters of an CreatePivotTable operation to the log 
            in the specified context.
            </summary>
            <typeparam name="TDataField">The type of the data field collection element.</typeparam>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to which the pivot table result will be added.</param>
            <param name="resultName">A string that specifies the name of the result or null.
            If null, empty or if it consists of only white-space chars, IDEA will choose a default name.
            <para>IDEA will make sure that the name of the new result is unique in the list of the results of the target database.</para>
            <para>To have the method retrieve the actual result name, a potentially expensive operation, the caller must turn on
            the PivotTableOptions.DetectActualResultName.</para></param>
            <param name="columnFields">Specifies the sequence of fields to be put in the columns of the pivot table.</param>
            <param name="rowFields">Specifies the sequence of fields to be put in the rows of the pivot table.</param>
            <param name="dataFields">Specifies the sequence of fields to be put in the data area of the pivot table.</param>
            <param name="pageFields">Specifies the sequence of fields to be put in the page area of the pivot table or null.</param>
            <param name="options">A PivotTableOptions value that specifies zero, one or more options that will
            affect the behavior of the creator.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.ContentAreaFilter(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String[])">
            <summary>
            Creates an SA object filter that tests whether the ContentArea property is in the specified collection of 
            property values.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="propertyValues">An array of property values.</param>
            <returns>An IExpressionSimple.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FindByAlias(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Tries to retrieve the element with the specified alias from ImportedFiles.
            </summary>
            <param name="context">A reference to the execution context.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="alias">A string containing the alias of the requested file.
            <para>An exception is thrown if this value is null.</para></param>
            <returns>If the collection does not contain the specified alias, null; otherwise the ISimpleImportFile
            with the specified alias.</returns>
            <exception cref="T:System.ArgumentException">If context or alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.FindImportedFilenameByAlias(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Tries to retrieve the name of the imported file with the specified alias.
            </summary>
            <param name="context">A reference to the execution context.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="alias">A string containing the alias of the requested file.
            <para>An exception is thrown if this value is null.</para></param>
            <returns>If the collection does not contain the specified alias, null; otherwise the value of 
            the property ImportedFileName of the collection item with the specified alias.</returns>
            <exception cref="T:System.ArgumentException">If files or alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoCreateActionField(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an action field.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="actionFieldName">The name of the action field.
            An exception is thrown if this string is null or empty.</param>
            <param name="lookupDatabaseName">The project-relative name of the lookup database.
            An exception is thrown if this string is null or empty.</param>
            <param name="lookupFieldName">The name of the lookup field.
            An exception is thrown if this string is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If actionFieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If actionFieldName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If lookupDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If lookupDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If lookupFieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If lookupFieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetSumOfColumnLengths(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the sum of the length of a set of columns.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="columnNames">A reference to the sequence of column names.
            <para>An exception is thrown if this reference is null or if it contains
            null or empty items or if the database does not contain
            all the requested columns.</para>
            <para>If the sequence of columns is empty, the method returns 0.</para>
            <para>The column names are compared using StringComparer.InvariantCultureIgnoreCase.</para></param>
            <returns>An int.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If columnNames contains null or empty items.</exception>
            <exception cref="T:System.InvalidOperationException">If columnNames contains columns that are not
            in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DoIndex(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.Boolean)">
            <summary>
            Creates or updates a database index.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="keys">A sequence of keys to index the database by.
            An exception is thrown if this sequence is null or empty or if it contains
            null items.</param> 
            <param name="forceReindex">A boolean that specifies whether the callwer wants to
            force the index to be recreated or not.
            Default value: false.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.LogIndexParameters(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.Boolean)">
            <summary>
            Writes the actual parameters of an index operation to the log in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the source database.</param>
            <param name="keys">A sequence of keys to index the database by.</param>
            <param name="forceReindex">A boolean that specifies whether the callwer wants to
            force the index to be recreated or not.
            Default value: false.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.VerifyMandatoryColumns(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that a database contains a specified set of mandatory columns.
            The method uses StringComparer.OrdinalIgnoreCase to compare column names.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="mandatoryColumnNames">An enumerator of the collection of mandatory column names.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context, databaseName or mandatoryColumnNames is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If a mandatory column is missing.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.GetMissingColumns(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Enumerates the names of the columns that are missing from a database.
            The method uses StringComparer.OrdinalIgnoreCase to compare column names.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">A string containing the name of the database.
            An exception is thrown if this name is null or empty.</param>
            <param name="columnNames">An enumerator of the collection of column names whose existence will be determined.
            An exception is thrown if this reference is null.</param>
            <returns>A column name enumerator.</returns>
            <exception cref="T:System.ArgumentNullException">If context, databaseName or columnNames is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.CloseAndReleaseDatabase(COMMONIDEACONTROLSLib.IIdeaDatabase@)">
            <summary>
            Closes, releases and sets to null an IIdeaDatabase.
            </summary>
            <param name="database">The IIdeaDatabase to release. If null, the method does nothing./</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.TaskLocation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Determines the execution location of the task represented by its execution context.
            </summary>
            <param name="context">The IExecutionContext of the task.</param>
            <returns>ExecutionLocation.Server if context.IsServerTask is true; otherwise, ExecutionLocation.Client.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.DatabaseExists(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Determines whether a database exists at the specified context's default entity location.
            </summary>
            <param name="context">The IExecutionContext of the task.</param>
            <param name="databaseName">A string containing the database name.</param>
            <returns>True if the database exists; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If context or databaseName is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ContextExtensions.IdCannotBeEmptyMessage">
            <summary>
            Returns a string similar to 'The id cannot be empty.'.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.DoSummarizeResult">
            <summary>
            Describes the result of the method DoSummarize
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.DoSummarizeResult.ResultName">
            <summary>
            Gets the name of the result database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.DoSummarizeResult.RecordCountFieldName">
            <summary>
            Gets the name of the field containing the record count.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.EmptyArray`1">
            <summary>
            Declares a static and readonly empty array of the specified type.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.EmptyArray`1.Value">
            <summary>
            Gets a reference to the empty array of the specified type.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext">
            <summary>
            GenericCirExecutionContext is an execution context that is passed on to the data preparation creation of VAT standard jornal or MPP.
            </summary>
            <seealso cref="T:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext"/>
            <seealso cref="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IDataPreparationContext"/>
            <seealso cref="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext2"/>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext"/> class.
            </summary>        
            <param name="sink">The sink.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.CreateScriptProgress(System.Object)">
            <summary>
            Creates the script progress from a clientSite.
            </summary>
            <param name="clientSite">The client site.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.GetRequestedTableGroupIdentifiers">
            <summary>
            If DataReturnMode is true, the method gets an array with the identifiers of the requested table groups; otherwise
            the method returns an empty array.
            </summary>
            <returns>
            An array containing the identifiers of the requested table groups.
            The method returns an empty array if DataReturnMode is false.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.AddTypeResolverService(System.ComponentModel.Design.ServiceContainer,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Adds the IServiceTypeResolver service to the container.
            </summary>
            <param name="target">A ServiceContainer reference to the target container.
            An exception is thrown if this reference is null.</param>
            <param name="lookupTable">A dictionary that maps service ids to service types.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If target or lookupTable is null.</exception>
            <remarks>The method is NOT idempotent.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.GetImdFilesParameterization">
            <summary>
            Gets the imd files parameterization. service
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.DeleteDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Internals the delete data base no error.
            Only a temporary soluton becosu IdeaClient.DeleteDatabase not work well if a copy or move datatabase to a folder was done before
            </summary>
            <param name="context">The context.</param>
            <param name="dbName">Name of the database.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.DeleteDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Deletes the database.
            </summary>
            <param name="context">The context.</param>
            <param name="dbName">Name of the database.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.CopyDatabaseToFolder(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Copies the database to folder.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceDatabase">The source database.</param>
            <param name="folder">The folder.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.RenameDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String,COMMONIDEACONTROLSLib.IProjectManagement)">
            <summary>
            Renames the database.
            </summary>
            <param name="context">The context.</param>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
            <param name="prjMng">The PRJ MNG.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.GenerateTempDatabaseName(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Generates the name of the temporary database.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.GenerateTempDatabaseName(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Generates the name of the temporary database.
            </summary>
            <param name="context">The context.</param>
            <param name="folder">The folder.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.FoldersEquals(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Compare two folders
            </summary>
            <param name="context">The context.</param>
            <param name="folder1">The folder1.</param>
            <param name="folder2">The folder2.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.AbortImport">
            <summary>
            Gets / sets a value that instructs the importer to abort the task.
            </summary>
            <remarks>
            Default value: false
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.ImportFiles">
            <summary>
            Gets a reference to the collection of file descriptors of the current CIR or extension.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.Errors">
            <summary>
            Gets a reference to the collection of errors.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.UserData">
            <summary>
            Gets a reference to a dictionary that can be used to store user-definable data for the current CIR execution.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.Messages">
            <summary>
            Gets a reference to the collection of messages that are to be displayed in the message window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.AccountNumberLength">
            <summary>
            Gets or sets the length for account number columns. The default value is 0.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.CirOfficer">
            <summary>
            Gets the name of the person who should be contacted in case specific tables of a CIR have less or more columns as expected.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.HelpFilesDirectory">
            <summary>
            Gets the path where CIR help files are stored.
            The path should have a backslash at the end.
            It will be used within dialog macros.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.IsServerImportTask">
            <summary>
            Gets a value that indicates whether the IDEA databases are located on the server.
            </summary>
            <remarks>
            This property does not have always the same value as the property IsServerTask.
            Certain subtasks of a CIR do not run on IDEA Server (e.g., dialog tasks) and therefore
            IsServerTask will always be false for them. This property tells the caller whether the
            IDEA databases that were imported by the running CIR are located on the server or not.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.ParentWindowHandle">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.HostSynchronizationContext">
            <summary>
            Gets the SynchronizationContext of the host.
            </summary>
            <remarks>
            The HostSynchronizationContext is used by the executor or by a
            CIR subtask to implement modal dialog boxes.
            <para>This reference can be null.
            For a server task this reference is always null.
            </para>
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.CommandLine">
            <summary>
            Gets the command line (expanded, if the task has requested the expansion of environment variables) that was assigned to the task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.DataPreparationOnlyMode">
            <summary>
            Gets a value that indicates whether the CIR is being executed only to prepare data.
            </summary>
            <remarks>
            DataPreparationOnlyMode is true if and only if the CIR is being executed to prepare data that was
            imported in another session.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.SubtaskType">
            <summary>
            Gets a value that specifies the type of the current CIR subtask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.ParentWindowHandle32">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.ParentWindowHandleAsString">
            <summary>
            Gets the handle of the parent window as a string formatted using the InvariantCulture.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.DataReturnMode">
            <summary>
            Gets a value that indicates whether the CIR's data import is based on the response to a data request.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.GenericCirExecutionContext.RequestedTableGroupIdentifiers">
            <summary>
            Gets or sets the requested table group identifiers.
            </summary>
            <value>
            The requested table group identifiers.
            </value>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail">
            <summary>
            The class HistoryEntryDetail contains the data of one history entry's detail.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.#ctor">
            <summary>
            Initializes a new empty HistoryEntryDetail instance.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.#ctor(System.String,System.String)">
            <summary>
            Initializes a new HistoryEntryDetail.
            </summary>
            <param name="description">The description.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.WithDescription(System.String)">
            <summary>
            Creates a new HistoryEntryDetail instance with the specified description.
            </summary>
            <param name="description">The description.</param>
            <returns>A HistoryEntryDetail.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.AndText(System.String)">
            <summary>
            Sets the text of the current HistoryEntryDetail and returns a reference to itself.
            </summary>
            <param name="text">The text.</param>
            <returns>A HistoryEntryDetail reference to the current object.</returns>
            <remarks>The purpose of this method is to allow WF constructs like HistoryEntryDetail.WithDescription("abc").AndText("xyz").</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.Description">
            <summary>
            Gets / sets the description of the HistoryEntryDetail.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HistoryEntryDetail.Text">
            <summary>
            Gets / sets the text of the HistoryEntryDetail.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata">
            <summary>
            The class IdeaColumnMetadata holds the metadata of an IDEA column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.#ctor(COMDBLib.IField,System.Int32)">
            <summary>
            Initializes a new IdeaColumnMetadata by copying metadata from
            an IDEA field.
            </summary>
            <param name="field">The COMDBLib.IField from which to copy the metadata.
            An exception is thrown if this reference is null.</param>
            <param name="index">An Int32 that represents the position of the field in the TableDef of its database.</param>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsCharacterType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type alphanumeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsDateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Date.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsNumericType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Numeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsTimeType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Time.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsTristateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Tristate.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsBooleanType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Boolean.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsVirtualType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is virtual / computed.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsEditableType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is editable.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is editable; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Index">
            <summary>
            Gets the position of the field in the TableDef of its database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.ColumnType">
            <summary>
            Gets / sets the type of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Length">
            <summary>
            Gets / sets the length of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Decimals">
            <summary>
            Gets / sets the number of decimals.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Equation">
            <summary>
            Gets / sets the equation of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.Description">
            <summary>
            Gets / sets the description of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsCharacter">
            <summary>
            Gets a Boolean indicating wether the column is alphanumeric.
            </summary>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsDate">
            <summary>
            Gets a Boolean indicating whether the column is of type Date.
            </summary>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsNumeric">
            <summary>
            Gets a Boolean indicating whether to column is of type Numeric.
            </summary>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsTime">
            <summary>
            Gets a Boolean indicating whether the column is of type Time.
            </summary>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsTristate">
            <summary>
            Gets a Boolean indicating whether the column is of type Tristate.
            </summary>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsBoolean">
            <summary>
            Gets a Boolean indicating whether the column is of type Boolean.
            </summary>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsVirtual">
            <summary>
            Gets a Boolean indicating whether the column is virtual / computed.
            </summary>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaColumnMetadata.IsEditable">
            <summary>
            Gets a Boolean indicating whether the column is editable.
            </summary>
            <returns>True if the column is editable; otherwise, false.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorOptions.GenerateUniqueTableName">
            <summary>
            If set, the generator tries to create a unique database name starting from the suggested name.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorOptions.OverwriteExistingDatabase">
            <summary>
            If set and the database already exists, the generator overwrites it.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorHelper.GenerateIdeaDatabase(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData[],System.Action{COMDBLib.RecordSet,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData[]},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorOptions)">
            <summary>
            Creates a new IDEA database and optionally appends data to it.
            </summary>
            <param name="context">An IExecutionContext reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if databaseName is null or empty.
            If options includes GenerateUniqueDatabaseName, the method tries to create a unique
            database name starting from databaseName.</param>
            <param name="columnsData">A ComputedColumnData array containing the meta data of the
            new table's columns.
            An exception is throw if this array is null or empty.</param>
            <param name="rowAppender">An optional function that adds rows to the database.
            This reference can be null.</param>
            <param name="options">An IdeaTableCreatorOptions value that specifies whether
            the method creates a unique table name or not.</param>
            <returns>The name of the table.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty or if it consists only
            of white spaces.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsData is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsData is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If the database already exists and the option
            OverwriteExistingDatabase was not set.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorHelper.AddColumnsToIdeaDatabaseDefinition(COMDBLib.ITableDef,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData[])">
            <summary>
            Appends a set of columns to an IDEA COMDBLib.TableDef object.
            </summary>
            <param name="tableDef">The COMDBLib.TableDef to which the method appends new columns.
            An exception is thrown if this reference is null.</param>
            <param name="columns">A ComputedColumnData array that contains the metadata of the columns
            to add.
            An exception is thrown if this reference is null.
            In case the array is empty, the method does nothing.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorHelper.InitializeIdeaField(COMDBLib.IField,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData)">
            <summary>
            Initializes a new COMDBLib.IField object.
            </summary>
            <param name="newField">The COMDBLib.Field to initialize.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The ComputedColumnData object that supplies
            the property values for the new field.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If newField is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorHelper.AppendRecord(COMDBLib.IRecordSet,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData[],System.String[])">
            <summary>
            Appends a new row to a record set.
            </summary>
            <param name="recordSet">A COMDBLib.IRecordSet object to which the method appends a row.
            An exception is thrown if this reference is null.</param>
            <param name="columnsData">A ComputedColumnData array that contains the metadata of the columns to
            set.
            An exception is thrown if this reference is null.</param>
            <param name="values">A string array containing the values of the columns in columnsData.
            Conversions will be done using the Invariant culture.
            An exception  is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If recordSet is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsData is null.</exception>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaDatabaseCreatorHelper.SetColumnValue(COMDBLib.IRecord,System.Int32,Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData,System.String)">
            <summary>
            Sets the value of a column.
            </summary>
            <param name="newRecord">The IRecord object to modify.
            An exception is thrown if this reference is null.</param>
            <param name="columnIndex">The one-base index of the column to update.</param>
            <param name="columnData">The metadata object of the column.
            An exception is thrown if this reference is null.</param>
            <param name="value">The value to set. Conversions will be done using the Invariant culture.</param>
            <exception cref="T:System.ArgumentNullException">If newRecord is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats">
            <summary>
            A class that contains a read-only copy of the information in an IDEA FieldStats object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.GetValue(COMDBLib.StatsValueType)">
            <summary>
            Gets the value of the specified StatsValueType.
            </summary>
            <param name="type">The StatsValueType of the requested value.</param>
            <returns>A double containing the value of the specified StatsValueType.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsValueAvailable(COMDBLib.StatsValueType)">
            <summary>
            Gets a Boolean that specifies whether the value of the specified property is
            available through GetValue.
            </summary>
            <param name="type">The StatsValueType of the requested property.</param>
            <returns>True if the value of the specified property is available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.GetValueFMT(COMDBLib.StatsValueType)">
            <summary>
            Gets the string representation of the specified StatsValueType.
            </summary>
            <param name="type">The StatsValueType of the requested value.</param>
            <returns>A string containing the string representation of the specified StatsValueType.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsFmtValueAvailable(COMDBLib.StatsValueType)">
            <summary>
            Gets a Boolean that specifies whether the fmt-value of the specified property is
            available through GetValueFmt.
            </summary>
            <param name="type">The StatsValueType of the requested property.</param>
            <returns>True if the value of the specified property is available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.ItemsInDay(System.DayOfWeek)">
            <summary>
            Gets the number of records that occur on the specified day in a data field.
            </summary>
            <param name="day">The day for which the number of records will be retrieved.</param>
            <returns>A long containing the number of records that occur on the specified day in a data field.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If day is not a valid DayOfWeek.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsItemsInDayAvailable(System.DayOfWeek)">
            <summary>
            Gets a Boolean that specifies whether the specified ItemsInDay is available.
            </summary>
            <param name="day">The day for which the number of records will be retrieved.</param>
            <returns>True if the specified DayOfWeek is valid and its ItemsInDay is available; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.ItemsInMonth(System.Int32)">
            <summary>
            Gets the number of records that occur in the specified month in a data field.
            </summary>
            <param name="month">The zero-based number of the month.</param>
            <returns>A long containing the number of records that occur in the specified month in a data field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsItemsInMonthAvailable(System.Int32)">
            <summary>
            Gets a Boolean that specifies whether the specified ItemsInMonth is available.
            </summary>
            <param name="month">The zero-based number of the month.</param>
            <returns>True if the specified month is valid and its ItemsInMonth is available; otherwise, false.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.m_statsValues">
            <summary>
            A dictionary that holds the results of calling GetValue and GetValueFMT for all StatsValueTypes.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValues">
            <summary>
            A static array that contains all StatsValueTypes.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Collect(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String)">
            <summary>
            Collects the IDEA field stats of the specified column.
            </summary>
            <param name="databaseName">A string containing the database name.</param>
            <param name="databaseLocation">An ExecutionLocation that specifies whether 
            the database is located in the current desktop project or on in the current server project.</param>
            <param name="columnName">A string containing the name of the column whose stats will be collected.
            An exception will be thrown if the column does not support stats.</param>
            <returns>An IdeaFieldStats containing a copy of the information in IDEA's FieldStats object for the
            specified column.</returns>
            <exception cref="T:System.ArgumentNullException">If databaseName or columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName or columnName is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException">If the column does not exist.</exception>
            <exception cref="T:System.NotSupportedException">If the column does not support IDEA statistics.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Collect(COMDBLib.IComDatabase,System.String)">
            <summary>
            Collects the IDEA field stats of the specified column.
            </summary>
            <param name="database">An IComDatabase reference to the database object.</param>
            <param name="columnName">A string containing the name of the column whose stats will be collected.
            An exception will be thrown if the column does not support stats.</param>
            <returns>An IdeaFieldStats containing a copy of the information in IDEA's FieldStats object for the
            specified column.</returns>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException">If the column does not exist.</exception>
            <exception cref="T:System.NotSupportedException">If the field's type does not support IDEA statistics.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Create(COMDBLib.IFieldStats)">
            <summary>
            Creates and initializes a new IdeaFieldStats from an IDEA FieldStats object.
            </summary>
            <param name="fieldStats">The IFieldStats object that supplies the data for the new IdeaFieldStats object.</param>
            <returns>An IdeaFieldStats that contains a copy of the data in the specified FieldStats object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Create(COMDBLib.FieldStats)">
            <summary>
            Creates and initializes a new IdeaFieldStats from an IDEA FieldStats object.
            </summary>
            <param name="fieldStats">The FieldStats object that supplies the data for the new IdeaFieldStats object.</param>
            <returns>An IdeaFieldStats that contains a copy of the data in the specified FieldStats object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.FieldType">
            <summary>
            Gets / sets the FieldType property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Computed">
            <summary>
            Gets the value of the Computed property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.AbsValue">
            <summary>
            Gets the value of the AbsValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsAbsValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of the AbsValue property is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.AverageTime">
            <summary>
            Gets the value of the AverageTime property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsAverageTimeAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of AverageTime is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.AvgValue">
            <summary>
            Gets the value of the AvgValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsAvgValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of AvgValue is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.CRValue">
            <summary>
            Gets the value of the CRValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsCRValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of CRValue is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.DRValue">
            <summary>
            Gets the value of the DRValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsDRValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of CRValue is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.EarliestDate">
            <summary>
            Gets the value of the EarliestDay property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsEarliestDateAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of EarliestDate is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.EarliestTime">
            <summary>
            Gets the value of the EarliestTime property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsEarliestTimeAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of EarliestTime is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Kurtosis">
            <summary>
            Gets the value of the Kurtosis property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsKurtosisAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of Kurtosis is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.LatestDate">
            <summary>
            Gets the value of the LatestData property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsLatestDateAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of LatestDate is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.LatestTime">
            <summary>
            Gets the value of the LatestTime property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsLatestTimeAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of LatestTime is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MaxValue">
            <summary>
            Gets the value of the MaxValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMaxValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MaxValue is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MinValue">
            <summary>
            Gets the value of the MinValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMinValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MaxValue is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MostCommonDay">
            <summary>
            Gets the value of the MostCommonDay property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMostCommonDayAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonDay is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MostCommonHour">
            <summary>
            Gets the value of the MostCommonHor property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMostCommonHourAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonHour is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MostCommonMinute">
            <summary>
            Gets the value of the MostCommonMinute property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMostCommonMinuteAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonHour is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MostCommonMonth">
            <summary>
            Gets the value of the MostCommonMonth property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMostCommonMonthAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonMonth is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.MostCommonSecond">
            <summary>
            Gets the value of the MostCommonSecond property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsMostCommonSecondAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonSecond is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NetValue">
            <summary>
            Gets the value of the NetValue property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNetValueAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of MostCommonSecond is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumCRRec">
            <summary>
            Gets the value of the NumCRRec property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumCRRecAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumCRRec is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumDataErrors">
            <summary>
            Gets the value of the NumDataErrors property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumDataErrorsAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumDataErrors is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumDRRec">
            <summary>
            Gets the value of the NumDRRec property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumDRRecAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumDRRec is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecords">
            <summary>
            Gets the value of the NumRecords property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecordsAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecords is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsAfter6PM">
            <summary>
            Gets the value of the NumRecsAfter6PM property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsAfter6PMAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsAfter6PM is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsBefore6AM">
            <summary>
            Gets the value of the NumRecsBefore6AM property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsBefore6AMAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsBefore6AM is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsInAM">
            <summary>
            Gets the value of the NumRecsInAM property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsInAMAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsInAM is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsInPM">
            <summary>
            Gets the value of the NumRecsInPM property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsInPMAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsInPM is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsLessThanADay">
            <summary>
            Gets the value of the NumRecsLessThanADay property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsLessThanADayAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsLessThanADay is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumRecsMoreThanADay">
            <summary>
            Gets the value of the NumRecsMoreThanADay property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumRecsMoreThanADayAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumRecsMoreThanADay is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumValidValues">
            <summary>
            Gets the value of the NumValidValues property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumValidValuesAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumValidValues is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.NumZeroItems">
            <summary>
            Gets the value of the NumZeroItems property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsNumZeroItemsAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of NumValidValues is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.PopStdDev">
            <summary>
            Gets the value of the PopStdDev property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsPopStdDevAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of PopStdDev is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.PopVar">
            <summary>
            Gets the value of the PopVar property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsPopVarAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of PopVar is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Precision">
            <summary>
            Gets the value of the Precision property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsPrecisionAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of Precision is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.RecNumMax">
            <summary>
            Gets the value of the RecNumMax property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsRecNumMaxAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of RecNumMax is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.RecNumMin">
            <summary>
            Gets the value of the RecNumMin property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsRecNumMinAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of RecNumMin is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.SampleStdDev">
            <summary>
            Gets the value of the SampleStdDev property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsSampleStdDevAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of SampleStdDev is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.SampleVar">
            <summary>
            Gets the value of the SampleVar property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsSampleVarAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of SampleVar is available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.Skewness">
            <summary>
            Gets the value of the Skewness property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.IsSkewnessAvailable">
            <summary>
            Gets a Boolean that specifies whether the value of Skewness is available.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue">
            <summary>
            Holds the value and fmt-value of a StatsValueType item.
            If their retrieval failed, the object stores also the exceptions
            that occurred.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue.#ctor(COMDBLib.StatsValueType,COMDBLib.IFieldStats)">
            <summary>
            Initializes a new StatsValueTypeValue object with the values of the
            specified property. If their retrieval failed, the object stores also the exceptions
            that occurred.
            </summary>
            <param name="valueType">The StatsValueType to retrieve.</param>
            <param name="fieldStats">The FieldStats object that provides the requested values.</param>
            <exception cref="T:System.ArgumentNullException">If fieldStats is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue.Value">
            <summary>
            Gets the value of the property.
            </summary>
            <remarks>If the value could not be retrieved, the initial exception will be thrown.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue.IsValueAvailable">
            <summary>
            True if the value was retrieved successfully; otherwise, false.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue.FmtValue">
            <summary>
            Gets the fmt-value of the property.
            </summary>
            <remarks>If the fmt-value could not be retrieved, the initial exception will be thrown.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaFieldStats.StatsValueTypeValue.IsFmtValueAvailable">
            <summary>
            True if the fmt-value was retrieved successfully; otherwise, false.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.HResults">
            <summary>
            Contains declarations for standard HRESULTS.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHResults">
            <summary>
            Contains declarations for IDEA HRESULTS.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper">
            <summary>
            Idea helper.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IdeaNullDate">
            <summary>
            Returns the string representation of the IDEA 'null' date value.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.AlwaysFalseIdeaFilter">
            <summary>
            An IDEA expression that is always false.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.SortOrderA">
            <summary>
            Sort order 'A'.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.SortOrderD">
            <summary>
            Sort order 'D'.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoAppend(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.String)">
            <summary>
            Appends the specified database to an already open database.
            </summary>
            <param name="primaryDatabase">The primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseName">The name of the database to append.
            An exception is thrown if this reference is null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoAppendCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.String)">
            <summary>
            Implements the method DoAppend.
            </summary>
            <param name="primaryDatabase">The primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseName">The name of the database to append.
            An exception is thrown if this reference is null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoAppend(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String[],System.String,System.String)">
            <summary>
            Appends the specified databases to an already open database.
            </summary>
            <param name="primaryDatabase">The primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames contains null or empty entries.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoAppend2(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified databases to an already open database.
            </summary>
            <param name="primaryDatabase">The primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames contains null or empty entries.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoAppendCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Implements the method DoAppend.
            </summary>
            <param name="primaryDatabase">The primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseNames">The names of the databases to append.
            An exception is thrown if this reference is null or empty or if the array
            contains entries that are null or empty.</param>
            <param name="resultDatabaseName">The name of the result database.
            An exception is throw if this reference is null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A Boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseNames is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames is empty.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseNames contains null or empty entries.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoExtract(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Performs an extraction on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="startRow">The one-based index of the first row to extract.
            An exception is thrown if this value is not in the range [1, database-record-count] unless the source record count is zero.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index). If the source database is empty, zero is also valid.
            An exception is thrown if this value is not -1, 0 (see above) or in the range [1, database-record-count].</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoExtractCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Implements the method DoExtract.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the columns to
            include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="startRow">The one-based index of the first row to extract.
            An exception is thrown if this value is not in the range [1, database-record-count] unless the source record count is zero.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index). If the source database is empty, zero is also valid.
            An exception is thrown if this value is not -1, 0 (see above) or in the range [1, database-record-count].</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoDupKeyDetection(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a DupKeyDetection on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="outputDuplicates">An optional Boolean that specifies whether to output duplicates 
            or non-duplicates.
            <para>Default value: false.</para></param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase or keys is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoDupKeyExclusion(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Performs a DupKeyExclusion on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">The sequence of duplicate detection keys.</param>
            <param name="differentColumnName">The value of DifferentField. Cannot be null or empty
            or part of keys.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the result.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase, keys or differentColumnName is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName or differentColumnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnMetadataForDatabaseCreation(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Enumerates the specified fields of a database in the order in which they are returned by the enumerator and for each field
            creates a column metadata object that can be passed on to methods like IdeaDatabaseCreatorHelper.GenerateIdeaDatabase.
            </summary>
            <param name="sourceDatabase"></param>
            <param name="columnNames"></param>
            <returns>A ComputedColumnData array.</returns>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNames is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If a columnName does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.EnumerateColumnMetadataForDatabaseCreation(COMMONIDEACONTROLSLib.ITableDef)">
            <summary>
            Enumerates the fields of a database in the increasing order of their index and for each field
            returns a column metadata object that can be passed on to methods like IdeaDatabaseCreatorHelper.GenerateIdeaDatabase.
            </summary>
            <param name="tableDef">A COMMONIDEACONTROLSLib.ITableDef reference.
            <para>This reference must remain valid until the caller is done with the enumerator.</para></param>
            <returns>An IEnumerable reference.</returns>
            <exception cref="T:System.ArgumentNullException">If tableDef is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.EnumerateColumnMetadataForDatabaseCreation(COMMONIDEACONTROLSLib.ITableDef,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Enumerates the specified fields of a database in the order in which they are returned by the enumerator and for each field
            returns a column metadata object that can be passed on to methods like IdeaDatabaseCreatorHelper.GenerateIdeaDatabase.
            </summary>
            <param name="tableDef">A COMMONIDEACONTROLSLib.ITableDef reference.
            <para>This reference must remain valid until the caller is done with the enumerator.</para></param>
            <param name="columnNames">An enumerator of the columns for which metadata is requested.
            <para>An exception is thrown if a column does not exist.</para></param>
            <returns>An IEnumerable reference.</returns>
            <exception cref="T:System.ArgumentNullException">If tableDef or columnNames is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If a columnName does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnMetadataForDatabaseCreation(COMDBLib.IField)">
            <summary>
            Returns a column metadata object that can be passed on to methods like IdeaDatabaseCreatorHelper.GenerateIdeaDatabase 
            from a specified IDEA field.
            </summary>
            <param name="field">A COMDBLib.IField reference.</param>
            <returns>A ComputedColumnData object that has the same values as the source with the following exceptions:
            (1) ColumnType is the non-virtual and non-editable equivalent of the source field's type and (2) Equation is null.</returns>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToNonVirtualAndNonEditable(COMDBLib.VBFieldType)">
            <summary>
            Returns the non-virtual and non-editable equivalent of a field type.
            </summary>
            <param name="value">The COMDBLib.VBFieldType to convert.</param>
            <returns>A COMDBLib.VBFieldType value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToNonVirtualAndNonEditable(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Returns the non-virtual and non-editable equivalent of a field type.
            </summary>
            <param name="value">The COMMONIDEACONTROLSLib.VBFieldType to convert.</param>
            <returns>A COMMONIDEACONTROLSLib.VBFieldType value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSort(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData})">
            <summary>
            Creates a new database that is physically sorted in the specified order.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSort2(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.Boolean)">
            <summary>
            Creates a new database that is physically sorted in the specified order.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.
            The default value is false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSortCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoSort.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="createVirtualDatabase">A Boolean that specifies whether the extraction.</param>
            <param name="disableProgressNotification">A Boolean that specifies 
            whether the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSummarize(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Performs a summarization on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An optional IdeaStatistics value specifying the
            statistics to include in the result.
            The default value is IdeaStatistics.None.</param>
            <param name="createPercentField">An optional boolean specifying whether to
            create percent fields. The default value is false.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.
            The default value is false.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.
            The default value is false.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.
            The default value is true.
            </param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.
            </param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsToSummarize is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsToSummarize is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSummarize2(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a summarization on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            It can be null or empty.
            </param>
            <param name="statisticsToInclude">An optional IdeaStatistics value specifying the
            statistics to include in the result.
            The default value is IdeaStatistics.None.</param>
            <param name="createPercentField">An optional boolean specifying whether to
            create percent fields. The default value is false.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.
            The default value is false.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.
            The default value is false.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.
            The default value is true.
            </param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.
            </param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <param name="useQuickSummarization">An optional boolean that specifies
            if a quick summarization is requested.
            Default value: false.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsToSummarize is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsToSummarize is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSummarizeCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Implements the method DoSummarize.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            If can be null or empty.
            </param>
            <param name="statisticsToInclude">An IdeaStatistics value specifying the
            statistics to include in the result.</param>
            <param name="createPercentField">A boolean specifying whether to
            create percent fields.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <param name="useQuickSummarization">A boolean that specifies
            if a quick summarization is requested.</param>
            <returns>A DoSummarizeResult object.</returns>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsToSummarize is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsToSummarize is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetDatabaseLocation(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Determines the location of an IDEA database.
            </summary>
            <param name="database">An IIdeaDatabase object.</param>
            <returns>ExecutionLocation.Server if database is referencing an IDEA Server database; 
            otherwise, ExecutionLocation.Client.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the detection failed.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IsServerDatabase(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Detects whether the specified object is an IDEA Server database.
            </summary>
            <param name="database">An IIdeaDatabase object.</param>
            <returns>True if database is referencing an IDEA Server database; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the detection failed.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoJoin(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Joins two databases.
            </summary>
            <param name="primaryDatabase">A reference to the primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.EmptyColumnNameList">
            <summary>
            A constant that can be used in a join operation to indicate
            that a set of columns to be included is empty.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoJoinCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Implements the method DoJoin.
            </summary>
            <param name="primaryDatabase">A reference to the primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">A sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">A sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">A boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="disableProgressNotification">A boolean that specifies
            if the method should disable progress notifications.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnNames(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Gets the names of the columns of the specified database in the increasing order of their TableDef position.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <returns>A string array.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnNamesCore(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Gets the names of the columns of the specified database in the increasing order of their TableDef position.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <returns>A string array.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FindColumnNames(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Finds all columns that satisfy a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.</param>
            <returns>A string array.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FindColumnNamesCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Finds all columns that satisfy a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.</param>
            <returns>A string array.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetLastColumnName(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Gets the name of the field at the last position in a database's TableDef object.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <returns>A string containing the name of the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnNameAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32)">
            <summary>
            Gets the name of the field at the specied position in a database's TableDef object.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="index">The one-based index of the field or -1, if the caller requests
            the name of the last field.
            <para>An exception is thrown if the index is not in the valid range.</para></param>
            <returns>A string containing the name of the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnMetadataAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32)">
            <summary>
            Gets the metadata of the field at the specied position in a database's TableDef object.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="index">The one-based index of the field or -1, if the caller requests
            the metadata of the last field.
            <para>An exception is thrown if the index is not in the valid range.</para></param>
            <returns>An IdeaColumnMetadata object for the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetColumnNameAt(COMDBLib.IComDatabase,System.Int32)">
            <summary>
            Gets the name of the field at the specied position in a database's TableDef object.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="index">The one-based index of the field or -1, if the caller requests
            the name of the last field.
            <para>An exception is thrown if the index is not in the valid range.</para></param>
            <returns>A string containing the name of the specified field.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FirstColumnNameOrDefault(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FirstColumnNameOrDefaultCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.LastColumnNameOrDefault(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria in reverse TableDef order.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            </param>
            <returns>The name of the last column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FirstColumnNameOrDefault(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{System.Int32,COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            The function receives the TableDef-index of the field, an IField reference to
            the field metadata and returns true if the field matches the criteria, otherwise false.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FirstColumnNameOrDefaultCore(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Func{System.Int32,COMDBLib.IField,System.Boolean})">
            <summary>
            Searches for the first column that satisfies a given criteria.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">The criteria.
            An exception is thrown if this reference is null.
            The function receives the TableDef-index of the field, an IField reference to
            the field metadata and returns true if the field matches the criteria, otherwise false.
            </param>
            <returns>The name of the first column that satisfies the specified criteria,
            or null if no such column exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If criteria is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.SetFileComment(System.String,System.String)">
            <summary>
            Sets the comment of the specified table.
            </summary>
            <param name="fileName">A string value that specifies the fully-qualified file name, including the extension, of the table to comment.</param>
            <param name="comment">A string value that specifies the comment.</param>
            <exception cref="T:System.ArgumentNullException">If fileName is null.</exception>
            <exception cref="T:System.ArgumentException">If fileName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If comment is null.</exception>
            <remarks>The method adds the specified comment to the collection of comments of the given table.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.SetFileCommentCore(System.String,System.String)">
            <summary>
            Implements SetFileComment.
            </summary>
            <param name="fileName">A string value that specifies the fully-qualified file name, including the extension, of the table to comment.</param>
            <param name="comment">A string value that specifies the comment.</param>
            <exception cref="T:System.ArgumentNullException">If fileName is null.</exception>
            <exception cref="T:System.ArgumentException">If fileName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If comment is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToIdeaDateString(System.DateTime)">
            <summary>
            Returns the IDEA string representation of a date value.
            </summary>
            <param name="value">The DateTime value to convert.</param>
            <returns>A string containing the IDEA string representation
            of the specified date value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToIdeaDateString(System.Nullable{System.DateTime})">
            <summary>
            Returns the IDEA string representation of a date value.
            </summary>
            <param name="value">The DateTime? value to convert.</param>
            <returns>A string containing the IDEA string representation
            of the specified date value or IdeaNullDate, if value is null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FromIdeaDate(System.String)">
            <summary>
            Converts a date value in IDEA format to a DateTime value.
            </summary>
            <param name="value">A string containing a date in IDEA Format (yyyyMMdd) or null or empty.</param>
            <returns>Null, if value is IdeaNullDate or null or empty; otherwise, a DateTime value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToIdeaString(Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder)">
            <summary>
            Converts an IdeaSortOrder value to its IDEA string equivalent.
            </summary>
            <param name="value">An IdeaSorderOrder value.</param>
            <returns>A string</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">If value cannot be converted.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.MakeIdeaStringLiteral(System.String)">
            <summary>
            Creates an IDEA expression that can represent a string constant.
            </summary>
            <param name="value">The value for which an IDEA expression is created.
            An exception is thrown if this reference is null.</param>
            <returns>A string containining an IDEA expression that escapes
            the special chars of the given literal.</returns>
            <example>If the input is ab"cd, the method returns "ab" + @Chr(34) + "cd".
            If the input is abc, the method returns "abc".</example>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.TextEncapsulators">
            <summary>
            Defines IDEA's text encapsulator as an array with one element.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.FlagDatabase(COMMONIDEACONTROLSLib.IIdeaClient,System.String)">
            <summary>
            Flags the specified IDEA database.
            </summary>
            <param name="client">The IDEA client object.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If client is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
            <remarks>The method flips the specified databases's Flagged property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.CreateActionScriptFileInMacrosLibrary(System.String,System.String)">
            <summary>
            Stores a macro in the current IDEA project's Macros.ILB library.
            </summary>
            <param name="scriptName">The name without path and extension of the macro file.
            If a macro file named scriptName.ext, where ext. is the current IDEA macro
            extension (.iss or .ism) already exists, it will be overwritten.
            If null or empty, the method generates an unique file name.</param>
            <param name="scriptBody">A string containing the IDEA script
            to store. 
            An exception is thrown if this string is null.</param>
            <returns>The path of the macro file relative to the current IDEA project's folder.</returns>
            <exception cref="T:System.ArgumentNullException">If scriptBody is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetIdeaScriptExtensionAndEncoding">
            <summary>
            Retrieves the IDEA script file dotted extension (including and encoding.
            </summary>
            <returns>An IdeaScriptExtensionAndEncoding.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.CreateActionScriptFileInServerMacrosLibrary(System.String,System.String)">
            <summary>
            Stores a macro in the current IDEA Server project's Macros.ILB library.
            </summary>
            <param name="scriptName">The name without path and extension of the macro file.
            If a macro file named scriptName.ext, where ext. is the current IDEA macro
            extension (.iss or .ism) already exists, it will be overwritten.
            If null or empty, the method generates an unique file name.</param>
            <param name="scriptBody">A string containing the IDEA script
            to store. 
            An exception is thrown if this string is null.</param>
            <returns>The UNC path to the macro file.</returns>
            <exception cref="T:System.ArgumentNullException">If scriptBody is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ServerLibraryNotFoundMessage(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns a message like 'The server library 'value' was not found.'.
            </summary>
            <param name="value">The server library id.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ScriptFileUploadError(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns a string like 'The script file could not be uploaded to the server library 'destination'.'.
            </summary>
            <param name="destination">The server library id.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.CreateActionFieldForIDEAScript(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String,COMDBLib.ActionFieldScriptType,System.String)">
            <summary>
            Creates an action field of type IDEA Script for a database column.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="columnName">The name of the column
            for which an action field will be created.
            An exception is thrown if this name is null or empty
            or if the column does not exist.</param>
            <param name="scriptFileName">The name of the script file.
            An exception is thrown if this name is null or empty.</param>
            <param name="type1">The type of the first script parameter.</param>
            <param name="param1">The value of the first script parameter.</param>
            <param name="type2">The type of the second script parameter.</param>
            <param name="param2">The value of the second script parameter.</param>
            <param name="type3">The type of the third script parameter.</param>
            <param name="param3">The value of the third script parameter.</param>
            <param name="type4">The type of the fourth script parameter.</param>
            <param name="param4">The value of the fourth script parameter.</param>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If scriptFileName is null.</exception>
            <exception cref="T:System.ArgumentException">If scriptFileName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.CreatePivotTable``1(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions,System.String@)">
            <summary>
            Creates a new pivot table result inside an IDEA database and optionally
            exports the the result to an IDEA database and detects the actual result name.
            </summary>
            <typeparam name="TDataField">The type of the data field collection element.</typeparam>
            <param name="database">A reference to the database to which the pivot table result will be added.
            An exception is thrown if this reference is null.</param>
            <param name="resultName">A string that specifies the name of the result or null.
            If null, empty or if it consists of only white-space chars, IDEA will choose a default name.
            <para>IDEA will make sure that the name of the new result is unique in the list of the results of the target database.</para>
            <para>To have the method retrieve the actual result name, a potentially expensive operation, the caller must turn on
            the PivotTableOptions.DetectActualResultName.</para></param>
            <param name="columnFields">Specifies the sequence of fields to be put in the columns of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="rowFields">Specifies the sequence of fields to be put in the rows of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="dataFields">Specifies the sequence of fields to be put in the data area of the pivot table.
            An exception is thrown if this reference is null.</param>
            <param name="pageFields">Specifies the sequence of fields to be put in the page area of the pivot table or null.</param>
            <param name="options">A PivotTableOptions value that specifies zero, one or more options that will
            affect the behavior of the creator.</param>
            <param name="actualResultName">A string reference that receives the actual result name if 
            the option PivotTableOptions.DetectActualResultName was set; otherwise null.</param>
            <exception cref="T:System.ArgumentNullException">If database, columnFields, rowFields or dataFields is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.GetResultCount(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Retrieves the number of results contained in an IDEA database.
            </summary>
            <param name="database">A reference to the database whose result count is requested.
            An exception is thrown if this reference is null.</param>
            <returns>An Int32 containing the current number of results in the specified database.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoIndex(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData},System.Boolean,System.Boolean)">
            <summary>
            Creates or updates a database index.
            </summary>
            <param name="database">A reference to the database.
            An exception is thrown if this reference is null.</param>
            <param name="keys">A sequence of keys to index the database by.
            An exception is thrown if this sequence is null or empty or if it contains
            null items.</param>
            <param name="forceReindex">A boolean that specifies whether the callwer wants to
            force the index to be recreated or not.
            Default value: false.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IdeaNumberFormatInfo">
            <summary>
            Provides information for formatting numbers like IDEA's @str
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoExtract2(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Performs an extraction on the specified database.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the names of the columns to include in the extraction.
            If null, all columns will be included.</param>
            <param name="newColumns">An optional sequence of new columns to be
            added to the result database during the extraction or null if no new
            columns are to be added.
            </param>
            <param name="keys">An optional set of keys to be used to sort the database.
            If null or empty, the result database will not be sorted.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="startRow">The one-based index of the first row to extract.
            An exception is thrown if this value is not in the range [1, database-record-count] unless the source record count is zero.</param>
            <param name="endRow">The one-based index of the last row to extract or -1 (i.e.,
            the last valid index). If the source database is empty, zero is also valid.
            An exception is thrown if this value is not -1, 0 (see above) or in the range [1, database-record-count].</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startRow or endRow are outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoSort(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData},System.Boolean,System.Boolean)">
            <summary>
            Creates a new database that is physically sorted in the specified order.
            </summary>
            <param name="sourceDatabase">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="keys">A sequence specifying the sort keys.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="createVirtualDatabase">An optional Boolean that specifies whether the extraction
            creates a virtual database.
            Default value: false.</param>
            <param name="disableProgressNotification">An optional Boolean that specifies 
            whether the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If keys is null.</exception>
            <exception cref="T:System.ArgumentException">If keys is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DoJoin(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData},Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Joins two databases.
            </summary>
            <param name="primaryDatabase">A reference to the primary database.
            An exception is thrown if this reference is null.</param>
            <param name="secondaryDatabaseName">The name of the secondary database.
            An exception is thrown if this string is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="matchingColumns">An optional sequence specifying the matching columns.
            An exception is thrown if the sequence is null or empty.</param>
            <param name="joinType">The join type.</param>
            <param name="primaryColumnsNames">An optional sequence specifying the names of the
            columns of the primary table to include.
            If null, all columns will be included.</param>
            <param name="secondaryColumnNames">A sequence specifying the names of the 
            columns of the secondary table to include.
            If null, all columns will be included.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.
            The default value is false.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.
            The default value is null.</param>
            <param name="disableProgressNotification">An optional boolean that specifies
            if the method should disable progress notifications.
            Default value: false.</param>
            <exception cref="T:System.ArgumentNullException">If primaryDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If secondaryDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If secondaryDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is null.</exception>
            <exception cref="T:System.ArgumentNullException">If matchingColumns is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ExistsRow(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Determines whether an IDEA database contains a row that satisfies a given predicate.
            </summary>
            <param name="database">An IIdeaDatabase reference to the database to test.
            An exception is thrown if this reference is null.</param>
            <param name="predicate">A string containing the predicate (i.e., an IDEA equation valid for the specified database) or null. 
            If null or empty, the method checks whether the database contains any rows.</param>
            <returns>True if the predicate is not null or empty and the database contains a row that satisfies the given predicate or 
            if the predicate is null or empty and the database is not empty; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IsDatabaseFlagged(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Determines whether the specified database is flagged.
            </summary>
            <param name="databaseName">A string containing the name of the database.</param>
            <param name="databaseLocation">An ExecutionLocation that specifies the location of the database.</param>
            <returns>True, if the database is flagged; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IsDatabaseFlagged(COMDBLib.IComDatabase2)">
            <summary>
            Determines whether the specified database is flagged.
            </summary>
            <param name="db">A COMDBLib.IComDatabase2 reference.</param>
            <returns>True, if the database is flagged; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If db is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToKeyData(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData})">
            <summary>
            Converts a sequence of IdeaKeyData objects to a sequence of KeyData objects.
            </summary>
            <param name="keys">The sequence of IdeaKeyData objects to convert or null.</param>
            <returns>A sequence of KeyData objects or null if keys is null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToKeyData(Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData)">
            <summary>
            Converts an IdeaKeyData to a KeyData object.
            </summary>
            <param name="value">The IdeaKeyData or null.</param>
            <returns>A KeyData or null if value is null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToMatchKeyData(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData})">
            <summary>
            Converts a sequence of IdeaMatchKeyData objects to a sequence of MatchKeyData objects.
            </summary>
            <param name="keys">The sequence of IdeaMatchKeyData objects to convert or null.</param>
            <returns>A sequence of MatchKeyData objects or null if keys is null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ToMatchKeyData(Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData)">
            <summary>
            Converts an IdeaMatchKeyData to a MatchKeyData object.
            </summary>
            <param name="value">The IdeaMatchKeyData or null.</param>
            <returns>A MatchKeyData or null if value is null.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.MatchingColumnsCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The list of matching columns cannot be empty.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.DatabaseNameCannotBeNullOrEmptyMessage">
            <summary>
            Gets a string similar to 'The name of the database cannot be null or empty.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IdeaStatisticsCannotBeNoneMessage">
            <summary>
            Gets a string similar to 'IdeaStatistics.None is not a valid value.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ColumnsToSummarizeCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The list of columns to summarize cannot be empty.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.ColumnsToTotalCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The list of columns to total cannot be empty.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.KeysCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The list of keys cannot be empty.'.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaHelper.IdeaScriptExtensionAndEncoding">
            <summary>
            Holds information about IDEA script file dotted extension and encoding.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType">
            <summary>
            Enumerates IDEA's join types.
            </summary>
            <remarks>Source: IDEA's Language Browser, Entry 'JoinDatabase.PerformTask'.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType.MatchOnly">
            <summary>
            Matches only
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType.AllInPrim">
            <summary>
            All records in primary file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType.AllRecAll">
            <summary>
            records in both files
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType.NocSecMatch">
            <summary>
            Records with no secondary match
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaJoinType.NocPriMatch">
            <summary>
            Records with no primary match
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData">
            <summary>
            The class IdeaKeyData holds the metadata for a keys in a sort operation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.#ctor(System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder)">
            <summary>
            Initializes a new IdeaKeyData instance.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="order">The sort order.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.GetHashCode">
            <summary>
            Calculates the current object's hash code.
            </summary>
            <returns>An Int32 hash code.</returns>
            <remarks>Uses the implementation of Tuple.CombineHash to combine the hashes of the members.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.Asc(System.String)">
            <summary>
            Returns a new IdeaKeyData having Order equal to IdeaSortOrder.Ascending.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>A new IdeaKeyData with the specified name and Order equal to IdeaSortOrder.Ascending.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.Desc(System.String)">
            <summary>
            Returns a new IdeaKeyData having Order equal to IdeaSortOrder.Descending.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>A new IdeaKeyData with the specified name and Order equal to IdeaSortOrder.Descending.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.AscArray(System.String[])">
            <summary>
            Creates an IdeaKeyData array with the specified names and IdeaSortOrder.Ascending.
            </summary>
            <param name="names">The name array or null.</param>
            <returns>An IdeaKeyData array (empty if names is null or empty).</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.DescArray(System.String[])">
            <summary>
            Creates an IdeaKeyData array with the specified names and IdeaSortOrder.Descending.
            </summary>
            <param name="names">The name array or null.</param>
            <returns>An IdeaKeyData array (empty if names is null or empty).</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.Array(Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData[])">
            <summary>
            Returns the specified array.
            </summary>
            <param name="items">An IdeaKeyData array.</param>
            <returns>An IdeaKeyDataarray.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaKeyData.Order">
            <summary>
            Gets / sets the sort order.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData">
            <summary>
            The class IdeaMatchKeyData holds the metadata for a pair of keys in a join operation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.#ctor">
            <summary>
            Initializes a new empty IdeaMatchKeyData.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.#ctor(System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder)">
            <summary>
            Initializes a new IdeaMatchKeyData with the specified column name
            and sort order.
            </summary>
            <param name="columnName">The name of the primary and secondary column.</param>
            <param name="order">The sort order.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.#ctor(System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder,System.String)">
            <summary>
            Initializes a new IdeaMatchKeyData instance.
            </summary>
            <param name="primaryName">The name of the primary column.</param>
            <param name="order">The sort order.</param>
            <param name="secondaryName">The name of the secondary column.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.GetHashCode">
            <summary>
            Calculates the current object's hash code.
            </summary>
            <returns>An Int32 hash code.</returns>
            <remarks>Uses the implementation of Tuple.CombineHash to combine the hashes of the members.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.Asc(System.String)">
            <summary>
            Creates a new IdeaMatchKeyData with the specified column name and IdeaSortOrder.Ascending.
            </summary>
            <param name="columnName">The name of the primary and secondary column.</param>
            <returns>A MatchKeyData.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.Asc(System.String,System.String)">
            <summary>
            Creates a new IdeaMatchKeyData with the specified column names and IdeaSortOrder.Ascending.
            </summary>
            <param name="primaryName">The name of the primary column.</param>
            <param name="secondaryName">The name of the secondary column.</param>
            <returns>An IdeaMatchKeyData.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.Desc(System.String)">
            <summary>
            Creates a new IdeaMatchKeyData with the specified column name and IdeaSortOrder.Descending.
            </summary>
            <param name="columnName">The name of the primary and secondary column.</param>
            <returns>An IdeaMatchKeyData.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.Desc(System.String,System.String)">
            <summary>
            Creates a new IdeaMatchKeyData with the specified column names and IdeaSortOrder.Ascending.
            </summary>
            <param name="primaryName">The name of the primary column.</param>
            <param name="secondaryName">The name of the secondary column.</param>
            <returns>An IdeaMatchKeyData.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.PrimaryName">
            <summary>
            Gets / sets the name of the column of the primary table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.SecondaryName">
            <summary>
            Gets / sets the name of the column of the secondary table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaMatchKeyData.Order">
            <summary>
            Gets / sets the sort order.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder">
            <summary>
            IDEA SortOrder enum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaSortOrder.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics">
            <summary>
            Enumerates the statistics supported by IDEA's summarization.
            </summary>
            <remarks>Source: IDEA's Language Browser, Entry 'Summarization.StatisticsToInclude'.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.None">
            <summary>
            No statistics were specified.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.Variance">
            <summary>
            Variance
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.IdeaStatistics.StandardDeviation">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ISimpleImportFilesExtensions">
            <summary>
            Extension methods for ISimpleImportFiles.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ISimpleImportFilesExtensions.FindByAlias(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,System.String)">
            <summary>
            Tries to retrieve the element with the specified alias.
            </summary>
            <param name="files">The ISimpleImportFiles collection to query.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="alias">A string containing the alias of the requested file.
            <para>An exception is thrown if this value is null.</para></param>
            <returns>If the collection does not contain the specified alias, null; otherwise the ISimpleImportFile
            with the specified alias.</returns>
            <exception cref="T:System.ArgumentException">If files or alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ISimpleImportFilesExtensions.FindImportedFilenameByAlias(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,System.String)">
            <summary>
            Tries to retrieve the name of the imported file with the specified alias.
            </summary>
            <param name="files">The ISimpleImportFiles collection to query.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="alias">A string containing the alias of the requested file.
            <para>An exception is thrown if this value is null.</para></param>
            <returns>If the collection does not contain the specified alias, null; otherwise the value of 
            the property ImportedFileName of the collection item with the specified alias.</returns>
            <exception cref="T:System.ArgumentException">If files or alias is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData">
            <summary>
            The class MatchKeyData holds the metadata for a pair of keys in a join operation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData.PrimaryName">
            <summary>
            Gets / sets the name of the column of the primary table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData.SecondaryName">
            <summary>
            Gets / sets the name of the column of the secondary table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.MatchKeyData.Order">
            <summary>
            Gets / sets the sort order ('A' or 'D').
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData">
            <summary>
            The class KeyData holds the metadata for a key in a sort or index operation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.KeyData.Order">
            <summary>
            Gets / sets the sort order ('A' or 'D').
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField">
            <summary>
            Holds the data of an IDEA PivotTable data field.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.#ctor">
            <summary>
            Initializes a new empty PivotTableDataField.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.#ctor(System.String)">
            <summary>
            Initializes a new PivotTableDataField with the specified field name, a null display name and a summarization type of Count.
            </summary>
            <param name="fieldName">The name of the field to put in the data area of the PivotTable or null.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.#ctor(System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType)">
            <summary>
            Initializes a new PivotTableDataField with the specified field name, a null display name and the specified summarization type.
            </summary>
            <param name="fieldName">The name of the field to put in the data area of the PivotTable or null.</param>
            <param name="summarizationType">The type of summarization to compute for this data field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.#ctor(System.String,System.String,Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType)">
            <summary>
            Initializes a new PivotTableDataField with the specified field name, display name and the specified summarization type.
            </summary>
            <param name="fieldName">The name of the field to put in the data area of the PivotTable or null.</param>
            <param name="displayName">The display name / caption of the data field or null.</param>
            <param name="summarizationType">The type of summarization to compute for this data field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.#ctor(Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField)">
            <summary>
            Initializes a new PivotTableDataField with a copy of the specified PivotTableDataField object.
            </summary>
            <param name="value">The PivotTableDataField to duplicate.</param>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.GetHashCode">
            <summary>
            Calculates the current object's hash code.
            </summary>
            <returns>An Int32 hash code.</returns>
            <remarks>Uses the implementation of Tuple.CombineHash to combine the hashes of the members.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.FieldName">
            <summary>
            Gets / sets the field name to put in the data area of the PivotTable.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.DisplayName">
            <summary>
            Gets / sets the display name / caption of the data field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableDataField.SummarizationType">
            <summary>
            Gets / sets the type of summarization to compute for this data field.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions">
            <summary>
            Defines the options that can be used when creating an IDEA pivot table result.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions.None">
            <summary>
            No options were selected.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions.DisableProgressNotification">
            <summary>
            If set, instructs IDEA to disable the progress notification mechanism
            during the execution of the task.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions.ExportToIdea">
            <summary>
            If set, instructs IDEA to export the pivot table result to an IDEA database.
            According to IDEA's Help, a "pivot table can be exported to an IDEA database 
            if it only contains one row field, one column field, and one data field."
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions.DataFieldOnColumn">
            <summary>
            If set, instructs IDEA to position the data fields on column.
            If not specified, the default behavior is to place these fields on row.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableOptions.DetectActualResultName">
            <summary>
            If set, instructs the creator to determine the actual result name of the pivot table
            and return it to the caller.
            If not specified, the creator will not attempt to retrieve the actual result name.
            The detection of the actual result name is a potentially expensive operation.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType">
            <summary>
            Defines the summarization types supported by IDEA's PivotTable class.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Default">
            <summary>
            Default value; same as Count.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.PivotTableSummarizationType.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData">
            <summary>
            The class RenameColumnData holds the data related to renaming a column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData.#ctor">
            <summary>
            Initializes a new empty RenameColumnData.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData.NewName">
            <summary>
            Gets / sets the new name of the column.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.RenameColumnData.NewDescription">
            <summary>
            Gets / sets the new description of the column.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AboutToAssignTagsMessage">
            <summary>
              Looks up a localized string similar to About to assign tags to the database &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AboutToCreateResultMessage">
            <summary>
              Looks up a localized string similar to About to create the result &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AboutToDeleteDatabaseMessage">
            <summary>
              Looks up a localized string similar to About to delete the database &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AboutToDeleteTemporaryResultMessage">
            <summary>
              Looks up a localized string similar to About to delete the intermediate result &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AboutToSetTagMessage">
            <summary>
              Looks up a localized string similar to About to assign the tag with ID &apos;{0}&apos; to the field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_CollectionCannotContainsNulls">
            <summary>
              Looks up a localized string similar to The collection cannot contain nulls..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyColumnList">
            <summary>
              Looks up a localized string similar to The list of fields cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyDatabaseName">
            <summary>
              Looks up a localized string similar to The name of the database cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyFileName">
            <summary>
              Looks up a localized string similar to The name of the file cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyKeyList">
            <summary>
              Looks up a localized string similar to The list of keys cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyMatchingColumnList">
            <summary>
              Looks up a localized string similar to The list of matching fields cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyOrNullColumnNamesItem">
            <summary>
              Looks up a localized string similar to The sequence of field names cannot contain null or empty items..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptySummarizeColumnList">
            <summary>
              Looks up a localized string similar to The list of fields to summarize cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_EmptyTotalColumnList">
            <summary>
              Looks up a localized string similar to The list of fields to total cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_IdeaStatisticsIsNone">
            <summary>
              Looks up a localized string similar to For IdeaStatistics None is not a valid value..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_SequenceContainsNullOrEmptyItems">
            <summary>
              Looks up a localized string similar to The sequence of field names cannot contain null or empty items..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Arg_ValueOutOfRangeMessage">
            <summary>
              Looks up a localized string similar to The value must be in the range of {0} - {1}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.AssignTagsErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The tags could not be assigned to &apos;{0}&apos;. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ColumnNameCannotBeEmptyMessage">
            <summary>
              Looks up a localized string similar to The name of the field cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ColumnsWithDefaultValuesMessageTitle">
            <summary>
              Looks up a localized string similar to Fields of database &apos;{0}&apos; filled with default values.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.DatabaseDeletedSuccessfullyMessage">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; was deleted successfully..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.DatabaseDeletionErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; could not be deleted. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.DatabaseNameCannotBeEmptyMessage">
            <summary>
              Looks up a localized string similar to The name of the database cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.EquationCannotBeNullOrEmptyMessage">
            <summary>
              Looks up a localized string similar to The equation cannot be null or empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_CannotReadPropertyFlagged">
            <summary>
              Looks up a localized string similar to Cannot read the Flagged property.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ColumnDoesNotSupportStatistics">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; of type &apos;{1}&apos; in the database &apos;{2}&apos; does not support statistics..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ColumnNotFound">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ColumnNotFoundInDatabase">
            <summary>
              Looks up a localized string similar to The column {0} does not exist in the database {1}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_CouldNotOpenDatabase">
            <summary>
              Looks up a localized string similar to Could not open the database &apos;{0}&apos;. Reason: {1}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_DatabaseDoesNotContainColumn">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; does not contain the field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_DatabaseDoesNotSupportComDatabase">
            <summary>
              Looks up a localized string similar to ComDatabase2 does not support COMMONIDEACONTROLSLib.IComDatabase..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_DatabaseDoesNotSupportIdeaDatabaseSetup">
            <summary>
              Looks up a localized string similar to IdeaDatabase does not support the interface IIdeaDatabaseSetup..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_DatabaseReturnedNonImdInfoMergedDocument">
            <summary>
              Looks up a localized string similar to The database object returned an COMDBLib.IIdeaMergedDocument object that does not support the interface COMDBLib.IIMDInfo..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_DestinationDatabaseAlreadyExists">
            <summary>
              Looks up a localized string similar to The destination database already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_EmptyColumnName">
            <summary>
              Looks up a localized string similar to The name of the column cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_EmptyDatabaseName">
            <summary>
              Looks up a localized string similar to The name of the database cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ExecutionContextNotSpecified">
            <summary>
              Looks up a localized string similar to The execution context was not specified..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_FileNotFound">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_InvalidEntityLocation">
            <summary>
              Looks up a localized string similar to The {0} is not a defined IdeaEntityLocation value..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_InvalidPropertyValue">
            <summary>
              Looks up a localized string similar to The property {0} has an invalid value..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_PropertyValueOutOfRange">
            <summary>
              Looks up a localized string similar to The value of {0} must be in the the range of {1} - {2}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ScriptFileUploadFailed">
            <summary>
              Looks up a localized string similar to The script file could not be uploaded to the server library &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ServerDatabaseDetectionFailed">
            <summary>
              Looks up a localized string similar to Cannot determine whether the specified object is an IDEA Server database..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_ServerLibraryNotFound">
            <summary>
              Looks up a localized string similar to The server library &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_SourceDatabaseNotSpecified">
            <summary>
              Looks up a localized string similar to The source database was not specified..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_StringTableEntryNotFound">
            <summary>
              Looks up a localized string similar to The string table does not contain a value with id {0}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.Error_WrongDatabaseObjectType">
            <summary>
              Looks up a localized string similar to The database object reference is not of the expected type &apos;{0}&apos;. Actual type: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.FieldCreationErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; could not be added. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.FieldUpdateErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; could not be updated. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.FlagDatabaseErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; could not be flagged. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The database &apos;{1}&apos; is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning1">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The database &apos;{1}&apos; is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The corresponding input database with logical name &apos;{1}&apos; is not available..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabaseNotImportedWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The database &apos;{1}&apos; was not imported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabaseNotImportedWarning1">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The database &apos;{1}&apos; was not imported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.GetResultCannotBeCreatedBecauseDatabasesNotAvailableWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The corresponding input databases are either not available or empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ResultCannotBeCreatedBecauseDatabaseIsEmptyWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Reason: The database &apos;{1}&apos; is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ResultCreatedSuccessfullyMessage">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; was created successfully. Database: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ResultCreatedSuccessfullyMessage2">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; was created successfully. Database: &apos;{1}&apos;. Records: {2:N0}, Size: {3:N3} KB, Duration: {4}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.ResultCreationErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The result &apos;{0}&apos; could not be created. Error: {1}, Reason: {2}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.SecondaryDatabaseCollectionForAppendCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The collection of databases to be appended to the primary database cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.SetTagErrorHandlerWarning">
            <summary>
              Looks up a localized string similar to The tag &apos;{0}&apos; could not be assigned to the field &apos;{1}&apos;. Error: {2}, Reason: {3}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.SetTagSucceededMessage">
            <summary>
              Looks up a localized string similar to The tag &apos;{0}&apos; was assigned successfully..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.SpalteMitStandardwerten">
            <summary>
              Looks up a localized string similar to [SA] Field was filled with default values.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.Resources.Messages.TXT_ERR_MISSING_SERVICE">
            <summary>
              Looks up a localized string similar to The service &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator">
            <summary>
            Defines the base class of all the other result creators.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Initializes a new ResultCreator instance.
            </summary>
            <param name="context">An ICirExecutionContext reference to the current context.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.m_context">
            <summary>
            An IDataPreparationContext reference to the current context.
            Init: .ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.Create">
            <summary>
            Creates the result and deletes the registered temporary databases at the end of the task.
            Delegates the core task to DoCreate.
            </summary>
            <returns>An ITestResultFile object that describes the result database.</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If the result cannot
            be created because its source is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DoCreate">
            <summary>
            Creates the result.
            </summary>
            <returns>An ITestResultFile object that describes the result database.</returns>
            <remarks>The default implementation does not register the result file object
            in the current execution context.
            The default implementation removes the history of the result.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DoCreateResultObject(System.String)">
            <summary>
            Creates a result object for the specified database.
            DoCreate calls this method to wrap the result database
            in a TestResultFile object.
            </summary>
            <param name="resultDatabaseName">A string containing the name of the database.
            An exception is thrown if this reference is null or empty.</param>
            <returns>An ITestResultFile object.</returns>
            <remarks>The default implementation does not register the result file object
            in the current execution context.</remarks>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DoCreateResultDatabase">
            <summary>
            Creates the result database.
            </summary>
            <returns>A non-empty string containing the name of the result database.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotNull(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,System.String,System.String)">
            <summary>
            Verifies that the specified source is not null and source.ImportedFileName is
            not null or empty.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is null.
            </summary>
            <param name="source">The ISimpleImportFile containing information about the 
            source database.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceDatabaseAlias">The alias of the source database.
            The method uses it in the error message.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null.
            </exception>
            <remarks>If source is null or source.ImportedFileName is null or empty, the method logs 
            the error message 'ResultCannotBeCreatedBecauseDatabaseNotImportedMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotEmpty(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,System.String,System.String)">
            <summary>
            Verifies that the specified source is not null and that its DatabaseRecordCount is not zero.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is not valid.
            </summary>
            <param name="source">The ISimpleImportFile containing information about the 
            source database.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceDatabaseAlias">The alias of the source database.
            The method uses it in the error message.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null or if source.DatabaseRecordCount is zero.
            </exception>
            <remarks>If source is null, the method logs the error message 'ResultCannotBeCreatedBecauseDatabaseNotImportedMessage' and
            throws a System.InvalidOperationException.
            If source.DatabaseRecordCount is zero, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotEmpty(System.String,System.String)">
            <summary>
            Verifies that the specified source database is not empty.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is empty.
            </summary>
            <param name="sourceName">The name of the source database.
            An exception is thrown if this name is null or empty.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <exception cref="T:System.ArgumentNullException">If sourceName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceName is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If the database is empty.
            </exception>
            <remarks>If the source database is empty, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceRecordCountIsNotZero(System.String,System.String,System.Int64)">
            <summary>
            Logs an error and throws SourceDatabaseEmptyException if recordCount is zero.
            </summary>
            <param name="sourceName">The name of the source database.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.</param>
            <param name="recordCount">The record count to test. If zero,
            the method throws SourceDatabaseEmptyException.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If recordCount is zero.
            </exception>
            <remarks>If recordCount is zero, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Verifies that the specified source database is not empty.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is empty.
            </summary>
            <param name="sourceName">The name of the source database.
            This string can be null or empty.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceLogicalName">An optional string containing the logical name
            of the source database. The method uses this name in case sourceName is null or empty.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null or if source.DatabaseRecordCount is zero.
            </exception>
            <remarks>If the source database is empty, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.
            If sourceName is null or empty, the method logs the error message 'GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning' 
            if sourceLogicalName is not null or empty or 'GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning' otherwise
            and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotNullOrEmpty(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,System.String,System.String)">
            <summary>
            Verifies that the specified source database is not empty.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is empty.
            </summary>
            <param name="source">An ITestResultFile object that contains data about the source database.
            This object can be null or empty.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceLogicalName">An optional string containing the logical name
            of the source database. The method uses this name in case sourceName is null or empty.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null or 
            if source.Name is null or empty or if source.RecordCount is zero.
            </exception>
            <remarks>If the source database is empty, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.
            If source.Name is null or empty, the method logs the error message 'GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning' 
            if sourceLogicalName is not null or empty or 'GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning' otherwise
            and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourcesAreNotBothEmpty(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,System.String,System.String,System.String)">
            <summary>
            Verifies that the specified sources are not null and that their DatabaseRecordCounts are not 
            both zero.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if 
            the sources are not valid.
            </summary>
            <param name="firstSource">The ISimpleImportFile containing information about the 
            first source database.</param>
            <param name="secondSource">The ISimpleImportFile containing information about the 
            first source database.</param>
            <param name="resultName">The name of the result that cannot be created if the sources are not valid.
            The method uses it in the error message.</param>
            <param name="firstSourceDatabaseAlias">The alias of the first source database.
            The method uses it in the error message.</param>
            <param name="secondSourceDatabaseAlias">The alias of the second source database.
            The method uses it in the error message.</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If either firstSource or 
            secondSource is null or if both DatabaseRecordCounts are zero.
            </exception>
            <remarks>If either the first source or the second source is null, the method logs the error 
            message 'ResultCannotBeCreatedBecauseDatabaseNotImportedMessage' and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.
            If both DatabaseRecordCounts are zero, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a System.InvalidOperationException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.VerifyResultSourceIsNotEmpty(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Verifies that the specified database is not empty.
            Logs an error and throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the database is empty.
            </summary>
            <param name="database">The database to verify.
            An exception is thrown if this reference is null.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <exception cref="T:System.ArgumentNullException">If database is null.
            </exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If database.Count is zero.
            </exception>
            <remarks>If the database is empty, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws a Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.AddTemporaryDatabaseForDeletion(System.String)">
            <summary>
            Appends a temporary database to the end of the list of databases to be
            deleted at the end of the session.
            Databases are deleted in the reverse order of their addition.
            </summary>
            <param name="databaseName">The name of the database to add.
            An exception is thrown if this reference is null.
            </param>
            <returns>True, if the database was added, false, if the collection
            of databases contains an entry with the same name (comparison: 'OrdinalIgnoreCase').</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.m_temporaryFiles">
            <summary>
            Holds the collection of temporary files to be deleted
            at the end of the session.
            The files will be deleted in the reverse order of their addition.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DeleteTemporaryDatabases">
            <summary>
            Deletes the temporary databases that have been registered with the current task.
            The files will be deleted in the reverse order of their addition.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetAboutToCreateResultMessage">
            <summary>
            Gets a string similar to 'About to create the result '{0}'.'
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCreatedSuccessfullyMessage">
            <summary>
            Gets a string similar to 'The result '{0}' was created successfully. Database: '{1}''.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCreatedSuccessfullyMessage2">
            <summary>
            Gets a string similar to 'The result '{0}' was created successfully. Database: '{1}'. Records: {2}, Size: {3}, Time: {4}'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCreationErrorHandlerWarning">
            <summary>
            Gets a string similar to 'The result '{0}' could not be created. Error: {1}, Reason: {2}'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning">
            <summary>
            Gets a string similar to 'The result '{0}' could not be created. Reason: The file '{1}' is empty.'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCannotBeCreatedBecauseDatabaseNotImportedWarning">
            <summary>
            Gets a string similar to 'The result '{0}' could not be created. Reason: The file '{1}' was not imported.'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetColumnWithDefaultValues">
            <summary>
            Gets a string similar to '[SA] Spalte wurde mit Standardwerten gefüllt'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetColumnsWithDefaultValuesMessageTitle">
            <summary>
            Gets a string similar to 'Spalten der Tabelle '{0}', die mit Standardwerten gefüllt wurden'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogAboutToCreateResultMessage(System.String)">
            <summary>
            Logs the message 'AboutToCreateResultMessage'.
            </summary>
            <param name="resultName">The name of the result.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogResultCreatedSuccessfullyMessage(System.String,System.String)">
            <summary>
            Logs the message 'ResultCreatedSuccessfullyMessage'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="databaseName">The name of the database containing the result.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogResultCreatedSuccessfullyMessage(System.String,System.String,System.Int64,System.Int64,System.TimeSpan)">
            <summary>
            Logs the message 'ResultCreatedSuccessfullyMessage'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="databaseName">The name of the database containing the result.</param>
            <param name="recordCount">The database's record count.</param>
            <param name="fileSize">The size in bytes of the database file.</param>
            <param name="executionTime">A TimeSpan indicating how long the result creation took".</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogResultCreatedSuccessfullyMessage(System.String,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Logs the message 'ResultCreatedSuccessfullyMessage'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="resultFile">An optional ITestResultFile reference to the result.
            If this reference is null, the method assumes that the result is empty.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.AddMessageGroupForColumnsWithDefaultValues(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds messages to inform the operator that columns with default values were added 
            to a table that contributes to the result.
            </summary>
            <param name="resultName">The name of the result.
            An exception is thrown if this string is null or empty.</param>
            <param name="columnNames">The names of the columns with default values.
            An exception is thrown if this reference is null.
            If the sequence is empty, the method does nothing.</param>
            <exception cref="T:System.ArgumentNullException">If resultName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnNames is null.</exception>
            <remarks>
            <para>If the sequence of columns is empty, the method does nothing.</para>
            <para>The messages will be added to a message group with the id '[ResultName].DefaultColumns'.
            If the function is called a second time with the same result name, the messages will be added
            to the same group.</para></remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogResultCreationFailedMessage(System.String,System.Exception)">
            <summary>
            Logs the warning message 'ResultCreationErrorHandlerWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="exception">An exception describing the reason of the failure.
            If this reference is null, the method uses an InvalidOperationException.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCreationFailureDatabaseEmptyMessage(System.String,System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogResultCreationFailureDatabaseEmptyMessage(System.String,System.String)">
            <summary>
            Logs the message 'GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="databaseName">The name of the database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCannotBeCreatedBecauseDatabaseNotImportedMessage(System.String,System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabaseNotImportedWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="databaseAlias">The name of the database.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCannotBeCreatedBecauseDatabasesNotAvailableMessage(System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabasesNotAvailableWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetResultCannotBeCreatedBecauseDatabaseNotAvailableMessage(System.String,System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabaseNotAvailableWarning'.
            </summary>
            <param name="resultName">The name of the result.</param>
            <param name="sourceDatabaseLogicalName">The logical name of the missing database.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.GetInternalErrorComputedColumnNotFoundMessage(System.String,System.String)">
            <summary>
            Gets a message similar to 'Internal error: The computed column 'columnName' was not found in the database 'databaseName'.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogError(System.String)">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="message">The message to log.
            If null, the method does nothing.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogWarning(System.String)">
            <summary>
            Logs the specified warning.
            </summary>
            <param name="message">The message to log.
            If null, the method does nothing.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.CreateCompensationExtraction(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData},System.String,System.Boolean,System.String)">
            <summary>
            Creates an extraction to simulate a join with an empty secondary database (operation
            which is not supported in IDEA).
            </summary>
            <param name="sourceDatabaseName">The name of the source database.
            The method assumes that the source database is not empty.
            An exception is thrown if it is null or empty.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">A optional sequence specifying the names of the columns 
            to include in the extraction.
            If null, all columns will be included.</param>
            <param name="dummyComputedColumns">An optional sequence of dummy computed columns
            to add to the result. These columns are the placeholders for the columns
            of the secondary database that cannot be joined.</param>
            <param name="affectedResultName">If not null or empty, the method adds messages to 
            inform the operator that columns with default values were added 
            to a table that contributes to the result.
            This parameter is ignored if dummyComputedColumns is null.</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the 
            extraction creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.RunResultCreator(System.String,System.Func{System.String})">
            <summary>
            Runs a specified result creator and logs the start and the completion of the creator.
            </summary>
            <param name="logicalResultName">The logical result name.
            If null, the method uses an empty string.</param>
            <param name="resultCreator">A method that returns the name of 
            the database containing the result, in case of success, or throws
            an exception in case the result creation failed.
            An exception is thrown if this reference is null.</param>
            <returns>The name of the database containing the result returned by the creator.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.RunResultCreator(System.String,System.Func{System.String,System.String},System.String)">
            <summary>
            Runs a specified result creator and logs the start and the completion of the creator.
            </summary>
            <param name="logicalResultName">The logical result name.
            If null, the method uses an empty string.</param>
            <param name="resultCreator">A method that returns the name of 
            the database containing the result, in case of success, or throws
            an exception in case the result creation failed.
            An exception is thrown if this reference is null.</param>
            <param name="resultCreatorInput">The input string for result creator.</param>
            <returns>The name of the database containing the result returned by the creator.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.RunFinalResultCreator(System.String,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile})">
            <summary>
            Runs a specified result creator and logs the start and the completion of the creator.
            </summary>
            <param name="logicalResultName">The logical result name.
            If null, the method uses an empty string.</param>
            <param name="resultCreator">A method that returns the name of 
            the database containing the result, in case of success, or throws
            an exception in case the result creation failed.
            An exception is thrown if this reference is null.</param>
            <returns>An ITestResultFile object describing the result.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DeleteTemporaryDatabaseNoErrorOrAddForDeletion(System.String)">
            <summary>
            Tries to delete a temporary database (ignoring any critical exceptions) and in case
            it fails, the method adds the database to the list of databases to be deleted
            at the end of the session.
            </summary>
            <param name="databaseName">The name of the database.
            If null or empty, the method does nothing.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.DoRenameTotalColumns(System.String,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.CustomImportRoutines.Common.ComputedColumnData2})">
            <summary>
            Renames the total columns of the specified summarization result database.
            </summary>
            <param name="resultDatabaseName">The name of the database.
            An exception is thrown if this string is null or empty.</param>
            <param name="computedColumnData">The sequence of ComputedColumnData2
            containing the metadata of the columns to be renamed.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If computedColumnData is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.Context">
            <summary>
            Gets a reference to the current context.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.CreateVirtualDatabasesIfPossible">
            <summary>
            Specifies whether to create virtual databases whenever possible.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.LogicalResultName">
            <summary>
            Gets the logical name of the result database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.ShouldFlagResultDatabase">
            <summary>
            Specifies whether the result database should be flagged or not.
            </summary>
            <returns>True, if the result database should be flagged; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ResultCreator.TestResultFileType">
            <summary>
            Gets the TestResultFileType of the result produced by this creator.
            </summary>
            <remarks>The default implementation returns TestResultFileTypes.IntermediateResult.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator">
            <summary>
            Defines the base class of all other result creators.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Initializes a new StandardResultCreator instance.
            </summary>
            <param name="context">An ICirExecutionContext reference to the current context.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.DoCreateResultObject(System.String)">
            <summary>
            Assigns the tags to the specified result database (ignoring unknown columns), creates the result object for it and registers
            the result object in the context.
            </summary>
            <param name="resultDatabaseName">A string containing the name of the result database.
            An exception is thrown if this reference is null or empty.</param>
            <returns>An ITestResultFile object.</returns>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.GetTagsForResult">
            <summary>
            Gets the collection of tag info objects for the result.
            </summary>
            <returns>An array of ITagAssignments.
            An empty array, if the result does not have any tags.</returns>
            <remarks>If the result does not have any tags, the method must return an empty array.
            <para>The processor of tag assignments will ignore any columns that are not present in the result database.</para></remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.GetTestsFilter">
            <summary>
            Gets the tests filter expression that identifies the mapped tests.
            </summary>
            <returns>An IExpression object or null, if GetStandardTestFilterValue returns null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.GetStandardTestFilterValue">
            <summary>
            Gets the standard test filter value (aka BasicTestDataFile) 
            that identifies the mapped tests.
            </summary>
            <returns>A string. Null, if the derived class does not support test filters.</returns>
            <remarks>If the derived class does support test filters, it should return null.
            In this case, the base implementation of DoCreateResultObject does to attempt
            to create a filter expression and set it in the result file.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StandardResultCreator.TestResultFileType">
            <summary>
            Gets the TestResultFileType of the result produced by this creator.
            </summary>
            <remarks>The default implementation returns TestResultFileTypes.FinalResult.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StringResources">
            <summary>
            Contains methods that return formatted string resources.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StringResources.ColumnNotFound(System.String,System.String)">
            <summary>
            Returns a string similar to 'The column {0} does not exist in the database {1}.'.
            </summary>
            <param name="columnName">The name of the missing column.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>The result of replacing the format items in the format string Messages.Error_ColumnNotFoundInDatabase 
            with the specified column and database names.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.StringResources.ColumnDoesNotSupportStatistics(System.String,COMDBLib.VBFieldType,System.String)">
            <summary>
            Returns a string similar to 'The column '{0}' of type '{1}' in the database '{2}' does not support statistics.'.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="fieldType">The field type.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>The result of replacing the format items in the format string Messages.Error_ColumnDoesNotSupportStatistics 
            with the specified column and database names.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions">
            <summary>
            Specifies the options for tagging operations.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions.None">
            <summary>
            No tagging options were selected.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions.NoSharedTagging">
            <summary>
            Disables shared tagging publishing.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TaggingOptions.IgnoreUnknownColumns">
            <summary>
            Instructs the processor to ignore tagging requests
            that target columns that do not exist in the database.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdColumnNamePair">
            <summary>
            The class TagIdColumnNamePair represents a pair of tag id and column name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdColumnNamePair.TagId">
            <summary>
            Gets / sets the tag id.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdColumnNamePair.ColumnName">
            <summary>
            Gets / sets the column name.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair">
            <summary>
            The class TagIdFieldNamePair represents a pair of tag id and column name.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair.#ctor">
            <summary>
            Initializes a new empty TagIdFieldNamePair. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new TagIdFieldNamePair instance.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="tagId">The id of the tag.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair.TagId">
            <summary>
            Gets / sets the tag id.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair.FieldName">
            <summary>
            Gets / sets the field name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TagIdFieldNamePair.ColumnName">
            <summary>
            Gets / sets the field name.
            </summary>
            <remarks>Same as FieldName.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TestResultFileExtensions">
            <summary>
            The class TestResultFileExtensions contains extensions for ITestResultFile.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TestResultFileExtensions.MappedTestIdsKey">
            <summary>
            A string defining the key of ITestResultFile.ExtraValues' entry 
            containing the equation that identifies the tests
            for which the executor will create execution records.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.TestResultFileExtensions.AssignMappedTestIds(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Assigns the filter that identifies the ids of the mapped tests to the 
            specified test result file object.
            </summary>
            <param name="resultFile">The target ITestResultFile object.
            An exception is thrown if this reference is null.</param>
            <param name="filter">The filter expression to assign.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If resultFile is null.</exception>
            <exception cref="T:System.ArgumentNullException">If filter is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper">
            <summary>
            A validation helper.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyColumnName(System.String,System.String)">
            <summary>
            Verifies that the specified name is neither null nor empty.
            </summary>
            <param name="columnName">The name to verify.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentNullException">If columnName is null.</exception>
            <exception cref="T:System.ArgumentException">If columnName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyColumnNameOnExecute(System.String,System.String)">
            <summary>
            Verifies that the specified name is neither null nor empty.
            </summary>
            <param name="columnName">The name to verify.</param>
            <param name="propertyName">The name of the property whose value is checked.</param>
            <exception cref="T:System.InvalidOperationException">If columnName is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">If propertyName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyDatabaseName(System.String,System.String)">
            <summary>
            Verifies that the specified name is neither null nor empty.
            </summary>
            <param name="databaseName">The name to verify.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyDatabaseNameOnExecute(System.String,System.String)">
            <summary>
            Verifies that the specified name is neither null nor empty.
            </summary>
            <param name="databaseName">The name to verify.</param>
            <param name="propertyName">The name of the property whose value is checked.</param>
            <exception cref="T:System.InvalidOperationException">If databaseName is null or empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyIdeaEntityLocationOnExecute(Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation,System.String)">
            <summary>
            Verifies that a value is a defined IdeaEntityLocation.
            </summary>
            <param name="value">The IdeaEntityLocation to verify.</param>
            <param name="propertyName">The name of the property whose value is checked.</param>
            <exception cref="T:System.InvalidOperationException">If value is not a defined IdeaEntityLocation.
            The methods sets InnerException to an InvalidEnumArgumentException.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyFileName(System.String,System.String)">
            <summary>
            Verifies that the specified file name is neither null nor empty.
            </summary>
            <param name="fileName">The name to verify.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentNullException">If fileName is null.</exception>
            <exception cref="T:System.ArgumentException">If fileName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyValueInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that a value is within a specified range.
            </summary>
            <param name="value">The value to verify.</param>
            <param name="minValue">The min value of the valid range.</param>
            <param name="maxValue">The max value of the valid range.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyValueInRangeOnExecute(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that a value is within a specified range.
            </summary>
            <param name="value">The value to verify.</param>
            <param name="minValue">The min value of the valid range.</param>
            <param name="maxValue">The max value of the valid range.</param>
            <param name="propertyName">The name of the property.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.InvalidOperationException">If value is outside the valid range
            of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyEquationNotNullOrEmpty(System.String,System.String)">
            <summary>
            Verifies that the equation is neither null nor empty.
            </summary>
            <param name="equation">The equation to verify.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentNullException">If equation is null.</exception>
            <exception cref="T:System.ArgumentException">If equation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyResultSourceIsNotNull(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,System.String,System.String)">
            <summary>
            Verifies that the specified source is not null and source.ImportedFileName is
            not null or empty.
            Logs an error and throws an Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is null.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="source">The ISimpleImportFile containing information about the 
            source database.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceDatabaseAlias">The alias of the source database.
            The method uses it in the error message.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null.
            </exception>
            <remarks>If source is null or source.ImportedFileName is null or empty, the method logs 
            the error message 'ResultCannotBeCreatedBecauseDatabaseNotImportedMessage' and
            throws an Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.VerifyResultSourceIsNotEmpty(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile,System.String,System.String)">
            <summary>
            Verifies that the specified source is not null and that its DatabaseRecordCount is not zero.
            Logs an error and throws an Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException if the source is not valid.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="source">The ISimpleImportFile containing information about the 
            source database.</param>
            <param name="resultName">The name of the result that cannot be created if the source is not valid.
            The method uses it in the error message.</param>
            <param name="sourceDatabaseAlias">The alias of the source database.
            The method uses it in the error message.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">If source is null or if source.DatabaseRecordCount is zero.
            </exception>
            <remarks>If source is null, the method logs the error message 'ResultCannotBeCreatedBecauseDatabaseNotImportedMessage' and
            throws a System.InvalidOperationException.
            If source.DatabaseRecordCount is zero, the method logs the error message 'ResultCreationFailureDatabaseEmptyMessage' and
            throws an Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.GetResultCannotBeCreatedBecauseDatabaseNotImportedMessage(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabaseNotImportedWarning'.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="resultName">The name of the result.</param>
            <param name="databaseAlias">The name of the database.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.GetResultCreationFailureDatabaseEmptyMessage(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,System.String)">
            <summary>
            Returns the message 'GetResultCannotBeCreatedBecauseDatabaseIsEmptyWarning'.
            </summary>
            <param name="context">A reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="resultName">The name of the result.</param>
            <param name="databaseName">The name of the database.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.IsValid(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile)">
            <summary>
            Validates a file object.
            </summary>
            <param name="file">An ISimpleImportFile reference to the file to validate.</param>
            <returns>True, if file is not null and its DatabaseRecordCount is not 0; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.IsValid(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Validates a file object.
            </summary>
            <param name="file">An ITestResultFile reference to the file to validate.</param>
            <returns>True, if file is not null and its RecordCount is not 0; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.DatabaseNameCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The name of the database cannot be empty.'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.CustomImportRoutines.Common.ValidationHelper.ColumnNameCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The name of the column cannot be empty.'.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions">
            <summary>
            Extension methods for VBFieldType.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.SupportsIdeaStatistics(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Determines whether the specified VBFieldType supports IDEA stats.
            </summary>
            <param name="fieldType">The VBFieldType to check.</param>
            <returns>True if the type supports IDEA stats; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.SupportsIdeaStatistics(COMDBLib.VBFieldType)">
            <summary>
            Determines whether the specified VBFieldType supports IDEA stats.
            </summary>
            <param name="fieldType">The VBFieldType to check.</param>
            <returns>True if the type supports IDEA stats; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsBoolean(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether the specified VBFieldType is of type Boolean.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsBoolean(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether the specified VBFieldType is of type Boolean.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsCharacter(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether the specified VBFieldType is alphanumeric.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsCharacter(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether the specified VBFieldType is alphanumeric.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsDate(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Date.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsDate(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Date.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsNumeric(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Numeric.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsNumeric(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Numeric.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsTime(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Time.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsTime(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Time.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsTristate(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Tristate.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsTristate(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is of type Tristate.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsVirtual(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is virtual / computed.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is virtual; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsVirtual(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is virtual / computed.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is virtual; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsEditable(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is editable.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is editable; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VBFieldTypeExtensions.IsEditable(COMDBLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating whether the specified VBFieldType is editable.
            </summary>
            <param name="fieldType">A VBFieldType value.</param>
            <returns>True if the VBFieldType is editable; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions">
            <summary>
            Specifies the options for IDEA's Visual Connector (aka Visual Join).
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions.None">
            <summary>
            None: AppendDatabaseNames = false, IncludeAllPrimaryRecords = false
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions.AppendDatabaseNames">
            <summary>
            If specified, AppendDatabaseNames = true
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.CustomImportRoutines.Common.VisualJoinOptions.IncludeAllPrimaryRecords">
            <summary>
            If specified, IncludeAllPrimaryRecords = true
            </summary>
        </member>
    </members>
</doc>
