<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SA.IdeaAccess</name>
    </assembly>
    <members>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.FieldStatsListExtensions">
            <summary>
            Extension methdos for IFieldStatsList.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.FieldStatsListExtensions.GetIFieldStatsNoGuiTP(COMDBLib.IFieldStatsList,System.String)">
            <summary>
            Calls IFieldStatsList with the specified field name and a non-GUI task progress
            object.
            </summary>
            <param name="statsList">An IFieldStatsList reference.</param>
            <param name="fieldName">A string containing the field name.</param>
            <returns>A FieldStats object.</returns>
            <exception cref="T:System.ArgumentNullException">If statsList is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.FieldStatsListExtensions.GetIFieldStatsExNoGuiTP(COMDBLib.IFieldStatsList,System.String,System.Boolean)">
            <summary>
            Calls IFieldStatsListEx with the specified field name, generateStatsIfNonExistent value 
            and a non-GUI task progress
            object.
            </summary>
            <param name="statsList">An IFieldStatsList reference.</param>
            <param name="fieldName">A string containing the field name.</param>
            <param name="generateStatsIfNonExistent">A Boolean containing the actual value of
            GetIFieldStats' same-named parameter.</param>
            <returns>A FieldStats object.</returns>
            <exception cref="T:System.ArgumentNullException">If statsList is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.FieldStatsListExtensions.GetIFieldStatsFromIndexNoGuiTP(COMDBLib.IFieldStatsList,System.Int32)">
            <summary>
            Calls GetIFieldStatsFromIndex with the specified index and a non-GUI task progress
            object.
            </summary>
            <param name="statsList">An IFieldStatsList reference.</param>
            <param name="index">An Int32 containing the actual value of
            GetIFieldStatsFromIndex' same-named parameter.</param>
            <returns>A FieldStats object.</returns>
            <exception cref="T:System.ArgumentNullException">If statsList is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.FieldStatsListExtensions.NoOpSink">
            <summary>
            Returns RemoteNotifySink.NoOpSink.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaInstallInfoAdapter">
            <summary>
            Centralized wrapper class around IDEA COM-based functionality
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaInstallInfoAdapter.ApplicationLanguage">
            <summary>
            Returns IDEA language 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaInstallInfoAdapter.ApplicationEncoding">
            <summary>
            Returns IDEA encoding (ASCII or UNICODE)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaInstallInfoAdapter.IDEAVersion">
            <summary>
            Returns IDEA version
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter">
            <summary>
            Wrapper class for IDEA project management functionality
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.IdeaProjectLockFileName">
            <summary>
            Lock file name.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.IsIdeaProject(System.String)">
            <summary>
            Determines whether the path specified represents the IDEA local project folder
            </summary>
            <param name="path">Path to check</param>
            <returns>True is path represents the IDEA local project folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.IsIdeaProjectLibrary(System.String)">
            <summary>
            Determines whether the path specified represents the IDEA local project folder
            </summary>
            <param name="path">Path to check</param>
            <returns>True is path represents the IDEA local project folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.CreateProject(System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates local/server project
            </summary>
            <param name="path">Project path</param>
            <param name="sharedPrj">Shared flag</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.CreateProjectAt(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates local/server project
            </summary>
            <param name="targetLocation">Project location</param>
            <param name="path">Project path</param>
            <param name="sharedPrj">Shared flag</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.DeleteProject(System.String)">
            <summary>
            Deletes IDEA project
            </summary>
            <param name="path">Project path</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.DeleteProjectAt(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String)">
            <summary>
            Deletes IDEA project at specified location
            </summary>
            <param name="targetLocation">Project location</param>
            <param name="path">Project path</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.RenameProject(System.String,System.String)">
            <summary>
            Renames IDEA project
            </summary>
            <param name="path">Project to rename</param>
            <param name="newName">New name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.RenameProjectAt(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.String)">
            <summary>
            Renames IDEA project at specified location
            </summary>
            <param name="targetLocation">Project location</param>
            <param name="path">Project to rename</param>
            <param name="newName">New name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaProjectManagementAdapter.TakeProjectLock(System.String)">
            <summary>
            Takes the project lock.
            </summary>
            <param name="projectPath">The project path.</param>
            <exception cref="T:System.ArgumentNullException">projectPath</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter">
            <summary>
            Represents the running Audit Test task, both local and server-side.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.ClientSite">
            <summary>
            Planner needs a client site to communicate with IDEA client. This property is NOT thread safe since it is supposed to
            be called only once from within ClientSite property of SelectAndRun Task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.TaskState">
            <summary>
            Returns current state of server task
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.IsTaskCompleted">
            <summary>
            Returns boolean indicating whether the task is completed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.IsTaskCancelled">
            <summary>
            Returns boolean indicating whether the task is cancelled
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.IsTaskFinalized">
            <summary>
            Returns boolean indicating whether the task is finalized
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.UseSafeError">
            <summary>
            Specifies 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Error">
            <summary>
            Retrieves any possible task execution error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.TaskPusher">
            <summary>
            Retrieves reference to an object capable of submiting tests' tasks to server
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Progressing">
            <summary>
            Progress notifications' callback
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Logging">
            <summary>
            Logger notifications' callback
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Finalize">
            <summary>
            Finalizes an instance of type ScriptExecutor.
            </summary>
            <remarks>The finalizer calls Dispose(false).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Submit(System.Object)">
            <summary>
            Sumbits a task to the server
            </summary>
            <param name="task">Task to submit. Has to implement either IExecutableTaskCtrl or IRunnable interface</param>
            <returns>Id of new task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Submit(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sumbits a task to the server
            </summary>
            <param name="task">Task to submit. Has to implement either IExecutableTaskCtrl or IRunnable interface</param>
            <param name="inputFiles">Input files to be assigned to server-side task</param>
            <returns>Id of new task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Invoke(System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invokes given method within given class of given assembly
            </summary>
            <param name="module">assembly image as array of bytes</param>
            <param name="className">class within the assembly</param>
            <param name="method">method to invoke</param>
            <param name="args">method's arguments</param>
            <returns>Id of IDEA server-side task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Invoke(System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invokes given method within given class of given assembly
            </summary>
            <param name="module">assembly image as array of bytes</param>
            <param name="className">class within the assembly</param>
            <param name="method">method to invoke</param>
            <param name="args">method's arguments</param>
            <param name="inputFiles">Input files to be assigned to server-side task</param>
            <returns>Id of IDEA server-side task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Invoke(System.String,System.String,System.String,System.Object[])">
            <summary>
            Invokes given method within given class of given assembly
            </summary>
            <param name="assemblyName">assembly name</param>
            <param name="className">class within the assembly</param>
            <param name="method">method to invoke</param>
            <param name="args">method's arguments</param>
            <returns>Id of IDEA server-side task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Invoke(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Object[])">
            <summary>
            Invokes given method within given class of given assembly
            </summary>
            <param name="inputFiles">Input files to be assigned to server-side task</param>
            <param name="assemblyName">assembly name</param>
            <param name="className">class within the assembly</param>
            <param name="method">method to invoke</param>
            <param name="args">method's arguments</param>
            <returns>Id of IDEA server-side task</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.WaitQueued(System.Int32)">
            <summary>
            Wait till submitted task is queued
            </summary>
            <param name="timeout">Wait timeout</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.WaitStarted(System.Int32)">
            <summary>
            Wait till submitted task is started
            </summary>
            <param name="timeout">Wait timeout</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.WaitCompleted(System.Int32)">
            <summary>
            Wait till submitted task is complete
            </summary>
            <param name="timeout">Wait timeout</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.CompleteInvoke">
            <summary>
            returns the result of previous method invocation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Abort">
            <summary>
            Cancels the task
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Detach">
            <summary>
            Detaches Task Descriptor from running task without stopping the task itself
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitTestImpl(IdeaServer.Common.Interfaces.IExecutableTaskCtrl)">
            <summary>
            This method submits test's task to server
            </summary>
            <param name="task">Test's task to submit</param>
            <returns>New task's Id</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.StopMonitor">
            <summary>
            Stops monitor attached to the server-side task
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Completed(System.Boolean)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="bUserCanceled">Specifies whether task was cancelled by user</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Progress(System.Int16)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="percent">Execution completeness</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Queued(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Standby(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Start(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.ShowProgressDialog(System.Boolean)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="bShow">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="DatabaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitErrorMessage(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="source"></param>
            <param name="description"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitFileForDownload(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="filename"></param>
            <param name="path"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitNewResult(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="resultName"></param>
            <param name="resultID"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitNewServerDBs(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="primaryDBPath"></param>
            <param name="newFileGUIDs"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitNewView(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.SubmitUserMessage(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="highlight"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.TaskFinalized">
            <summary>
            Interface method implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.CreatedDatabase(System.String)">
            <summary>
            Interface method implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.ScriptLog(System.String)">
            <summary>
            IScriptLog method implementation
            </summary>
            <param name="logStr">Log string</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Dispose">
            <summary>
            Closes the current script executor and releases any resources associated with it.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskAdapter.Dispose(System.Boolean)">
            <summary>
            Implements the dispose functionality.
            </summary>
            <param name="disposing">Specify if the function is being called from Dispose or from the finalizer.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInjectedTask">
            <summary>
            Interface for IDEA Task accessible from outside.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInjectedTask.SetInputParams(System.Object[])">
            <summary>
            Assigns task's input parameters.
            </summary>
            <param name="inParams">Task's input parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInjectedTask.GetResult">
            <summary>
            Retrieves the task's result
            </summary>
            <returns>Task's result</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInjectedTask.Start(System.Object[])">
            <summary>
            Start injected task
            </summary>
            <param name="inParams">Task parameters</param>
            <returns>Task result</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInvocable">
            <summary>
            Classes whose methods are invoked via IdeaServerTaskAdapter.Invoke() API may implement this interface
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IInvocable.ClientSite">
            <summary>
            Invocable methods may require client site
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable">
            <summary>
            This interface should be implemented by objects bound for server execution via IdeaServerTaskAdapter class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable.Name">
            <summary>
            Object's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable.ProgressSink">
            <summary>
            External notifications sink
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable.Log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable.Run">
            <summary>
            Main execution method
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable.IsCancelConfirmed">
            <summary>
            Some runnable tasks may suppress cancel even if it was issued by caller. 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics">
            <summary>
            Idea ststistics type
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.None">
            <summary>
            not defined
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.Variance">
            <summary>
            Variance
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics.StandardDeviation">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.KeyData">
            <summary>
            The class KeyData holds the metadata for a keys in a sort operation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.KeyData.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.KeyData.Order">
            <summary>
            Gets / sets the sort order ('A' or 'D').
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks">
            <summary>
            Utility tool found in Idea's 22Task dll.
            </summary>
            
            
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.GetDistinctValues(System.String,System.String)">
            <summary>
            Get max 500 distinct values.
            </summary>
            <param name="tableName">Name of the idea table.</param>
            <param name="fieldName">Name of the idea field.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.DoSummarize(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.IdeaAccess.IdeaStatistics,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Object)">
            <summary>
            Implements the method DoSummarize.
            </summary>
            <param name="baseTable">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="resultDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnsToSummarize">A sequence specifying the columns to summarize.
            An exception is thrown if this sequence is null or empty.</param>
            <param name="columnsToTotal">A sequence specifying the columns to total.
            If can be null or empty.
            </param>
            <param name="statisticsToInclude">An IdeaStatistics value specifying the
            statistics to include in the result.</param>
            <param name="createPercentField">A boolean specifying whether to
            create percent fields.</param>
            <param name="includeAllColumns">A boolean that specifies whether to 
            include all columns as additonal columns.</param>
            <param name="additionalColumnNames">An optional sequence of additional columns to include
            in the result.
            It can be null or empty.
            If includeAllColumns is true, the method ignores this argument.</param>
            <param name="useFieldFromFirstOccurrence">Specifies whether the values of the additional 
            columns will be taken from the first occurrence or not.
            The method uses it only if includeAllColumns is true or if the set of additional columns 
            is not null or empty.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="clientSite">An optional IDEA client site.</param>
            <param name="isOnServer">True in case of server side execution.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
            <exception cref="T:System.ArgumentNullException">If resultDatabaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If resultDatabaseName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsToSummarize is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsToSummarize is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.IdeaFileExist(System.String,System.Boolean)">
            <summary>
            Checks existance of IDEA table
            </summary>
            <param name="file">table to check</param>
            <param name="isOnServer">table's location (true if server)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.DeleteIDEAServerFiles(System.String,System.Boolean)">
            <summary>
            Deletes IDEA table
            </summary>
            <param name="file">table to delete</param>
            <param name="isOnServer">table's location (true if server)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.DoExtraction(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.IdeaAccess.KeyData},System.Boolean,System.String,System.Boolean,System.Object)">
            <summary>
            Execute Extraction on base table
            </summary>
            <param name="baseTable">A reference to the source database.
            An exception is thrown if this reference is null.</param>
            <param name="destinationDatabaseName">The name of the destination database.
            An exception is thrown if this reference is null or empty.</param>
            <param name="columnNames">An optional sequence specifying the columns to
            include in the extraction.
            If null, all columns will be included.</param>
            <param name="columnKeys">The column keys. If null or empty no keys will be added</param>
            <param name="createVirtualDatabase">An optional boolean that specifies whether the extraction
            creates a virtual database.</param>
            <param name="criteria">An optional criteria used to identify the records to be processed.
            If null or empty, no criteria will be used.</param>
            <param name="clientSite">An optional IDEA client site.</param>
            <param name="isOnServer">True in case of server side execution.</param>
            <exception cref="T:System.ArgumentNullException">If sourceDatabase is null.</exception>
              <exception cref="T:System.ArgumentNullException">in case no Idea client is found.</exception>
            <exception cref="T:System.ArgumentNullException">If destinationDatabaseName is null.</exception>
              
            <exception cref="T:System.ArgumentException">If destinationDatabaseName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.My22Tasks.GetIdeaTableId(System.String,System.Boolean)">
            <summary>
            return the idea table id
            </summary>
            <param name="tablePath">path to Idea database</param>
            <param name="runAtServer">true if db is on server</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter">
            <summary>
            Wrapper class around functionality provided by COMMONIDEACONTROLSLib.IdeaClient
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.IdeaClientInitTimeout">
            <summary>
            Timeout, in milliseconds, while initializing the new instance of IDE Client.
            This value is relevant for Unit Tests scenario only
            It is set to 3 minutes by default
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.ClientInstance">
            <summary>
            If set, this singleton is used instead of obtaining client instance via IConfigureIdea2.GetIdeaClient().
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.RefreshIdeaFileExplorer">
            <summary>
            Refreshes the idea file explorer.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.RefreshIdeaFileExplorerCore">
            <summary>
            Refreshes the idea file explorer core function.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.OpenIdeaDatabase(System.String,System.Boolean)">
            <summary>
            Opens IDEA database
            </summary>
            <param name="filePath">DB file path</param>
            <param name="isLocal">if true, local DB, otherwise, at server</param>
            <returns>opened DB</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CurrentDatabaseInfo">
            <summary>
            Returns current IDEA database as IIdeaDatabase and local/server flag
            </summary>
            <returns>A pair of db/local flag</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CurrentComDatabase2">
            <summary>
            Returns current IDEA database as IComDatabase2
            </summary>
            <returns>IComDatabase2 for current database</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CurrentDatabase">
            <summary>
            Returns current IDEA database reference
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.HasOpenDatabase">
            <summary>
            Determines whether a current database exists in IDEA client.
            </summary>
            <returns>True, if CurrentDatabase is defined; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.WorkingDirectory">
            <summary>
            Returns/sets IDEA Working Directory
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.Disconnect">
            <summary>
            Forces Idea Client to disconnect from CLM
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.Quit(System.Int32)">
            <summary>
            Forces Idea Client to quit
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.QuitLocal(System.Int32)">
            <summary>
            Forces Idea Client to quit
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.TryKillIdeaInstance(System.Int32)">
            <summary>
            This method tries to shut down IDEA Client process
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.IsManagedProject">
            <summary>
            Checks if current IDEA project is managed or not
            </summary>
            <returns>true if project is managed otherwise false</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.IdeaClient">
            <summary>
            Obtains reference to running IDEA client
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CloseIdeaDatabase(System.String)">
            <summary>
            Try and close a specific idea database. 
            </summary>
            <param name="filePath">Relative or full path to the idea file.</param>
            <returns>True is the close is successfull.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CloseAllDatabases">
            <summary>
            Close all opened idea databases. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.NewIdeaDatabase(System.String,System.String,COMDBLib.TableDef)">
            <summary>
            Creates a new IDEA table
            </summary>
            <param name="fileName">name of table to create</param>
            <param name="description">description of table to create</param>
            <param name="tableDef">new table's fields' definition</param>
            ATTENTION: this method works only locally! Server-side client class throws Not Implemented exception for this method
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.NewTableDefinition">
            <summary>
            Creates an empty IDEA table definition
            </summary>
            <returns>IDEA table definition</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.CloseIdeaDatabase(System.String,System.Boolean)">
            <summary>
            Try and close a specific idea database. 
            </summary>
            <param name="filePath">Relative or full path to the idea file.</param>
            <param name="isLocal">if true, local DB, otherwise, at server</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.GetProjectManagement">
            <summary>
            Get IDEA Project Management
            </summary>
            <returns>An instance of Project Managemnt.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.UniqueFileName(System.String)">
            <summary>
            Get unique file name
            </summary>
            <param name="prefix">Prefix of unique file name.</param>
            <returns>Unique file name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.AddToHistory(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean,System.Boolean)">
            <summary>
            Add a history item.
            </summary>
            <param name="dbIdeaTable">Reference to opened Idea table</param>
            <param name="title">Title of item.</param>
            <param name="entries">List of history entries.</param>
            <param name="withDbInfo">Specifies whether DB info has to be part of the history</param>
            <param name="withDateStamp">Specifies whether date stamp info has to be part of the history</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.StartImportTask(System.String,COMMONIDEACONTROLSLib.ITaskProgress,System.Object)">
            <summary>
            Starts specified IDEA import task
            </summary>
            <param name="taskName">Name of import task to start</param>
            <param name="sink">Progress notifications sink</param>
            <param name="ideaDoc">Idea document associated with the task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.StartInjectedTask(System.String,COMMONIDEACONTROLSLib.ITaskProgress,System.Object)">
            <summary>
            Starts specified IDEA custom task
            </summary>
            <param name="taskName">Name of custom task to start</param>
            <param name="sink">Progress notifications sink</param>
            <param name="ideaDoc">Idea document associated with the task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.GetFieldForTag(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Obtains a field assigned to given tag for given table.
            </summary>
            <param name="table">Table.</param>
            <param name="tagName">The name of the tag.</param>
            <returns>Pair "Field,Filed Position", ot null if field does not exist.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.IsIdeaRunning">
            <summary>
            Reports whether idea.exe process is running
            </summary>
            <returns>True if idea.exe process is running; otherwise, false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.ReleaseIdeaClient(COMMONIDEACONTROLSLib.IIdeaClient,COMMONIDEACONTROLSLib.IConfigureIdea2)">
            <summary>
            Release Idea Client instance previously obtained by GetIdeaClient (out cnfgIdea)
            </summary>
            <param name="ideaClient">Idea Client instance</param>
            <param name="cnfgIdea">Optional Idea configuration instance. If set, it is assumed to be the object through which ideaClient was obtained originally</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.FlagDatabase(System.String,System.Boolean,System.Object)">
            <summary>
            Flags the database.
            </summary>
            <param name="database">The database.</param>
            <param name="isOnServer">if set to <c>true</c> database is on server.</param>
            <param name="clientSite">The client site.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.RenameDatabase(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Rename a database.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
            <param name="isOnServer">if set to <c>true</c> the database is on server.</param>
            <param name="clientSite">The client site.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaClientAdapter.DeleteDatabase(System.String,System.Boolean,System.Object)">
            <summary>
            Deletes the database.
            </summary>
            <param name="database">The database.</param>
            <param name="isOnServer">if set to <c>true</c> [is on server].</param>
            <param name="clientSite">The client site.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaClmAdapter">
            <summary>
            Provides an interface to Corporate License Manager
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClmAdapter.MaximumLicenses">
            <summary>
            Returns the maximum number of licensed users
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaClmAdapter.MaximumTaskManagementServers">
            <summary>
            Returns the maximum number of management servers registered with this CLM instance
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter">
            <summary>
            Centralized wrapper class around IDEA COM-based functionality
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.IDEADBExt">
            <summary>
            Returns IDEA database file extension
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.IDEAFolderName(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns IDEA special folder paths for current project
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.LibraryFolderPath(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns IDEA special folder paths for current project
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.LibraryFolderFullPath(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns IDEA full paths of specified library for current project
            </summary>
            <param name="libType">Type of library</param>
            <returns>Full path of library folder on client</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.IsServerOnly">
            <summary>
            Returns the value of server only mode flag
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.RowHighlightColor">
            <summary>
            Returns IDEA Row Highlight Color
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ActualHighlightAlternateRowColorValue">
            <summary>
            Returns IDEA Actual Highlight Alternate Row Color Value
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.GridFont">
            <summary>
            Returns IDEA Grid Font
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.CurrentWorkingSubFolder">
            <summary>
            Returns IDEA Current Working SubFolder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.CurrentRelativeWorkingSubFolder">
            <summary>
            Returns IDEA Current Working SubFolder relative to working folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.WorkingDirectory">
            <summary>
            Returns/sets IDEA Working Directory
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.VersionInLocalMachine">
            <summary>
            Returns IDEA Version In LocalMachine Registry key
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ApplicationDirectory">
            <summary>
            Returns IDEA Application Directory
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.UseCurrentWorkingFolder">
            <summary>
            Returns IDEA option "Always use IDEA library folders when opening or saving file"
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.AutoGenerateDBNames">
            <summary>
            Gets a value indicating whether will be proposed a default name 
            </summary>
            <value>
            	<c>true</c> if will be proposed a default name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DateTimeMask">
            <summary>
            Returns IDEA date time mask
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DateMask">
            <summary>
            Returns IDEA Date mask
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.YearSymbol">
            <summary>
            Returns IDEA year symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.MonthSymbol">
            <summary>
            Returns IDEA month symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DaySymbol">
            <summary>
            Returns IDEA day symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.HourSymbol">
            <summary>
            Returns IDEA hour symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.MinuteSymbol">
            <summary>
            Returns IDEA Minute symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.SecondSymbol">
            <summary>
            Returns IDEA Seconds symbol
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.Weekend">
            <summary>
            Returns IDEA weekend days.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.IDEAVersion">
            <summary>
            Returns IDEA Version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ListSeparator">
            <summary>
            Returns the ListSeparator of Idea
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DecimalSeparator">
            <summary>
            Returns the Decimal Separator of Idea
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.IDEALanguage">
            <summary>
            Returns IDEA Language
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.GetCultureInfoForIdeaInstalledLanguage">
            <summary>
            Returns the CultureInfo object that corresponds to IDEA's installed language.
            </summary>
            <returns>A new CultureInfo object that corresponds to IDEA's installed language, if the language is not empty and a corresponding culture is found; otherwise, null.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.AppStandard">
            <summary>
            Aplication standard ASCII or UNICODE.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.AppPlatform">
            <summary>
            Application platform X86 or X64.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.LicenseType">
            <summary>
            Idea license type.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.LicenseKey">
            <summary>
            Idea license key.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DisablePopupHelp">
            <summary>
            Disables the popup help.
            </summary>
            <returns>True if popup help is disabale;otherwise false</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ExecutionMode">
            <summary>
            Returns the value of current IDEA execution mode
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ApplicationLanguage">
            <summary>
            Returns IDEA language 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.UICustomDateFormat">
            <summary>
            Contains the custom date format for Date Time Picker
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.UICustomTimeFormat">
            <summary>
            Contains the custom Time format for Date Time Picker
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.UIDateWatermark">
            <summary>
            Contains the date watermark displayed in DateTimePicker
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ClientNumber">
            <summary>
            Will return the client number used by the OMS.
            If the returned value is null there is no such client number available.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DeleteToRecycle2">
            <summary>
            Returns whether IDEA prescribes to move files into recycle Bin instaed of deleting them
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.DeleteToRecycle">
            <summary>
            Returns whether IDEA prescribes to move files into recycle Bin instaed of deleting them (alternative version; doesn't work always)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.ManagedProjectsDirectory">
            <summary>
            Returns/sets IDEA Managed Projects Root
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.GetIdeaTempPath">
            <summary>
            Returns the path of IDEA's temporary folder.
            </summary>
            <returns>A string containing the path of IDEA's temporary folder.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.UserCustomGroupsDirectory">
            <summary>
            Returns UserCustomGroupsDirectory
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaConfigAdapter.VgerFilesDirectory">
            <summary>
            Returns directory containing VGER files.
            </summary>
            <remarks>Ths method is using hardcoded VGER subfolder name similar to how IDEA itself is doing. 
            See IDEA\dotNET\IdeaOptionsForm\OptionsForm.cs (method VgerFolder()) or IDEA\Apps\Idea\RibbonTaskManager.cpp (method GetVgerFolder())</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter">
            <summary>
            Wrapper class around functionality provided by IDEA's COMDBLib.ComDatabase2
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.CreateIdeaDatabase(System.String,COMDBLib.ITableDef,System.Object)">
            <summary>
            Creates new IDEA file
            </summary>
            <param name="name">new file's name</param>
            <param name="tableDefIni">columns' definitions for a new table</param>
            <param name="tracer">tracer</param>
            <returns>new table as IDEA file reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.OpenDatabase(System.String,System.Boolean)">
            <summary>
            Opens IDEA DB
            </summary>
            <param name="ideaTable">DB name</param>
            <param name="readOnly">open as read-only flag</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.OpenDatabase(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Open an Idea database.
            </summary>
            <param name="tableName">Name of the database with/without absolute/relative path or extension.</param>
            <param name="execLocation">Where the execution takes place (Client or Server)</param>
            <returns>Instance of opened ComDatabase.</returns>
            <exception cref="T:System.ArgumentException">If table name is empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">If table name does not exist in the current idea context.</exception>
            <exception cref="T:System.ArgumentNullException">if table name is null.</exception>
            <remarks>For server execution only the filename (no path and no extension) will be used.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.OpenDatabase(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            Open an Idea database.
            </summary>
            <param name="tableName">Name of the database with/without absolute/relative path or extension.</param>
            <param name="execLocation">Where the execution takes place (Client or Server)</param>
            <param name="readOnly">true if read-only open is required</param>
            <returns>Instance of opened ComDatabase.</returns>
            <exception cref="T:System.ArgumentException">If table name is empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">If table name does not exist in the current idea context.</exception>
            <exception cref="T:System.ArgumentNullException">if table name is null.</exception>
            <remarks>For server execution only the filename (no path and no extension) will be used.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.DeleteDatabase(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Deletes an IDEA database depending on the location selected. If database doesn't exist, nothing happens
            </summary>
            <param name="tablePath">Absolute path to the IDEA database.</param>
            <param name="execLocation">Where the execution takes place (Client or Server)</param>
            <remarks>Permanently destroys the file.</remarks>
            <exception cref="T:System.ArgumentNullException">if table name is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.DeleteLocalDatabase(System.String)">
            <summary>
            Removes local IDEA file or sends it to the Recycle Bin, depending on IDEA settings. Works for local files only
            </summary>
            <param name="tablePath"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.RemoveDatabaseHistory(System.String)">
            <summary>
            Removes history records from IDEA DB
            </summary>
            <param name="ideaTableName">name of DB</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.RemoveDatabaseHistory(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Int32)">
            <summary>
            Removes last n history records from an IDEA db.
            </summary>
            <param name="ideaTableName">Name/Path of an Idea db.</param>
            <param name="execLocation">Where the db is located.</param>
            <param name="count">Number of elements to be removed.</param>
            <remarks>If the count is larger than the actual count then all history items will be deleted.</remarks>
            <remarks>This should not re-throw any exception!!! - required in macro.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.HistoryCount(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Get the number of history items from an Idea table.
            </summary>
            <param name="tableName">Name/path of Idea table.</param>
            <param name="execLocation">Location of the idea table.</param>
            <returns>Number of history items from an Idea database.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.ForceUnlockDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.AddToHistory(System.String,System.String,System.String,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Add a history item.
            </summary>
            <param name="tableName">Name/path of Idea table.</param>
            <param name="title">Title of item.</param>
            <param name="msgLeft">Left side of the message.</param>
            <param name="msgRight">Right side of the message.</param>
            <param name="execLocation">Location of the idea table.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.AddToHistory(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Add multiple history items.
            </summary>
            <param name="tableName">Name/path of Idea table.</param>
            <param name="title">Title of item.</param>
            <param name="entries">History entries to add.</param>
            <param name="execLocation">Location of the idea table.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.IndexCount(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Get the number of index items from an Idea table.
            </summary>
            <param name="tableName">Name/path of Idea table.</param>
            <param name="execLocation">Location of the idea table.</param>
            <returns>Number of history items from an Idea database if they can be retrieved else 999.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetIdeaDatabaseIds(System.String,System.Guid@,System.Guid@)">
            <summary>
            Gets the idea database ids (db id and parent id).
            </summary>
            <param name="ideaDBPath">The idea database path.</param>
            <param name="databaseId">The database identifier.</param>
            <param name="parentId">The parent identifier.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetIdeaDatabaseId(System.String)">
            <summary>
            Gets the idea database id as GUID.
            </summary>
            <param name="ideaDBPath">The idea DB path.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.DatabaseExists(System.String,System.Nullable{System.Guid})">
            <summary>
            Check if idea Databases the exists.
            </summary>
            <param name="dbFilePath">The db file path.</param>
            <param name="ideaInternalDBID">The idea internal ID. If is null the search is done only by path</param>
            <returns>True if exists; otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetComDb(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Obtains COMDBLib.IComDatabase2 interface reference from IIdeaDatabase instance
            </summary>
            <param name="ideaDb">IIdeaDatabase instance</param>
            <returns>COMDBLib.IComDatabase2 interface reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetComDb2(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Obtains COMDBLib.IComDatabase2 interface reference from IIdeaDatabase instance (alternative method)
            </summary>
            <param name="ideaDb">IIdeaDatabase instance</param>
            <returns>COMDBLib.IComDatabase2 interface reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetDbFields(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            Returns list of database fields
            </summary>
            <param name="dbName">Database name</param>
            <param name="location">Database location</param>
            <param name="includeTags">Include tag list for each field</param>
            <returns>List of fields</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetDbFields(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Boolean)">
            <summary>
            Gets the database fields.
            </summary>
            <param name="database">The database.</param>
            <param name="includeTags">if set to <c>true</c>Include tag list for each field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">database</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetDbFieldsEx(COMDBLib.TableDef,System.Boolean)">
            <summary>
            Returns list of database fields
            </summary>
            <param name="tableDef">Database table definition object</param>
            <param name="includeTags">Include tag list for each field</param>
            <returns>List of fields</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.IdeaTableExistsOnServer(System.String)">
            <summary>
            Tests if an Idea database exists on server.
            </summary>
            <param name="tableName">Name of an Idea database</param>
            <returns>true if table exists, else false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.IdeaTableFullPathOnServer(System.String)">
            <summary>
            Gets the full path of an Idea database.
            </summary>
            <param name="tableName">Name of an Idea database</param>
            <returns> Path to the database if exists, string.Empty if not.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.IdeaTableUncPathOnServer(System.String)">
            <summary>
            Gets the full UNC path of an Idea database.
            </summary>
            <param name="tableName">Name of an Idea database</param>
            <returns> Path to the database if exists, string.Empty if not.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetTags(COMDBLib.IField)">
            <summary>
            Returns all the tags that are associated with the field.
            </summary>
            <param name="field">The field from where to read the tags.</param>
            <returns>List of tag ids as string list.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.SetTags(COMDBLib.IField,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the tags for a field.
            </summary>
            <param name="field">The field where to write the tags.</param>
            <param name="tagIDs">The list of tag ids as a list of strings.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.AddTag(COMDBLib.IField,System.String)">
            <summary>
            Adds a tag to a field.
            </summary>
            <param name="field">The field where to write the tags.</param>
            <param name="tagId">The tag id to add.</param>
            <returns>True if it tags been added or false if it was not added.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.RemoveTag(COMDBLib.IField,System.String)">
            <summary>
            Removes a tag from a field.
            </summary>
            <param name="field">The field where to remove the tags.</param>
            <param name="tagId">The tag id to remove.</param>
            <returns>True if it tags been removed or false if it was not removed.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.RemoveAllTags(COMDBLib.IField)">
            <summary>
            Removes all tags from the specific field.
            </summary>
            <param name="field">The field where to remove the tags.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.HasAnyTags(COMDBLib.IField)">
            <summary>
            Returns true if the field has any tags attached.
            </summary>
            <param name="field">The field where to remove the tags.</param>
            <returns>True if it has tags attached or false if no tags are attached.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.HasTag(COMDBLib.IField,System.String)">
            <summary>
            Determines if a specific tag is attached to the field.
            </summary>
            <param name="field">The field where to check the tag.</param>
            <param name="tagId">The id of the tag to check.</param>
            <returns>True if the tag is defined and false if the tag is not defined.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetFieldForTag(COMDBLib.ITableDef,System.String)">
            <summary>
            Obtains a field assigned to given tag for given table definition.
            </summary>
            <param name="tableDef">Table definition.</param>
            <param name="tagName">The name of the tag.</param>
            <returns>ComDbField or null if field does not exist.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetFieldForName(COMDBLib.ITableDef,System.String)">
            <summary>
            Obtains a field with a specific name for given table definition. Search is case insensitive.
            </summary>
            <param name="tableDef">Table definition.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>ComDbField or null if field does not exist.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.TagExists(COMDBLib.ITableDef,System.String)">
            <summary>
            Tests the existence of a tag against table definition.
            </summary>
            <param name="tableDef">Table definition.</param>
            <param name="tagName">The name of the tag.</param>
            <returns>True if tag exists.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetTags(COMDBLib.ITableDef)">
            <summary>
            Get all tags for a given table definition
            </summary>
            <param name="tableDef">Table definition</param>
            <returns>List of tags in for of a dictionary whose keys if fields' names and values are lists of tags' names assigned to each field</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetFieldForTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Obtains a field assigned to given tag for given table.
            </summary>
            <param name="table">Table.</param>
            <param name="tagName">The name of the tag.</param>
            <returns>Pair "Field,Filed Position", ot null if field does not exist.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.TagExists(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Tests the existence of a tag against table.
            </summary>
            <param name="table">Table.</param>
            <param name="tagName">The name of the tag.</param>
            <returns>True if tag exists.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaDbAdapter.GetTags(COMDBLib.IComDatabase2)">
            <summary>
            Get all tags for a given table definition
            </summary>
            <param name="table">Table</param>
            <returns>List of tags in for of a dictionary whose keys if fields' names and values are lists of tags' names assigned to each field</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.FieldInfo">
            <summary>
            Tagging data to saved into xml about tagging.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.FieldInfo.Tags">
            <summary>
            List of tags assigned to the column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.FieldInfo.SerializeToString(Audicon.SmartAnalyzer.IdeaAccess.FieldInfo)">
            <summary>
            Serializes the object to a string.
            </summary>
            <returns>An xml string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.FieldInfo.DeserializeFromString(System.String)">
            <summary>
            Deserializes the object from a string.
            </summary>
            <param name="xmlString">A string that has xml.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter">
            <summary>
            Wrapper class around IDEA Server Entities Services
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IIMDFolderNameComparer">
            <summary>
            Comparet for IMD Folder names
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IIMDFolderNameComparer.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ctor
            </summary>
            <param name="refNames">List of reference IMD folders names</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IIMDFolderNameComparer.Compare(IdeaServer.Core.Entities.Interfaces.IIMDFolder,IdeaServer.Core.Entities.Interfaces.IIMDFolder)">
            <summary>
            Names compare method
            </summary>
            <param name="x">First IMD folder</param>
            <param name="y">Second IMD folder</param>
            <returns></returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.TaskMonitorRegisterService">
            <summary>
            Registration sink for new TaskMonitor instances
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DomainContext">
            <summary>
            Returns current server context
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IDEADBExt">
            <summary>
            Returns IDEA database file extension
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IsLocalExecution">
            <summary>
            Returns true for local execution; otherwise, false
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.User">
            <summary>
            Returns the active user
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ActiveProject">
            <summary>
            Returns the active server project
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ServerName">
            <summary>
            Returns the name of currently connected Management Server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ServerPlatform">
            <summary>
            Returns the platform (x86/x64) of currently connected Management Server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ConcurrentTasksNumber">
            <summary>
            Returns maximum number of concurrent tasks
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetTaskMonitor">
            <summary>
            Creates an instance of Task Monitor class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetDesktopAccess">
            <summary>
            Creates an instance of DesktopAccess class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.OpenIdeaDatabase(System.String)">
            <summary>
            Opens the database on server.
            </summary>
            <param name="ideaDatabase">The idea table name.</param>
            <returns>Database instance</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.OpenIdeaDatabase(System.String,System.Boolean)">
            <summary>
            Opens the database on server.
            </summary>
            <param name="ideaDatabase">The idea table name.</param>
            <param name="readOnly">true if read-only open is required</param>
            <returns>Database instance</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CheckFileLock(System.String)">
            <summary>
            In case IDEA table is locked by the user other than the current one, exception is thrown
            </summary>
            <param name="fileName">IDEA table's name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DeleteIdeaDatabase(System.String)">
            <summary>
            Delete IDEA database from server. If file doesn't exist, nothing happens
            </summary>
            <param name="ideaDatabase">The idea table name.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CreateIdeaDatabase(System.String,COMDBLib.ITableDef,System.Object)">
            <summary>
            Creates new IMD file
            </summary>
            <param name="name">new file's name</param>
            <param name="tableDefIni">columns' definitions for a new table</param>
            <param name="tracer">tr</param>
            <returns>new table as IMD file reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindIMDFile(System.String)">
            <summary>
            Finds the IMD file.
            </summary>
            <param name="name">The name of idea file.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindIMDFile(System.String,System.Boolean)">
            <summary>
            Replica of IDEA Server's Project.FindIMDFile()
            </summary>
            <param name="inputSourcePath">The name of idea file</param>
            <param name="doThrow"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFiles">
            <summary>
            Gets the IMD files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFiles(System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Gets the IMD files.
            </summary>
            <param name="ideaInternalDBIDs">The idea internal idea database ids.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFiles(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets the IMD files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFilesCount(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets the IMD files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DatabaseExists(System.String,System.Nullable{System.Guid})">
             <summary>
            Check if a idea Databases exists on server.
             </summary>
             <param name="ideaDatabase">The idea database.</param>
             <param name="ideaInternalDBID">The idea internal DBID.</param>
             <returns>true if exists, otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CancelServerTask(System.Guid)">
            <summary>
            Cancel server task
            </summary>
            <param name="taskId">task Id</param>
            <returns>true if task exists and was cancelled; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFile(System.Guid)">
            <summary>
            Given server file Id, returns file object
            </summary>
            <param name="fileId">file Id</param>
            <returns>file object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetIMDFolder(System.Guid)">
            <summary>
            Given server folder Id, returns file object
            </summary>
            <param name="folderId">folder Id</param>
            <returns>folder object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetProject(System.String)">
            <summary>
            Retrieves server project with specified name
            </summary>
            <param name="prjName">Name of project</param>
            <returns>Project reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetProject(System.Guid)">
            <summary>
            Retrieves server project with specified Id
            </summary>
            <param name="prjId">Id of project</param>
            <returns>Project reference</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetTaskServerCount(IdeaServer.Core.Entities.Interfaces.ServerState)">
            <summary>
            Returns the name currently connected Management Server
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ReserveFileName(System.String)">
            <summary>
            Performs reserving of file 
            </summary>
            <param name="fileName">Name of file to reserve</param>
            <returns>True if file name is free, false if it is reserved</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ReserveServerFileName(System.String)">
            <summary>
            Performs reserving of file independent on caller location
            </summary>
            <param name="fileName">Name of file to reserve</param>
            <returns>True if file name is free, false if it is reserved</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ReserveFileNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs reserving of multiple file names
            </summary>
            <param name="fileNames">List of file names to reserve</param>
            <returns>True if ALL file names are free; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ReserveServerFileNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs reserving of multiple file names independent on caller location
            </summary>
            <param name="fileNames">List of file names to reserve</param>
            <returns>True if ALL file names are free; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UnreserveAllServerFileNames(System.Func{System.String,System.Exception,System.Boolean})">
            <summary>
            Unreserves all previously reserved names.
            Only names reserved via DB are unreserved; those reserved cia mutexes are unreserved automatically as named mutexes 
            are released when TaskRunner process terminates
            </summary>
            <param name="errorHandler">Method handling any possible error</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UnreserveAllFileNames(System.Func{System.String,System.Exception,System.Boolean})">
            <summary>
            Unreserves all previously reserved names independent on caller's location.
            Only names reserved via DB are unreserved; those reserved cia mutexes are unreserved automatically as named mutexes 
            are released when TaskRunner process terminates
            </summary>
            <param name="errorHandler">Method handling any possible error</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DoesExceedIdeaMaxPath(System.String)">
            <summary>
            Extends the string class to determine if the path would exceed the limitation.
            of the file system.
            </summary>
            <param name="path">The string object passed by the framework as part of the extension method.</param>
            <returns>True if the max path limitation of 256 has been exceeded. False otherwise.</returns>       
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.SaveIMDFile(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Saves file entity
            </summary>
            <param name="file">file entity to save</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UpdateIMDFile(System.String)">
            <summary>
            Update DB file info
            </summary>
            <param name="name">name</param>
            <returns>updated info</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LockImdFileDirect(System.String)">
            <summary>
            Locks IMD file by directly saving the entity
            </summary>
            <param name="fileName">file name</param>
            <returns>file after being locked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LockImdFileDirect(System.String,System.String)">
            <summary>
            Locks IMD file by directly saving the entity
            </summary>
            <param name="fileName">file name</param>
            <param name="user">name of user to lock the file for</param>
            <returns>file after being locked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LockImdFileDirect(IdeaServer.Core.Entities.Interfaces.IIMDFile,System.String)">
            <summary>
            Locks IMD file by directly saving the entity
            </summary>
            <param name="imdFile">IMD file to lock</param>
            <param name="user">name of user to lock the file for</param>
            <returns>file after being locked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UnlockImdFile(System.String)">
            <summary>
            Unlocks the file by submitting a task
            </summary>
            <param name="fileName">file name</param>
            <returns>file after being unlocked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UnlockImdFileDirect(System.String)">
            <summary>
            Unlocks the file by directly saving the entity
            </summary>
            <param name="fileName">file name</param>
            <returns>file after being unlocked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.UnlockImdFileDirect(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Unlocks the file by directly saving the entity
            </summary>
            <param name="imdFile">IMD file to unlock</param>
            <returns>file after being unlocked</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CheckIfFilesAreInUse(System.Collections.Generic.IEnumerable{IdeaServer.Core.Entities.Interfaces.IIMDFile})">
            <summary>
            Checks with server to determine if any of the files are currently in use by any task.
            </summary>
            <param name="files">List of files to check</param>
            <returns>true if any of the specified files are currently in use</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetFilesInUse(System.Collections.Generic.IEnumerable{IdeaServer.Core.Entities.Interfaces.IIMDFile})">
            <summary>
            Returns the list of reserved files contained in given files' list
            </summary>
            <param name="files">List of files; if null, all reserved files are returned</param>
            <returns>List of reserved files contained in given files' list</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CheckIfFileInUse(System.String)">
            <summary>
            Checks with server to determine specified file is currently in use by any task.
            </summary>
            <returns>true if the specified file is currently in use</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.OpenIdeaDatabaseReadOnly(IdeaServer.Core.Entities.Interfaces.IFileItemBase)">
            <summary>
            Opens the idea database read only.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IsWCFCommunicationException(System.Exception)">
            <summary>
            Checks whether given exception results from WCF communication problems
            </summary>
            <param name="ex">Exception to check</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IsWCFCommunicationExceptionLight(System.Exception)">
            <summary>
            Checks whether given exception results from WCF communication problems, but not timeout
            </summary>
            <param name="ex">Exception to check</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IsServerFile(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Checks whether the given open IDEA table is local or server-side
            </summary>
            <param name="table">Open IDEA table</param>
            <returns>true if table is on server; false otherwise; undefined if location cannot be determined</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetFoldersAndDatabases">
            <summary>
            Enumerates all IDEA tables and subfolders in IDEA current folder
            </summary>
            <returns>List of files and subfolders</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindImdFolder(System.String,IdeaServer.Core.Entities.Interfaces.IProject)">
            <summary>
            Attempts to find an IDEA folder.
            </summary>
            <param name="folderName">The name of the IDEA folder to locate.
            If this reference is null or empty, root folder of current active project is returned.
            </param>
            <param name="project">Optional server project reference. If null, active project is assumed</param>
            <returns>An IIMDFolder object, if the folder exists, otherwise null.</returns>
            <exception cref="T:System.InvalidOperationException">If the current user does not have an active IDEA Server project.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CreateLibraryItem(IdeaServer.Core.Entities.Interfaces.ILibrary,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates library item within given project library. Creates and initializes the physical file
            </summary>
            <param name="saLibrary">SA project library</param>
            <param name="fileName">Name of file to create</param>
            <param name="fileContent">File contents</param>
            <param name="encoding">Target encoding of library item file</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">Thrown when the file already exists or if the library already contains a file with the same name.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetLibraryInvariantName(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns invariant name of project library
            </summary>
            <param name="libType">Library type</param>
            <returns>Library name</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindLibrary(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Looks up server project library
            </summary>
            <param name="libType">Library type</param>
            <returns>Library object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LibraryFolderFullPath(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns IDEA full paths of specified library for current server project
            </summary>
            <param name="libType">Type of library</param>
            <returns>Full path of library folder on server</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindGlobalLibrary(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Looks up server global library
            </summary>
            <param name="libType">Library type</param>
            <returns>Global Library object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GlobalLibraryFolderFullPath(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Returns IDEA full paths of specified server global library
            </summary>
            <param name="libType">Type of library</param>
            <returns>Full path of global library folder on server</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LogTaskMessage(System.Guid,System.String)">
            <summary>
            Logs info message for server task
            </summary>
            <param name="taskId"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetTMSServer">
            <summary>
            Returns current IDEA Management Server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetAllProjects">
            <summary>
            Returns the list of all IDEA Server projects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetAllProjectsForCurrentUser(System.Boolean)">
            <summary>
            Returns the list of IDEA Server projects where current user is a member
            </summary>
            <param name="topLevelOnly">If true, returns only projects without paren</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.AllUsers(IdeaServer.Core.Entities.Interfaces.IProject)">
            <summary>
            Returns the list of all users assigned to IDEA project
            </summary>
            <param name="prj"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.LinkToLocalProject(IdeaServer.Core.Entities.Interfaces.IProject,System.String,System.Boolean)">
            <summary>
            Links IDEA server project to specified local folder
            </summary>
            <param name="serverProject">IDEA server project to link</param>
            <param name="localProjectFolder">Local folder to link to</param>
            <param name="checkIfLocalProject">If true, checks if specified local folder represents IDEA local project</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.GetServerProjectLink(System.String)">
            <summary>
            Retrieves server project link
            </summary>
            <param name="localProjectFolder">Local folder to obtain server project link for</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DeleteServerProjectLink(System.String)">
            <summary>
            Delete server project link
            </summary>
            <param name="localProjectFolder">Local folder to unlink</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CreateImdFolder(IdeaServer.Core.Entities.Interfaces.IProject,System.String)">
            <summary>
            Creates subfolder within specified IDEA sever project
            </summary>
            <param name="project">Target server project</param>
            <param name="newFolderName">Name of a new subfolder</param>
            <returns>Subfolder created</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CreateImdFolder(IdeaServer.Core.Entities.Interfaces.IProject,System.String,System.Boolean)">
            <summary>
            Creates subfolder within specified IDEA sever project
            </summary>
            <param name="project">Target server project</param>
            <param name="newFolderName">Name of a new subfolder</param>
            <param name="skipExistCheck">If true, method doesn't check whether subfolder with specified name alredy exisis</param>
            <returns>Subfolder created</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.RenameImdFolder(IdeaServer.Core.Entities.Interfaces.IIMDFolder,System.String)">
            <summary>
            Renames IMD folder
            </summary>
            <param name="iIMDFolder">IMD folder to rename</param>
            <param name="newName">New folder's name</param>
            <returns>True if rename took place; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.FindImdFolders(IdeaServer.Core.Entities.Interfaces.IProject,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Within the given project, finds subfolders having names from the specified list
            </summary>
            <param name="project">Target project</param>
            <param name="folders">List of folders names</param>
            <returns>List of IMD folders whose names are in the specified list</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.DeleteImdFolders(System.Collections.Generic.IEnumerable{IdeaServer.Core.Entities.Interfaces.IIMDFolder})">
            <summary>
            Deletes  given IMD folders
            </summary>
            <param name="folders2delete">List of folders to delete</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.IsProjectFolder(IdeaServer.Core.Entities.Interfaces.IIMDFolder)">
            <summary>
            Determines if specified IMD folder represents IDEA project's root folder
            </summary>
            <param name="imdFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.ProtocolCurrentConnection(COMMONIDEACONTROLSLib.IDesktopAdapter)">
            <summary>
            Protocols main server connection properties
            </summary>
            <param name="adapter">External accessor</param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaEntitiesAdapter.CustomDesktopAdapter">
            <summary>
            Retrieves the cached instance of IDEA Server accessor
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaLpOptionAdapter">
            <summary>
            Provides acces to LpOptions.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaLpOptionAdapter.GetName">
            <summary>
            Gets the name of the Lp Option
            </summary>
            <returns>The name of the Lp Option</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaLpOptionAdapter.GetId">
            <summary>
            Get id of the Lp Option
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaLpOptionAdapter.GetTitle">
            <summary>
            Returns "branded info"; for branded version it is identical to what GetName() returns; for CLM based it is empty
            </summary>
            <returns>title of the Lp Option</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskCanceller">
            <summary>
            Class to detect IDEA server tasks cancel condition
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskCanceller.TaskId">
            <summary>
            Id of the task to check cancel
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskCanceller.#ctor(System.Object,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="taskExecutor">IDEA task executor (expected IdeaServer.TaskRunner.TaskExecutor)</param>
            <param name="taskCancelCode">error code to use when throwing COM exception to notify cancel</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.IdeaServerTaskCanceller.CheckCancel">
            <summary>
            Periodically checks task events and throws exception in case the task was cancelled
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.LocalProjectManagementAdapter">
            <summary>
            represents Idea LocalProjectManagement Adapter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.LocalProjectManagementAdapter.GetDatabases">
            <summary>
            Gets the all idea databases from working folder and subfolders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.LocalProjectManagementAdapter.GetFoldersAndDatabases">
            <summary>
            Gets the folders and databases inside the folders.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.DatabaseIsLocked">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; database is currently locked by the user &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.DeleteLocallyNotImplemented">
            <summary>
              Looks up a localized string similar to Deleting server databases from desktop is not implemented..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyClassName">
            <summary>
              Looks up a localized string similar to The class name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyField">
            <summary>
              Looks up a localized string similar to The field provided is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyImdFilles">
            <summary>
              Looks up a localized string similar to List of filies provided contains null references.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyMethodName">
            <summary>
              Looks up a localized string similar to The method name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyProjectName">
            <summary>
              Looks up a localized string similar to The project name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyTableName">
            <summary>
              Looks up a localized string similar to The database name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.EmptyTagName">
            <summary>
              Looks up a localized string similar to The tag name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_ACCESS_DENIED">
            <summary>
              Looks up a localized string similar to The access to the path &apos;{0}&apos; is denied..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_BAD_TASK_ARGUMENT">
            <summary>
              Looks up a localized string similar to Only the tasks implementing IExecutableTaskCtrl or IRunnable can be submitted..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_CANNOT_DELETE_WRK_FOLDER">
            <summary>
              Looks up a localized string similar to the current IDEA project directory cannot be deleted..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_CTX_NO_ACTIVE_PROJECT">
            <summary>
              Looks up a localized string similar to There are no active projects available for the current context..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_CTX_NO_USER">
            <summary>
              Looks up a localized string similar to There is no user available for the current context..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_EMPTY_SESSION_ID">
            <summary>
              Looks up a localized string similar to The method invocation session ID cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_EXTERNAL_PROJECT_EXISTS">
            <summary>
              Looks up a localized string similar to The external project &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_IDEA_DOMAIN_CONTEXT_MISSING">
            <summary>
              Looks up a localized string similar to IDEA Domain Context is missing..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_INVALID_FOLDER">
            <summary>
              Looks up a localized string similar to The folder &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_INVALID_PROJECT_FOLDER">
            <summary>
              Looks up a localized string similar to The folder &apos;{0}&apos; does not contain any IDEA project..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_INVOKE_CANCELLED">
            <summary>
              Looks up a localized string similar to The method invocation was cancelled..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_INVOKE_NOT_COMPLETE">
            <summary>
              Looks up a localized string similar to The method invocation is not yet complete..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_INVOKE_STARTED">
            <summary>
              Looks up a localized string similar to The method invocation has already been started..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_LIBRARY_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The library &apos;{0}&apos; cannot be found on the server..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_MANAGED_PROJECT_EXISTS">
            <summary>
              Looks up a localized string similar to The managed project &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_MOVE_PATH_TO_RECYCLE_BIN">
            <summary>
              Looks up a localized string similar to Path &apos;{0}&apos; cannot be moved to Recycle Bin. Please make sure that no databases related to this path are currently open..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_NO_CURRENT_INVOKE">
            <summary>
              Looks up a localized string similar to The method invocation has not been started or the invocation is already completed..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_NO_LOCAL_INVOKE">
            <summary>
              Looks up a localized string similar to The method invocation cannot be performed locally..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_NO_LOCAL_SUBMIT">
            <summary>
              Looks up a localized string similar to The transport task cannot be submitted locally..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_NO_SERVER_EXECUTION">
            <summary>
              Looks up a localized string similar to The operation cannot be executed on server..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_NO_TASK_SUBMITTED">
            <summary>
              Looks up a localized string similar to No task was submitted..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_PRJ_RENAME_FOLDER_EXISTS">
            <summary>
              Looks up a localized string similar to A folder with the name &apos;{0}&apos; already exists. Please use a different name..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_PRJ_RENAME_PROJECT_EXISTS">
            <summary>
              Looks up a localized string similar to A project with the name &apos;{0}&apos; already exists. Please use a different name..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_TASK_ALREADY_SUBMTTED">
            <summary>
              Looks up a localized string similar to There is already a task running..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ERR_TASK_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The task (ID = &apos;{0}&apos;) cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.ErrorNotValidOnServer">
            <summary>
              Looks up a localized string similar to This operation cannot be executed on server.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.FMT_ERR_GET_IDEA_DB_ID">
             <summary>
               Looks up a localized string similar to An unexpected error occurred while reading the ID for the &apos;{0}&apos; IDEA database.
            Verify that it is a correct IDEA database, that you have the required access rights and that the database is not used by another process.
             .
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidCharactersInProjectName">
            <summary>
              Looks up a localized string similar to The project name provided contains invalid characters.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidDatabaseName">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; cannot be retrieved from server..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidFieldName">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; cannot be found in the database..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidFieldType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; field type is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidTableName">
            <summary>
              Looks up a localized string similar to The database name &apos;{0}&apos; is not present in the given context..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.InvalidTagName">
            <summary>
              Looks up a localized string similar to The tag &apos;{0}&apos; cannot be found in the database..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.LocalDatabaseIsLocked">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; database is currently locked by another operation or is opened in IDEA..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.OpenDatabaseFailed">
            <summary>
              Looks up a localized string similar to An error occurred while opening the &apos;{0}&apos; IDEA database: &apos;{1}&apos;. .
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Resources.Messages.PathNotExist">
            <summary>
              Looks up a localized string similar to The path provided does not exist..
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField">
            <summary>
            Wrapper around COMDB.Field
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.#ctor(COMDBLib.Field,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="comFld">COMDB.Field instance</param>
            <param name="pos">Field's position</param>
            <param name="tags">list of tags</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Position">
            <summary>
            Field's ordinal position
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.ActionFieldType">
            <summary>
            If action field, its type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Decimals">
            <summary>
            Field's decimal digits counter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Description">
            <summary>
            Field's description
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Equation">
            <summary>
            Field's equation, if any
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.HasActionField">
            <summary>
            Tries if field is action field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsCharacter">
            <summary>
            Tries if field is character field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsDate">
            <summary>
            Tries if field is date field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsImpliedDecimal">
            <summary>
            Tries if field is decimal field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsNumeric">
            <summary>
            Tries if field is numeric field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsTime">
            <summary>
            Tries if field is time field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.IsVirtual">
            <summary>
            Tries if field is virtual field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Length">
            <summary>
            Field's length
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Name">
            <summary>
            Field's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Protected">
            <summary>
            Tries if field is action field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Type">
            <summary>
            Field's data type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ComDbField.Tags">
            <summary>
            Field's data type
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException">
            <summary>
            The exception that is thrown when trying to open a Idea Database 
            locked by other operation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException"/> class.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DatabaseLockedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation">
            <summary>
            The enum ExecutionLocation defines where the macro will run.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation.Client">
            <summary>
            The macro will run on Client.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation.Server">
            <summary>
            The macro will run on Server.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskLocation">
            <summary>
            The enum ExecutionLocation defines where the macro will run
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskLocation.None">
            <summary>
            Undefined location
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskLocation.Local">
            <summary>
            The macro will run on Client.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskLocation.Server">
            <summary>
            The macro will run on Server.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.FolderType">
            <summary>
            Type of disk folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.FolderType.Logical">
            <summary>
            Logical folder. It does not necessarily exist physically
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.FolderType.Normal">
            <summary>
            Regular folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.FolderType.IdeaProject">
            <summary>
            Folder contains IDEA project
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions">
            <summary>
            Provides extension methods for IDEA classes
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.LoginName(IdeaServer.Core.Entities.Interfaces.IDomainContext)">
            <summary>
            Strips domain name from user's login id.
            </summary>
            <param name="ctx">Current IDEA server context</param>
            <returns>Normalized user's login id</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.LoginName(IdeaServer.Core.Entities.Interfaces.IUser)">
            <summary>
            Strips domain name from user's login id.
            </summary>
            <param name="user">Current IDEA server user</param>
            <returns>Normalized user's login id</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.GetTags(COMDBLib.IField)">
            <summary>
            Returns all the tags that are associated with the field.
            </summary>
            <param name="field">The field from where to read the tags.</param>
            <returns>List of tag ids as string list.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.SetTags(COMDBLib.IField,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the tags for a field.
            </summary>
            <param name="field">The field where to write the tags.</param>
            <param name="tagIds">Tye list of tag ids as a list of strings.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.AddTag(COMDBLib.IField,System.String)">
            <summary>
            Adds a tag to a field.
            </summary>
            <param name="field">The field where to write the tags.</param>
            <param name="tagId">The tag id to add.</param>
            <returns>True if it tags been added or false it it was not added.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.RemoveTag(COMDBLib.IField,System.String)">
            <summary>
            Removes a tag from a field.
            </summary>
            <param name="field">The field where to remove the tags.</param>
            <param name="tagId">The tag id to remove.</param>
            <returns>True if it tags been removed or false it it was not removed.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.RemoveAllTags(COMDBLib.IField)">
            <summary>
            Removes all tags from the specific field.
            </summary>
            <param name="field">The field where to remove the tags.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.HasAnyTags(COMDBLib.IField)">
            <summary>
            Returns true if the field has any tags attached.
            </summary>
            <param name="field">The field where to remove the tags.</param>
            <returns>True if it has tags attached or false if no tags are attached.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Extensions.HasTag(COMDBLib.IField,System.String)">
            <summary>
            Determines if a specific tag is attached to the field.
            </summary>
            <param name="field">The field where to check the tag.</param>
            <param name="tagId">The id of the tag to check.</param>
            <returns>True if the tag is defined and false if the tag is not defined.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.FullyQualifiedMethodInfo">
            <summary>
            Class encapsulates method name specified via different forms of assembly name/class name/method name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.FullyQualifiedMethodInfo.Assembly">
            <summary>
            Method's info asembly
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.FullyQualifiedMethodInfo.ClassType">
            <summary>
            Method's info class
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.FullyQualifiedMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="assName">Assembly name. May be a) Fully qualified name; b) Path</param>
            <param name="className">Class name. May be a) Fully qualified name; b) Normal full name</param>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.FullyQualifiedMethodInfo.Invoke(System.Object[],System.Boolean)">
            <summary>
            Invokes the encapsulated method
            </summary>
            <param name="parameters">Invokation parameters</param>
            <param name="newAppDomain">If true, invoked in new App Domain</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaAccessConfiguration">
            <summary>
            Describes all IDEA settings which cannot be obtained from IDEA itself and therefore require custom configuration
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaAccessConfiguration.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaAccessConfiguration.Instance">
            <summary>
            Returns class singleton
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaAccessConfiguration.LibraryFolders">
            <summary>
            Collection of library folders
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaAccessConfiguration.LibraryFoldersList">
            <summary>
            Collection of library folders as List
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFolder">
            <summary>
            IDEA library folder descriptor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFolder.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFolder.Type">
            <summary>
            Type of library (from enum COMMONIDEACONTROLSLib.LibraryLocation)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFolder.InvariantName">
            <summary>
            Library folder's invariant name
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFoldersCollection">
            <summary>
            Collection of IDEA library folders
            This class corresponds to config lines &lt;LibraryFolders&gt; list
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFoldersCollection.CreateNewElement">
            <summary>
            Base method implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFoldersCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Base method implementation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFoldersCollection.Item(System.Int32)">
            <summary>
            Simple Indexer 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LibraryFoldersCollection.Item(COMMONIDEACONTROLSLib.LibraryLocation)">
            <summary>
            Type based indexer
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaConstants">
            <summary>
            Definitions of general purpose constants are here
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaConstants.Prefix">
            <summary>
            Prefix of all IDEA tasks execution audit tests
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaConstants.TaskCancelCode">
            <summary>
            This is HRSULT of COMException that a method ITaskProgress.Progress() has to throw in order to cancel task's execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaConstants.TaskCancelCode2">
            <summary>
            This is the HRESULT that IDEA uses (sometimes; e.g., IdeaImportExportTask.ImportDelimFile) if an operation was canceled by the user.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaConstants.ErrorRequestAborted">
            <summary>
            Win APIs like CopyFileEx set the last error to ErrorRequestAborted if the progress routine returns PROGRESS_CANCEL.
            IDEA's IMDFolder.UploadFiles throws an exception whose base exception is a Win32Exception having NativeErrorCode equal
            to ErrorRequestAborted if the operation was cancelled.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics">
            <summary>
            Represents Date statistics of a date field
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics"/> class.
            </summary>
            <param name="earliestDate">The earliest date (format yyyy/mm/dd).</param>
            <param name="latestDate">The latest date (format yyyy/mm/dd).</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics.EarliestDateAsString">
            <summary>
            Gets the earliest date as string.
            </summary>
            <value>The earliest date as string(format yyyy/mm/dd).</value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics.LatestDateAsString">
            <summary>
            Gets the latest date as string.
            </summary>
            <value>The latest date as string (format yyyy/mm/dd).</value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics.LatestDate">
            <summary>
            Gets the latest date as DateTime.
            </summary>
            <value>The latest date as DateTime.</value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.DateStatistics.EarliestDate">
            <summary>
            Gets the earliest date as DateTime.
            </summary>
            <value>The earliest date as DateTime.</value>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase">
            <summary>
            Implements base class for all IDEA client sites.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes a new instance of type IdeaNotifySink with the specified ITaskProgress interface.
            </summary>
            <param name="taskProgress">The optional ITaskProgress interface to which IdeaNotifySink forwards the calls on its
            own implementation of ITaskProgress.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.m_clientTaskProgress">
            <summary>
            Holds the caller-supplied ITaskProgress interface;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.m_clientTaskComplete">
            <summary>
            Holds the caller-supplied ITaskCompletion interface;
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.Completed(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bUserCanceled">true if user cancelled the task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.Progress(System.Int16)">
            <summary>
            This method gets progress notifications from each individual operation (extraction, summarization etc) within the script.
            The value of operation's progress has to be combined with the absolute position of script's execution reported via 
            the ScriptProgress() method
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.Queued(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.Standby(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.Start(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Name of started task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.ShowProgressDialog(System.Boolean)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="bShow">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="DatabaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaClientSiteBase.ScriptProgressImpl(System.Int16,System.Int16)">
            <summary>
            This method is supposed to be called directly from script. It indicates the script's current execution progress
            </summary>
            <param name="percent">Script's current execution progress value</param>
            <param name="nextPercentHint">Hint on possible next progress value</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo">
            <summary>
            Represents idea project folder informations
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.FullPath">
            <summary>
            Gets or sets the full path.
            </summary>
            <value>
            The full path.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.IsOnServer">
            <summary>
            Gets a value indicating whether is located on server.
            </summary>
            <value>
            <c>true</c> if is located on server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.SubFolders">
            <summary>
            Gets the sub folders.
            </summary>
            <value>
            The sub folders.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.IdeaDatabases">
            <summary>
            Gets the idea databases.
            </summary>
            <value>
            The idea databases.
            </value>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseFolderInfo.Flatten">
            <summary>
            Flattens the idea databases.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseInfo">
            <summary>
             Represents an server idea database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseInfo.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseInfo.Id">
            <summary>
            Gets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaDatabaseInfo.IsOnServer">
            <summary>
            Gets or sets a value indicating whether is located on server.
            </summary>
            <value>
            <c>true</c> if located on server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase">
            <summary>
            Class implementing IDEA task which executes audit test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_clientSite">
            <summary>
            General client site
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_notifySink">
            <summary>
            Client site as ITaskProgress
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_taskCompletion">
            <summary>
            Client site as ITaskCompletion
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_netTaskCompletion">
            <summary>
            Client site as INetTaskCompletion
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_serverIntegration">
            <summary>
            Client site as IIdeaServerIntegration
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.m_scriptLog">
            <summary>
            Client site as IScriptLog
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.ServerSite">
            <summary>
            Server context required in server scenario
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.ReserveOutputFileNames">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Validate">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase._HandsOffList">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Completed(System.Boolean)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="bUserCanceled">Specifies whether task was cancelled by user</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Progress(System.Int16)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="percent">Execution completeness</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Queued(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Standby(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.Start(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.ShowProgressDialog(System.Boolean)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="bShow">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="DatabaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.BatchThisTask(System.Object)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="punk">?</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.PauseTask(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="outputDatabaseFileName">?</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.SubTaskCompleted(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="outputDatabaseFileName">?</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.SubmitNewDatabase(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="outputDatabaseFileName">Name of newly created IDEA file</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.ScriptLog(System.String)">
            <summary>
            Script Log implementation
            </summary>
            <param name="logStr">Log string</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IdeaTaskBase.SetClientSiteImpl(System.Object)">
            <summary>
            Initializes entry points of required IDEA functionalities
            </summary>
            <param name="punkClientSite">Client site object</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IMDFileComparer">
            <summary>
            Comparer for IMD files
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IMDFileComparer.Equals(IdeaServer.Core.Entities.Interfaces.IIMDFile,IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Checks equality of two objects
            </summary>
            <param name="x">First object</param>
            <param name="y">Second object</param>
            <returns>True if objects are equal; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IMDFileComparer.GetHashCode(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Calculates object's hash code
            </summary>
            <param name="obj">Object</param>
            <returns>Hash code</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker">
            <summary>
            Invokes specified method of assembly in server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.TaskId">
            <summary>
            IDEA task Id of the task that runs Invoker at server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.Result">
            <summary>
            Returns result of server-side invoke
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.MethodName">
            <summary>
            Method name
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.#ctor(System.Byte[],System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            ctor
            </summary>
            <param name="module">Image of the module to invoke method for as byte array</param>
            <param name="className">Name of the class to invoke method for</param>
            <param name="method">Name of method to invoke</param>
            <param name="args">Arguments of invoked method</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
            <param name="info">serialized stream</param>
            <param name="context">context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Iserializable implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.Name">
            <summary>
            Name of runnable instance
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.ProgressSink">
            <summary>
            External notifications' sink
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.Log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.Run">
            <summary>
            Implements the interface method. Working horse method of runnable class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.IsCancelConfirmed">
            <summary>
            Invoker may suppress cancel even if it was issued by caller. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.IsResultPresent">
            <summary>
            Specifies whether Run() creates execution result. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.GetResult">
            <summary>
            As the task that runs Invoker completes, this method is called to download the invocation results from server
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.GetSafeResult">
            <summary>
            Tries to obtain execution result even in presense of communication problems
            TODO: using this code is a workaround and has to be revised!!!
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.LoadAssembly">
            <summary>
            Loads specified invoked asembly
            </summary>
            <returns>Invoked assembly</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.Invoke(System.Reflection.MethodInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoke workin horse
            </summary>
            <param name="mi">Method to invoke</param>
            <param name="instance">Instance on which to invoke method</param>
            <param name="args">Invoke arguments</param>
            <returns>Invoke result</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.SetClientSite(System.Object)">
            <summary>
            Assign notification sink for server task notifications
            </summary>
            <param name="instance">Notification sink</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.Invoker.CancelChecker(System.Boolean)">
            <summary>
            Check whether cancel request was issued for running server task
            </summary>
            <param name="breakOnCancel">If cancel request was issued and breakOnCancel is true, COMException with cancel code is thrown</param>
            <returns>True if cancel request was issued, false otherwise</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.IAUtilities">
            <summary>
            Contains utility methods used by IdeaAccess 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IAUtilities.DeleteDirectory(System.String)">
            <summary>
            Deletes specified directory with all files and sub-directories
            </summary>
            <param name="targetDir">Directory to delete</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IAUtilities.MoveDirectoryToRecycleBin(System.String)">
            <summary>
            Moves the specified directory with all files and sub-directories into RecycleBin
            </summary>
            <param name="targetDir">Directory to move into recycle Bin</param>
            <remarks>In contrast to MoveToRecycleBin(), after execution of this method Recycle Bin contains each subfolder and sub-file of the target folder</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IAUtilities.WaitFileUnlocked(System.String,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)">
            <summary>
            Wait until file is not locked
            </summary>
            <param name="filePath">file path</param>
            <param name="access">file access</param>
            <param name="share">open share mode</param>
            <param name="numTries">number of attempts to access file</param>
            <param name="delay">timeout between attempts</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.IAUtilities.SimpleTrace(System.String,System.String)">
            <summary>
            Simple trace
            </summary>
            <param name="fileName"></param>
            <param name="txt"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase">
            <summary>
            Represens a local idea database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase"/> class.
            </summary>
            <param name="fullPath">The full path.</param>
            <param name="relativePathToProject">The relative path to project.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.#ctor(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase"/> class.
            </summary>
            <param name="fullPath">The full path.</param>
            <param name="relativePathToProject">The relative path to project.</param>
            <param name="databaseId">The database id.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.FullPath">
            <summary>
            Gets the full path.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.RelativePathToProject">
            <summary>
            Gets the relative path to project.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.LocalDatabase.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink">
            <summary>
            Implements a target for IDEA tasks' execution notifications
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.#ctor(System.Object)">
            <summary>
            ctor
            </summary>
            <param name="wrappedClientSite">Notifications' sink</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.WaitComplete(System.Int32)">
            <summary>
            Wait for operation to complete
            </summary>
            <param name="timeout">timeout</param>
            <returns>True if completed, false by timeout</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.Completed(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bUserCanceled"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.Progress(System.Int16)">
            <summary>
            Interface method implementation
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.Queued(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.Standby(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.Start(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.ShowProgressDialog(System.Boolean)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="bShow">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="DatabaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.BatchThisTask(System.Object)">
            <summary>
            Interface method implementation
            </summary>
            <param name="punk"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.PauseTask(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="outputDatabaseFileName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.SubTaskCompleted(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="outputDatabaseFileName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.SubmitNewDatabase(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="outputDatabaseFileName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.ScriptLog(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="logStr"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.AppendVBCode(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.NotifySink.DisableRunInScriptEditor(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bDisableRun">Flag</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink">
            <summary>
            Implements a forwarding notification sink that can act as an IDEA client site.
            </summary>
            <remarks>
            In IDEA 9, ILocalScriptClient.SetClientSite fails if the object
            implementing ITaskProgress does not also implement ITaskCompletion.
            Therefore IdeaNotifySink implements also the interface ITaskCompletion.
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.m_clientTaskProgress">
            <summary>
            Holds the caller-supplied ITaskProgress interface;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.m_wrappedTaskProgress">
            <summary>
            Holds the wrapped ITaskProgress interface provided by IDEA;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.m_wrappedTaskComplete">
            <summary>
            Holds the wrapped ITaskCompletion interface provided by IDEA provided by IDEA;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.m_wrappedNetTaskComplete">
            <summary>
            Holds the wrapped INetTaskCompletion interface provided by IDEA;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.NoOpSink">
            <summary>
            Gets a reference to a NOOP sink.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.#ctor(COMMONIDEACONTROLSLib.ITaskProgress2)">
            <summary>
            Initializes a new instance of type IdeaNotifySink with the specified ITaskProgress interface.
            </summary>
            <param name="taskProgress">The optional ITaskProgress interface to which IdeaNotifySink forwards the calls on its
            own implementation of ITaskProgress.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.ClientTaskProgress">
            <summary>
            Gets a reference to the ITaskProgress2 with which the current object
            was initialized.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.WrappedTaskProgress">
            <summary>
            Sets the wrapped (IDEA-supplied) ITaskProgress interface.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SuppressProgressDialog">
            <summary>
            Sets the flag to suppress the progress dialog
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.Completed(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bUserCanceled">true if user cancelled the task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.Progress(System.Int16)">
            <summary>
            This method gets progress notifications from each individual operation (extraction, summarization etc) within the script.
            The value of operation's progress has to be combined with the absolute position of script's execution reported via 
            the ScriptProgress() method
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.Queued(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.Standby(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.Start(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="taskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.ShowProgressDialog(System.Boolean)">
            <summary>
            Called to instruct the sink to display or hide the progress dialog.
            </summary>
            <param name="bShow">A boolean value that indicates whether the sink 
            should show (true) or hide (false) the progress dialog.</param>
            <remarks>The method forwards the call to ClientTaskProgess, if one was 
            specified, otherwise the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="DatabaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.ScriptLog(System.String)">
            <summary>
            Method is required in some scenarious
            </summary>
            <param name="logStr"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.AppendVBCode(System.String)">
            <summary>
            Method is required in some scenarious
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.DisableRunInScriptEditor(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bDisableRun">Flag</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.CreatedDatabase(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="DatabaseName"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitErrorMessage(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="source"></param>
            <param name="description"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitFileForDownload(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="filename"></param>
            <param name="path"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitNewResult(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="resultName"></param>
            <param name="resultID"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitNewServerDBs(System.String,System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="primaryDBPath"></param>
            <param name="newFileGUIDs"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitNewView(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.SubmitUserMessage(System.String,System.Int32)">
            <summary>
            Interface method implementation
            </summary>
            <param name="message"></param>
            <param name="highlight"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteNotifySink.TaskFinalized">
            <summary>
            Interface method implementation
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ObjectWrapper">
            <summary>
            Helper class for returning results from script
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ObjectWrapper.WrappedObject">
            <summary>
            Result to return
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.WritableTuple`1">
            <summary>
            Strongly typed object wrapper class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.WritableTuple`1.Item">
            <summary>
            Wrapped object reference
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.WritableTuple`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.WritableTuple`1.#ctor(`0)">
            <summary>
            ctor
            </summary>
            <param name="item">Object to wrap</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteExtraction">
            <summary>
            Invocable class prrforming extraction
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteExtraction.ClientSite">
            <summary>
            Implements interface method
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.RemoteExtraction.Execute(System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Boolean,System.Boolean})">
            <summary>
            Working horse method
            </summary>
            <param name="args">arguments</param>
            <param name="cancelCheck">cancel checker callback</param>
            <returns>Name of result file</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerDatabase">
            <summary>
            Represents a server idea database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerDatabase.#ctor(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerDatabase" /> class.
            </summary>
            <param name="imdFile">The imd file.</param>
            <exception cref="T:System.ArgumentNullException">imdFile</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerDatabase.IMDFile">
            <summary>
            Gets the IMDFile underlying object.
            </summary>
            <value>
            The imd file.
            </value>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException">
            <summary>
            Generic exception class for server-side invocation errors
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Wrapped exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ctor
            </summary>
            <param name="info">serialized object data about the exception being thrown</param>
            <param name="context">contextual information about the source or destination</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerInvocationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Required by serialization protocol
            </summary>
            <param name="info">serialized object data about the exception being thrown</param>
            <param name="context">contextual information about the source or destination</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException">
            <summary>
            Exception class specific for operations with local to server project links
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.OperationType">
            <summary>
            Type of operation enumeration
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.OperationType.Create">
            <summary>
            Op type: create
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.OperationType.Read">
            <summary>
            Op type: read
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.OperationType.Delete">
            <summary>
            Op type: delete
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.Operation">
            <summary>
            Type of operation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg">Exception message</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg">Exception message</param>
            <param name="innerException">Internal exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ctor
            </summary>
            <param name="info">serialized object data about the exception being thrown</param>
            <param name="context">contextual information about the source or destination</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.ServerProjectLinkException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Required by serialization protocol
            </summary>
            <param name="info">serialized object data about the exception being thrown</param>
            <param name="context">contextual information about the source or destination</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker">
            <summary>
            Invokes App Workflow custom .NET based action on server
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            ctor
            </summary>
            <param name="assName">Assembly name. May be a) Fully qualified name; b) Path</param>
            <param name="className">Class name. May be a) Fully qualified name; b) Normal full name</param>
            <param name="methodName">Method name</param>
            <param name="args">Invoke arguments</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
            <param name="info">serialized stream</param>
            <param name="context">context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Iserializable implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker.LoadAssembly">
            <summary>
            Loads invoked assembly
            </summary>
            <returns>Assemb yto invoke method for</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.SimpleInvoker.Invoke(System.Reflection.MethodInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoke workin horse
            </summary>
            <param name="mi">Method to invoke</param>
            <param name="instance">Instance on which to invoke method</param>
            <param name="args">Invoke arguments</param>
            <returns>Invoke result</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper">
            <summary>
            Provides subclassing of Task Pusher in order to insert own client site to server tasks submitted as result of RunAtServer True
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.ResetDesktopAdapter">
            <summary>
            Inteface method implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SetDesktopAdapter(System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="pUnkDA"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitDeleteIndex(System.String,System.Object,System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="oKeysToDelete"></param>
            <param name="pUnkComDatabase"></param>
            <param name="pControlUnknown"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitExtraction(System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="pIUnknownTask"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitImplicitTask(System.Int32,System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="hWnd"></param>
            <param name="pIUnknownTask"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitIndex(System.String,System.Object,System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="key"></param>
            <param name="pUnkComDatabase"></param>
            <param name="pControlUnknown"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitReIndex(System.String,System.Object,System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="oKeyToReindex"></param>
            <param name="pUnkComDatabase"></param>
            <param name="pControlUnknown"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitTask(System.Int32,System.Object)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="hWnd"></param>
            <param name="pIUnknownTask"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TaskPusherWrapper.SubmitTaskEx(System.Int32,System.Object,System.String@)">
            <summary>
            Inteface method implementation
            </summary>
            <param name="hWnd"></param>
            <param name="pIUnknownTask"></param>
            <param name="pHandsOffList"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.TraceProxy">
            <summary>
            Helper class enabling usage of Tracer from IdeaAccess namespace
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TraceProxy.Instance">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TraceProxy.Info(System.String,System.Object[])">
            <summary>
            Main info method
            </summary>
            <param name="format">Output format</param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask">
            <summary>
            Class implementing IDEA server task used to transport IRunnable objects to the server and run them
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Canceller">
            <summary>
            For server-side tasks, this object would chack cancel conditions
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.#ctor(Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable)">
            <summary>
            ctor to be called locally
            </summary>
            <param name="runnable">Runnable object to be executed on server</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.#ctor(Audicon.SmartAnalyzer.IdeaAccess.Interfaces.IRunnable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ctor to be called locally
            </summary>
            <param name="runnable">Runnable object to be executed on server</param>
            <param name="inputFiles">Input files to be assigned to server-side task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
            <param name="info">serialized stream</param>
            <param name="context">context</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.ClientSite">
            <summary>
            External client site
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.InputFiles">
            <summary>
            This property is used to synchronize execution of tasks intending to work on same input tables, so that if 2 tasks specify at least one identical 
            input name, their execdution gets serialized
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Name">
            <summary>
            Task name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.OutputFiles">
            <summary>
            This property is used to "reserve" names of files supposed to be created by the test. "Reserve" means that if a task tries to
            use the file output name already specified by another task, its execution gets aborted
            In order to support this behaviuor, the method INetTask.ReserveOutputFileNames() has to be implemented according to CaseWare guidelines
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.ReservedFileNames">
            <summary>
            List of reserved output files names
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.InputIMDFileEntities">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.InputLibraryItemEntities">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Run">
            <summary>
            Main task execution method. Executes audit test asssigned to task
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Dispose">
            <summary>
            Disposable pattern
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.ReserveOutputFileNames">
            <summary>
            Interface method's implemenation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Standby(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Completed(System.Boolean)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="bUserCanceled">Specifies whether task was cancelled by user</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Progress(System.Int16)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="percent">Execution completeness</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.Start(System.String)">
            <summary>
            Interface method's implemenation
            </summary>
            <param name="taskName">Task name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.Types.TransportTask.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Iserializable implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools">
            <summary>
            Utils for working with Idea.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.WorkingDirectory">
            <summary>
            Returns the true working directory of IDEA.
            </summary>
            <remarks>If it can not be retrieved this wil return string.empty</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.WorkingDirectorySubfolder">
            <summary>
            Returns the working directory subfolder of IDEA.
            </summary>
            <remarks>If it can not be retrieved this wil return string.empty</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MaxDateValueFromTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the maximum date value of a field with a specific tag.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="tagName">Name of the tag on which the computation is based.</param>
            <returns>Max date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagname, is null.</exception>
            <exception cref="T:System.ArgumentException">If tag name is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If tag name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinDateValueFromTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum date value of a field with a specific tag.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="tagName">Name of the tag on which the computation is based.</param>
            <returns>Min date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tag name is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If tag name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MaxNumericValueFromTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the maximum numeric value of a field with a specific tag.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="tagName">Name of the tag on which the computation is based.</param>
            <returns>Max numeric value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If databaseor tagname, is null.</exception>
            <exception cref="T:System.ArgumentException">If tag name is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If tag name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinNumericValueFromTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum numeric value of a field with a specific tag.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="tagName">Name of the tag on which the computation is based.</param>
            <returns>Min numeric value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tag name is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If tag name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinMaxDateValueFromTag(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum and maximum date value of a field with a specific tag.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="tagName">Name of the tag on which the computation is based.</param>
            <returns>Min and max date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tag name is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If tag name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MaxDateValueFromField(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the maximum date value of a field.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="fieldName">Name of the fieldName on which the computation is based.</param>
            <returns>Max date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">If fieldName name is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinDateValueFromField(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum date value of a field.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="fieldName">Name of the field on which the computation is based.</param>
            <returns>Min date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If fieldName is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MaxNumericValueFromField(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the maximum numeric value of a field.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="fieldName">Name of the field on which the computation is based.</param>
            <returns>Max numeric value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If databaseor fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If fieldName is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinNumericValueFromField(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum numeric value of a field.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="fieldName">Name of the field on which the computation is based.</param>
            <returns>Min numeric value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If fieldName is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.MinMaxDateValueFromField(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Calculate the minimum and maximum date value of a field.
            </summary>
            <param name="comDatabase">Instance of an Idea Database.</param>
            <param name="fieldName">Name of the field on which the computation is based.</param>
            <returns>Min and max date value from an Idea table.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If fieldName is not in the database.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.GetFieldName(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Retrives the field name based on the name of a tag.
            </summary>
            <param name="comDatabase">Name of an Idea table.</param>
            <param name="tagName">Name of the tag on which the search is performed.</param>
            <returns>Name of the field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tagname is empty.</exception>
            <remarks>The search is case insensitive.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.TagExists(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Test is a tag exists in an Idea Table.
            </summary>
            <param name="comDatabase">Name of an Idea table.</param>
            <param name="tagName">Name of the tag on which the search is performed.</param>
            <returns>True if tag exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagname, is null.</exception>
            <exception cref="T:System.ArgumentException">If tagname is empty.</exception>
            <remarks>Case sensitive lookup.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.TryGetFieldName(COMDBLib.IComDatabase2,System.String,System.String@)">
            <summary>
            Test is a tag exists in an Idea Table and get the field name.
            </summary>
            <param name="comDatabase">Name of an Idea table.</param>
            <param name="tagName">Name of the tag on which the search is performed.</param>
            <param name="fieldName">Name of the field if the tag exists, empty if not.</param>
            <returns>True if tag exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName is null.</exception>
            <exception cref="T:System.ArgumentException">If tagname is empty.</exception>
            <remarks>Case sensitive lookup.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.FieldExists(COMDBLib.IComDatabase2,System.String)">
            <summary>
            Test is a field exists in an Idea Table.
            </summary>
            <param name="comDatabase">Name of an Idea table.</param>
            <param name="fieldName">Name of the field on which the search is performed.</param>
            <returns>True if field exists.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.FileIsValid(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Test if an Idea file is valid (exist and has records).
            </summary>
            <param name="tableName">Name of Idea table.</param>
            <param name="execLocation">Location where it is used.</param>
            <returns>true if the file exists and has records.</returns>
            <exception cref="T:System.ArgumentException">If File is no valid.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.IsCatchableException(System.Exception)">
            <summary>
            Determines whether an exception is catchable exception.
            </summary>
            <param name="exception">The e.</param>
            <returns>
            	<c>true</c> if the the specified exception is catchable exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.IdeaAccess.UtilityTools.SafeFileExist(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
    </members>
</doc>
