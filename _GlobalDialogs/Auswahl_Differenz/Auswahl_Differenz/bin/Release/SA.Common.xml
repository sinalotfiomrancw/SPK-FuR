<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SA.Common</name>
    </assembly>
    <members>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1">
            <summary>
            Provides support for async lazy initialization.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="isThreadSafe">if set to <c>true</c> make this instance usable concurrently by multiple threads.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.AsyncLazy`1.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext">
            <summary>
            This class represents a global context object passed to the script to be used by script programmer
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Services">
            <summary>
            Service container to be used throughout the process
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.MaxLogEntryCount">
            <summary>
            MaxLogEntryCount specifies the max number of log entries for the default logging helper.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ScriptProgressSink">
            <summary>
            External consumer for test esecution progress notifications
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#cctor">
            <summary>
            Static ctor. Instantiates service container
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress)">
            <summary>
            ctor
            </summary>
            <param name="sink">notification sink for script execution progress</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.IServiceProvider)">
            <summary>
            Initializes a new TaskExecutionContext instance.
            </summary>
            <param name="sink">notification sink for script execution progress or null.</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.String[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[])">
            <summary>
            Initializes a new TaskExecutionContext instance.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.String[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[],System.IServiceProvider)">
            <summary>
            Initializes a new TaskExecutionContext instance.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Types.Entity[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[])">
            <summary>
            ctor
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files as Guid/String pair</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Types.Entity[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[],System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files as Guid/String pair</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ServiceProvider">
            <summary>
            Gets a reference to the service provider that was specified at construction time.
            This reference may be null.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_serviceProvider">
            <summary>
            Holds a reference to the service provider that was specified at construction time.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ScriptProgress(System.Int16,System.Int16)">
            <summary>
            Execution progress report 
            </summary>
            <param name="percent">Current execution completeness, percent</param>
            <param name="nextPercentHint">Estimated execution completeness at the end of current execution phase, percent</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TaskProgress(System.Int16,System.Int16)">
            <summary>
            Execution progress report. Same as ScriptProgress.
            </summary>
            <param name="percent">Current execution completeness, percent</param>
            <param name="nextPercentHint">Estimated execution completeness at the end of current execution phase, percent</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.InputFiles">
            <summary>
            List of input IDEA files used by test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.OutputFiles">
            <summary>
            List of output IDEA files created by test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.PrimaryInputFile">
            <summary>
            Name of primary input file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.PrimaryOutputFile">
            <summary>
            Name of primary output file
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Parameter(System.String)">
            <summary>
            Returns execution parameter with a given name assigned to a primary input file
            </summary>
            <param name="name">Parameter's name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TableParameter(System.String,System.String)">
            <summary>
            Returns execution parameter with a given name assigned to an input file with a given name
            </summary>
            <param name="tableName">Table's name</param>
            <param name="parameterName">Parameter's name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.GlobalParameter(System.String,System.String)">
            <summary>
            Returns global parameter with a given name assigned to input file with specified alias
            </summary>
            <param name="inputFileAlias">Table's alias</param>
            <param name="parameterName">Parameter's name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If parameterName is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.GlobalParameters(System.String)">
            <summary>
            Returns list of global parametersassigned to input file with specified alias
            </summary>
            <param name="inputFileAlias">Table's alias</param>
            <returns>List of parameters in case input file with given alias exists; null otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Trace(System.String)">
            <summary>
            Simple trace method
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TestResultFiles">
            <summary>
            Gets a reference to the object that manages a collection of test result files.
            </summary>
            <remarks>This property is marked as virtual to allow a derived class to override the default behavior.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_testResultFiles">
            <summary>
            Holds a reference to the result files collection.
            Initialization: on-demand, see TestResultFiles
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Parameters">
            <summary>
            Gets a reference to an accessor for the primary input table's set of parameters.
            </summary>
            <remarks>An accessor is available also in case the test does not have any input tables.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_parameterAccessor">
            <summary>
            Holds a reference to the parameter accessor.
            Initialization: on-demand, see Parameters.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ExecutionStatus">
            <summary>
            Gets / sets a value that indicates how the macro has completed.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_executionStatus">
            <summary>
            Holds the macro execution status.
            Default value: MacroExecutionStatus.Failed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ProjectName">
            <summary>
            Gets / sets the name of the project.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null string.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_projectName">
            <summary>
            Holds the name of the project.
            Default value: string.Empty.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ServerProjectName">
            <summary>
            Gets / sets the name of the active server project. Has following format: "server_name\project_name"
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_serverProjectName">
            <summary>
            Holds the name of the server project.
            Default value: string.Empty.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IsServerTask">
            <summary>
            Determines if the current task is running on an IDEA server.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_isServerTask">
            <summary>
            Holds a value that indicates whether the current task is running on an IDEA server.
            Default value: false.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Log">
            <summary>
            Gets a reference to an object that provides logging functionality to SA routines and their executors.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null reference.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_loggingHelper">
            <summary>
            Holds a reference to a logging helper.
            Default value: null.
            Initialization: on-demand or by calling the setter of the property Log.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TestId">
            <summary>
            Gets the identifier of the test routine.
            </summary>
            <remarks>The property returns the B-representation (32 digits separated by hyphens and enclosed in braces) 
            of the Guid that is the identifier of the test routine.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.SetTestId(System.Guid)">
            <summary>
            Sets the identifier of the test routine associated with the execution context.
            </summary>
            <param name="testId">The identifier of the test routine.</param>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_testIdAsString">
            <summary>
            Stores the B-representation of the identifier of the test associated with the execution context.
            Default value: string.Empty.
            Initialization: SetTestId.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TestVersion">
            <summary>
            Gets the version information of the test routine.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null reference.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_testVersionAsString">
            <summary>
            Stores the version number of the test associated with the execution context.
            Default value: string.Empty
            Initialization: set_TestVersion
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.TestName">
            <summary>
            Gets the name of the test routine.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null reference.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_testName">
            <summary>
            Stores the name of the test routine that is associated with the execution context.
            Default value: string.Empty
            Initialization: set_TestName
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IsCancellationRequested">
            <summary>
            Determines if the current routine is to be canceled.
            </summary>
            <remarks>This property is marked as virtual to allow a derived class to override the default behavior.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_canceled">
            <summary>
            Holds a value that indicates whether the current task is to be canceled.
            Default value: false.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.MacroCommands">
            <summary>
            Gets a reference to an object that provides access to various IDEA-related functions.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_macroCommands">
            <summary>
            Holds a reference to a MacroCommands object.
            Default value: null.
            Initialization: on-demand (see MacroCommands' getter).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ExtendedCommands">
            <summary>
            Gets a reference to an object that provides access to extended, app-specific functions.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_extendedCommands">
            <summary>
            Holds a reference to a ExtendedCommands object.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Periods">
            <summary>
            Gets a reference to an object that exposes the period-related actual parameters of a test execution.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null reference.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_testPeriods">
            <summary>
            Holds a reference to an ITestPeriods object.
            Default value: null.
            Initialization: on-demand or by calling the setter of the property Periods.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.UserName">
            <summary>
            Gets / sets the Windows user name of the user who created the task.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null string.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_userName">
            <summary>
            Holds the name of the user who created the task.
            Default value: string.Empty.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Strings">
            <summary>
            Gets a reference to an object that provides read-only access to a routine's set of string resources.
            </summary>
            <exception cref="T:System.ArgumentNullException">If an attempt is made to assign a null reference.</exception>
            <remarks>The default value of the property is a reference to an object that accesses an empty set of string resources.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.m_stringAccessor">
            <summary>
            Holds a reference to an IRoutineStringAccessor object.
            Default value: null.
            Initialization: on-demand or by calling the setter of the property Strings.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IsDebugLicenseAvailable">
            <summary>
            Gets a value that specifies whether a debug license is available and valid for the currently running routine.
            This implementation returns always false.
            </summary>
            <remarks>This property is marked as virtual to allow a derived class to override the default behavior.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IdeaClient">
            <summary>
            Gets or sets a reference to the IDEA Client instance in the current execution context.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IntellectualPropertyOptions">
            <summary>
            Options related to intellectual property issues. 
            Thus accessible options have to be not very critical with respect to IP protection (e.g. those which can be set by end user). Otherwise, they have to be treated
            similar to IsDebugLicenseAvailable property
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="msecs">The number of milliseconds for which the thread is blocked.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.GetPhysicalInputFile(System.String)">
            <summary>
            Returns physical input file mapped to logical input file with a given alias
            </summary>
            <param name="logicalFileName">Input file's alias; empty alias designates the primary input file</param>
            <returns>Physical input file mapped to the given alias</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.InitialiteServerSpecifics">
            <summary>
            This method is supposed to initialize server-related information even for local execution, provided that server is connected
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.InputFilesContainsAlias(System.String)">
            <summary>
            Determines whether the collection of input files contains an element with the specified alias.
            </summary>
            <param name="aliasValue">The alias whose existence is tested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>If aliasValue is null, empty or if it consists only of white space chars,
            the method interprets the call as a request to resolve the primary input file.</para>
            </param>
            <returns>True, if the collection of input files contains an element with the specified 
            alias; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.InputFileByAlias(System.String)">
            <summary>
            Gets the name of input file with the specified alias.
            </summary>
            <param name="aliasValue">The alias whose corresponding input file name is requested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>If aliasValue is null, empty or if it consists only of white space chars,
            the method interprets the call as a request to resolve the primary input file.</para>
            <para>An exception is thrown if an input file with the 
            specified alias does not exist.</para>
            </param>
            <returns>The name input file with the specified alias.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If aliasValue is not found.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.InternalId">
            <summary>
            A.k.a. test's "short name"
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.AppWorkflowId">
            <summary>
            If the test is executed from within App Workflow, contains its ID
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.GetServiceById(System.String)">
            <summary>
            Gets the service object with the specified id.
            </summary>
            <param name="serviceId">A string containing the id of the service to get.</param>
            <returns>If found, a reference to the service with the specified id; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.ServiceIdToType(System.String)">
            <summary>
            Maps a service id to the service type.
            </summary>
            <param name="serviceId">A string containing the id of the service to map.</param>
            <returns>If found, the Type object of the service with the specified id;
            otherwise, null.</returns>
            <remarks>This implementation uses - if available - the service IServiceTypeResolver
            to lookup the type of the service.
            If IServiceTypeResolver is not available in ServiceProvider, the method 
            returns null.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object
            of type serviceType.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceType is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.UserCulture">
            <summary>
            Gets / sets a refernce to the current user's locale.
            </summary>
            <returns>A CultureInfo reference to the current user's locale or null.</returns>
            <remarks>The default value is null.
            <para>For a server-side context, this property should be set to the current user's locale 
            of the IDEA client.</para>
            <para>This property is used by the CalendarTableCreator.</para></remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.AppWorkflowID">
            <summary>
            Gets the ID of active App Workflow as string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext.IsAppWorkflowExecution">
            <summary>
            Determines if the current task is running in context of App Workflow.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine">
            <summary>
            TaskExecutionContextForDebuggableRoutine derives from TaskExecutionContext and provides
            the same functionality as its base class, with one exception: Its implementation of
            the property IsDebugLicenseAvailable returns always true.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress)">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified sink.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.IServiceProvider)">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified sink and
            service provider.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.String[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[])">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified attributes.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,System.String[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[],System.IServiceProvider)">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified attributes.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Types.Entity[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[])">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified attributes.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files as Guid/Name pairs</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Types.Entity[],System.String[],Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity[],System.IServiceProvider)">
            <summary>
            Initializes a new instance of type TaskExecutionContextForDebuggableRoutine with the specified attributes.
            </summary>
            <param name="sink">notification sink for script execution progress</param>
            <param name="inputFiles">list of audit test's input files as Guid/Name pairs</param>
            <param name="outputFiles">list of audit test's output files</param>
            <param name="execParameters">list of audit test's execution parameters</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContextForDebuggableRoutine.IsDebugLicenseAvailable">
            <summary>
            Gets a value that specifies whether a debug license is available and valid for the currently running routine.
            This implementation returns always true.
            </summary>
            
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute">
            <summary>
            Metadata attribute allowing localization of SA extensions
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.ID">
            <summary>
            Extension's unique ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.NameResourceId">
            <summary>
            Value specifying resource string containing localized name of SA extension. This value has a form of [ResourcesName].[StringID]
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.ExtensionType">
            <summary>
            Optional type of extension helping to distinguish between extensions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.Name">
            <summary>
            Localized name of SA extension. Calculated based on value of NameResourceId
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.Culture">
            <summary>
            Extension's culture
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.GetName(System.Type)">
            <summary>
            Returns localized name for a given SA extension type
            </summary>
            <param name="extension">Type of SA extension to get the name for</param>
            <returns>Extension's localized name</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.GetID(System.Type)">
            <summary>
            Returns ID for a given SA extension type
            </summary>
            <param name="extension">Type of SA extension to get ID for</param>
            <returns>Extension's ID</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.GetCulture(System.Type)">
            <summary>
            Returns Culture for a given SA extension type
            </summary>
            <param name="extension">Type of SA extension to get the culture for</param>
            <returns>Extension's culture</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.EnumExtensionIDs(System.String)">
            <summary>
            Enumerates all extensions within specified assembly providing a list of their types and IDs
            </summary>
            <param name="modulePath">Full path of assembly to explore</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.EnumExtensionsMetadata(System.String)">
            <summary>
            Enumerates all extensions' metadata attributes within specified assembly
            </summary>
            <param name="modulePath">Full path of assembly to explore</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionAttribute.GetExtensionCulture(System.String)">
            <summary>
            Returns culture info for specified extension assembly
            </summary>
            <param name="modulePath"></param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer">
            <summary>
            Simple plugin container using MS Extension Framework functionality
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.Recomposed">
            <summary>
            Event is fired each time the extensions' recomposition takes place
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.#ctor">
            <summary>
            Default ctor. The extension folder is by default current folder, patern is ".dll", no folder's watch started
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.#ctor(Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder[])">
            <summary>
            ctor accepting list of extension folders
            </summary>
            <param name="folders">list of extension folders</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.#ctor(Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainerConfiguration)">
            <summary>
            ctor accepting configuration object as parameter
            </summary>
            <param name="cfg">Container's configuration object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.GetExtensions``1">
            <summary>
            Retrieves extensions of a given type
            </summary>
            <typeparam name="T">type of extensions to retrieve</typeparam>
            <returns>List of extensions of a given type</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.Refresh">
            <summary>
            Performs refresh for all contained catalogs
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.Dispose">
            <summary>
            Dispose functionality
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainer.OnImportsSatisfied">
            <summary>
            Called automatically by MEF each time the imports get satisfied. In its turn, method fires Recomposed event
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainerConfiguration">
            <summary>
            Configuration class for Extensions Container
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainerConfiguration.ExtensionFolders">
            <summary>
            Collection of folders' pathes to look for extensions
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder">
            <summary>
            Description of folder where to look for extensions
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.#ctor(Audicon.SmartAnalyzer.Common.Types.KnownLocation,System.String,System.Nullable{System.Environment.SpecialFolder},System.String,System.Boolean,System.Boolean)">
            <summary>
            ctor specifying folder's parameters
            </summary>
            <param name="type">type of the location</param>
            <param name="path">folder's path</param>
            <param name="specialFolder">[optional] name of special folder</param>
            <param name="pattern">[optional] extensions' file pattern; default is "*.DLL"</param>
            <param name="watch">[optional] true to watch folder for changes; false otherwise; default is true</param>
            <param name="pathAbs">[optional] true if path specified above is absolute; false otherwise; default is false</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Type">
            <summary>
            name of special folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Path">
            <summary>
            Folders' path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.SpecialFolder">
            <summary>
            name of special folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Absolute">
            <summary>
            Specifies whether Path property is absolute or relative path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Pattern">
            <summary>
            Specifies the file names' pattren used to search for extensions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Watch">
            <summary>
            Specifies whether the container has to watch the folder's changes and refresh if changes take place
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.Create">
            <summary>
            Specifies whether the folder has to be created in case it does not exist
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.FullPath">
            <summary>
            Calculates the folder's full path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder.LookupCatalog">
            <summary>
            Creates MEF Directory Catalog for the folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolderCollection">
            <summary>
            Simple collection of extensions' folders
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolderCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element
            </summary>
            <param name="element">The System.Configuration.ConfigurationElement to return the key for</param>
            <returns>Name of extensions' folder</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1">
            <summary>
            Simple plugin container using MS Extension Framework functionality
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.ExtensionInstatiated">
            <summary>
            For test purposes only!!! Extension ctor may call this static method to inform container about extension's instatiation (not mandatory)
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.Recomposed">
            <summary>
            Event is fired each time the extensions' recomposition takes place
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.#ctor(Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionFolder[])">
            <summary>
            ctor accepting list of extension folders
            </summary>
            <param name="folders">list of extension folders</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.#ctor(Audicon.SmartAnalyzer.Common.Components.Extensions.ExtensionContainerConfiguration)">
            <summary>
            Configured ctor
            </summary>
            <param name="cfg">Containers configuration object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.#ctor(System.String)">
            <summary>
            ctor accepting the name of configuration section hich has to be within config file of executing assembly
            </summary>
            <param name="cfgSectionName">Container configuration section name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.GetExtensions``1">
            <summary>
            Retrieves extensions of a given type
            </summary>
            <typeparam name="T">type of extensions to retrieve</typeparam>
            <returns>List of extensions of a given type</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.Refresh">
            <summary>
            Performs refresh for all contained catalogs
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.EnumExtensions">
            <summary>
            This property returns lazy list of extensions plus their metadata
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.EnumExtensions(System.Func{`0,System.Boolean})">
            <summary>
            Enumerates extensions currently in container for requesting metadata and using filter callback
            </summary>
            <param name="filter">filter callback</param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.CurrentCulture">
            <summary>
            Culture used when recomposing the container
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.Dispose">
            <summary>
            Dispose functionality
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.Extensions.LazyExtensionContainer`1.OnImportsSatisfied">
            <summary>
            Called automatically by MEF each time the imports get satisfied. In its turn, method fires Recomposed event
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink">
            <summary>
            Implements a forwarding notification sink that can act as an IDEA client site.
            </summary>
            <remarks>
            In IDEA 9, ILocalScriptClient.SetClientSite fails if the object
            implementing ITaskProgress does not also implement ITaskCompletion.
            Therefore IdeaNotifySink implements also the interface ITaskCompletion.
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.NoOpSink">
            <summary>
            Gets a reference to a NOOP sink.
            </summary>
            <remarks>A NOOP sink's ClientTaskProgress cannot be set.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.#ctor">
            <summary>
            Initializes a new NOOP sink whose ClientTaskProgress cannot be set.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes a new instance of type IdeaNotifySink with the specified ITaskProgress interface.
            </summary>
            <param name="taskProgress">The optional ITaskProgress interface to which IdeaNotifySink forwards the calls on its
            own implementation of ITaskProgress.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.ClientTaskProgress">
            <summary>
            Gets / sets the caller-supplied ITaskProgress interface.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.m_clientTaskProgress">
            <summary>
            Holds the caller-supplied ITaskProgress interface;
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.m_clientTaskProgressIsSealed">
            <summary>
            A Boolean that specifies whether m_clientTaskProgress is sealed or not.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.m_clientTaskComplete">
            <summary>
            Holds the caller-supplied ITaskCompletion interface;
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.Completed(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bUserCanceled">true if user cancelled the task</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.Progress(System.Int16)">
            <summary>
            This method gets progress notifications from each individual operation (extraction, summarization etc) within the script.
            The value of operation's progress has to be combined with the absolute position of script's execution reported via 
            the ScriptProgress() method
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.Queued(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="TaskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.Standby(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="TaskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.Start(System.String)">
            <summary>
            Interface method implementation
            </summary>
            <param name="TaskName">Task Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.ShowProgressDialog(System.Boolean)">
            <summary>
            Called to instruct the sink to display or hide the progress dialog.
            </summary>
            <param name="bShow">A boolean value that indicates whether the sink 
            should show (true) or hide (false) the progress dialog.</param>
            <remarks>The method forwards the call to ClientTaskProgess, if one was 
            specified, otherwise the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.OpenedDatabase(System.String)">
            <summary>
            Interface method's implemenation.
            </summary>
            <param name="databaseName">Value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.ScriptProgress(System.Int16,System.Int16)">
            <summary>
            This method is supposed to be called directly from script. It indicates the script's current execution progress
            </summary>
            <param name="percent">Script's current execution progress value</param>
            <param name="nextPercentHint">Hint on possible next progress value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.ScriptLog(System.String)">
            <summary>
            Method is required in some scenarious
            </summary>
            <param name="logStr"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.AppendVBCode(System.String)">
            <summary>
            Method is required in some scenarious
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.IdeaNotifySink.DisableRunInScriptEditor(System.Boolean)">
            <summary>
            Interface method implementation
            </summary>
            <param name="bDisableRun">Flag</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink">
            <summary>
            Implements the interface IIDEAScriptEngineEvents. 
            Contains also code for connecting a sink of this type to an events source.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.#ctor(IDEASCRIPTCTRLLib.ScriptEngine)">
            <summary>
            Initializes a new ScriptEngineNotifySink object with the specified events source object.
            To connect the sink to the object, use the function Connect.
            </summary>
            <param name="scriptEngine">The ScriptEngine object to which the sink will be connected.
            An exception is thrown if scriptEngine is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If scriptEngine is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.Connect">
            <summary>
            Connects this sink to the object specified in the constructor.
            An exception is thrown if the object is already connected.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the object is already connected.</exception>
            <remarks>The caller should use Dispose to disconnect the sink from the object.</remarks>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.ScriptIsRunning">
            <summary>
            The handler gets invoked when the event ScriptIsRunning occurs.
            </summary>            
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.ScriptOutput">
            <summary>
            The handler gets invoked when the event ScriptOutput occurs.
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.UpdateDebugInfo">
            <summary>
            The handler gets invoked when the event UpdateDebugInfo occurs.
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.YieldCallback">
            <summary>
            The handler gets invoked when the event YieldCallback occurs.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.Internal.ScriptEngineNotifySink.Dispose">
            <summary>
            Disconnects the current sink from the events source object and releases any resources associated with it.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor">
            <summary>
            ScriptExecutor provides functionality for executing IDEA macros in both client and server environments.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptIsAboutToRun">
            <summary>
            Callback called each time prior to running the script
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptErrorOccured">
            <summary>
            Callback called in case execution error occures
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptClient">
            <summary>
            If set, this property is used as external Script Client, otherwise, LocalScriptClient instance is internaly created for this purpose
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.IsSimplifiedLocalExecution">
            <summary>
            If this property is set to true, local scripts are executed in simplified mode based on Client.RunScriptCodeWithArgs() method
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.#ctor">
            <summary>
            Initializes a new instance of type ScriptExecutor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes a new instance of type ScriptExecutor with the specified ITaskProgress interface.
            </summary>
            <param name="taskProgress">The ITaskProgress interface that is to received task progress notifications.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.#ctor(COMMONIDEACONTROLSLib.ITaskProgress,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Initializes a new instance of type ScriptExecutor with the specified ITaskProgress and IExecutionContext interfaces.
            </summary>
            <param name="taskProgress">The ITaskProgress interface that is to received task progress notifications.
            If the caller does not want to receive progress notifications, this reference can be null.</param>
            <param name="executionContext"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.Finalize">
            <summary>
            Finalizes an instance of type ScriptExecutor.
            </summary>
            <remarks>The finalizer calls Dispose(false).</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.m_disposed">
            <summary>
            Specifies if the object was disposed. 
            True iff the object was disposed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.IsDisposed">
            <summary>
            Gets a value that specifies whether the object is disposed.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.VerifyNotDisposed">
            <summary>
            Verfies that the object is not disposed.
            Returns only if the object is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the object was disposed.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.Dispose">
            <summary>
            Closes the current script executor and releases any resources associated with it.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.Dispose(System.Boolean)">
            <summary>
            Implements the dispose functionality.
            </summary>
            <param name="disposing">Specify if the function is being called from Dispose or from the finalizer.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptExecutorMessages">
            <summary>
            Gets a read-only collection of messages collected during the execution of script.
            The return value will never be null.
            </summary>
            <remarks>The return value will never be null.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.m_executorMessages">
            <summary>
            Stores the messages collected during the execution of a script.
            The default value is an empty list.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.AddToExecutorMessages(System.String)">
            <summary>
            Adds a string to the collection of messages collected during the execution of a script.
            </summary>
            <param name="message">The string to add. Null strings can be added to the collection.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ClearExecutorMessages">
            <summary>
            Removes all elements from the collection of messages.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ExecutorMode">
            <summary>
            Describes the states in which the Executor can be.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ExecutorMode.Idle">
            <summary>
            An executor is Idle when an Execute call is not in progress.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ExecutorMode.Active">
            <summary>
            An executor is Active when an Execute call is in progress.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.m_executorMode">
            <summary>
            Stores the state of the executor.
            It can be one of the ExecutorMode values. Default: 0 (Idle).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ActivateExecutor">
            <summary>
            Activates the executor. An InvalidOperationException is thrown, if the executor is already active.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ReleaseExecutor">
            <summary>
            Releases the executor. Transitions to 'Idle'.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.Execute(System.String)">
            <summary>
            Executes the specified IDEA script locally. 
            </summary>
            <param name="script">The IDEA script to execute. An exception is thrown if script is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If script is null.</exception>
            <exception cref="T:System.ArgumentException">If script is empty.</exception>
            <remarks>Only one call to Execute can be in progress on an instance of type ScriptExecutor.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.Execute(System.String,System.Boolean)">
            <summary>
            Executes the specified IDEA script with explicitly specifying server-side or client-side execution.
            The execution is compatible with both client and server environments.
            </summary>
            <param name="script">The IDEA script to execute. An exception is thrown if script is null or empty.</param>
            <param name="onServer">Flag specifying server-side or client-side execution</param>
            <exception cref="T:System.ArgumentNullException">If script is null.</exception>
            <exception cref="T:System.ArgumentException">If script is empty.</exception>
            <remarks>Only one call to Execute can be in progress on an instance of type ScriptExecutor.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ExecuteImplementation(System.String,System.Boolean)">
            <summary>
            Implements the Execute function.
            </summary>
            <param name="script">The IDEA script to execute. An exception is thrown if script is null.</param>
            <param name="onServer">Flag specifying server-side or client-side execution</param>
            <exception cref="T:System.ArgumentNullException">If script is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ExecuteLocalSimplifiedImplementation(System.String)">
            <summary>
            This is simplified execution method used for local execution. Using scriptClient.RunScriptCodeWithArgs () allows proper hooking
            og script execution events to IDEA main frame; otherwise, effects like the one described in Issie #17930 may occur
            </summary>
            <param name="script">The IDEA script to execute. An exception is thrown if script is null.</param>
            <exception cref="T:System.ArgumentNullException">If script is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.CreateLocalScriptClient(System.Object,System.Boolean)">
            <summary>
            If property ScriptClient is set, the method just returns it.
            Otherwise, the method creates and initializes a new Idea LocalScriptClient.
            </summary>
            <param name="clientSite">The optional client site object to pass to the new object's SetClientSite function.
            If specified, the object must implement at least the interfaces ITaskProgress and ITaskCompletion. 
            This is an IDEA 9 requirement. However, the function does not check if the object implements these interfaces.
            </param>
            <param name="onServer">Flag specifying server-side or client-side execution</param>
            <returns>A new instance of type LocalScriptClient.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptOutputHandler(System.String)">
            <summary>
            Handles IDEA ScriptEngine's ScriptOutput event.
            </summary>
            <param name="values"></param>
            <remarks>This function adds values to ScriptExecutorMessages.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ScriptIsRunningHandler(System.Boolean)">
            <summary>
            Handles IDEA ScriptEngine's ScriptIsRunning event.
            </summary>
            <param name="isRunning"></param>
            <remarks>This function does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.UpdateDebugInfoHandler(System.String)">
            <summary>
            Handles IDEA ScriptEngine's UpdateDebugInfo event.
            </summary>
            <param name="values"></param>
            <remarks>This function does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.YieldCallbackHandler(System.UInt32)">
            <summary>
            Handles IDEA ScriptEngine's YieldCallback event.
            </summary>
            <param name="lineNumber"></param>
            <remarks>This function does nothing.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.ClientTaskProgress">
            <summary>
            Gets the caller-supplied ITaskProgress interface.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutor.m_clientTaskProgress">
            <summary>
            Holds the caller-supplied ITaskProgress interface;
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutorMessageCollection">
            <summary>
            ScriptExecutorMessageCollection represents a read-only collection of messages collected during the execution of a script.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutorMessageCollection.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of type ScriptExecutorMessageCollection that is a read-only wrapper around a list.
            </summary>
            <param name="list">The list to wrap. An exception is thrown, if the list is null.</param>
            <exception cref="T:System.ArgumentNullException">If list is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ScriptExecution.ScriptExecutorMessageCollection.ToString">
            <summary>
            Returns a string representation of the items in the collection. The items are separated by CRLF.
            </summary>
            <returns>A string containing the items in the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler">
            <summary>Provides a task scheduler that dedicates a thread per task.</summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler.#ctor(System.Threading.ApartmentState,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler"/> class.
            </summary>
            <param name="apartmentState">State of the apartment.</param>
            <param name="allowExecuteInline">if set to <c>true</c> [allow execute inline].</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks currently scheduled to this scheduler.</summary>
            <remarks>This will always return an empty enumerable, as tasks are launched as soon as they're queued.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Starts a new thread to process the provided task.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Components.ThreadPerTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException">
            <summary>
            Exception class related to SA collaboration
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.CollaboratorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException">
            <summary>
            The exception that is thrown to indicate that a specified database column does not exist.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor">
            <summary>
            Initializes a new empty ColumnNotFoundException with a default message.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new ColumnNotFoundException with a specified message.
            </summary>
            <param name="message">A string that explains the reason for the exception.
            If null, a standard message will be used.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new ColumnNotFoundException with a specified message and a reference 
            to the exception that is the cause of the new exception.
            </summary>
            <param name="message">A string that explains the reason for the exception.
            If null, a standard message will be used.</param>
            <param name="innerException">A reference to the exception that is the cause of the new exception or null.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new ColumnNotFoundException with a specified message, the name of the
            database and the name of the column that was not found.
            </summary>
            <param name="message">A string that explains the reason for the exception.
            If null, a standard message will be used.</param>
            <param name="databaseName">The name of the database or null.</param>
            <param name="columnName">The name of the column or null.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new ColumnNotFoundException with a specified message, the name of the
            database, the name of the column that was not found and a reference 
            to the exception that is the cause of the new exception.
            </summary>
            <param name="message">A string that explains the reason for the exception.
            If null, a standard message will be used.</param>
            <param name="databaseName">The name of the database or null.</param>
            <param name="columnName">The name of the column or null.</param>
            <param name="innerException">A reference to the exception that is the cause of the new exception or null.</param>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.ColumnNotFoundException_DatabaseName">
            <summary>
            This is the name under which DatabaseName is stored in 
            SerializationInfo during serialization / deserialization.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.ColumnNotFoundException_ColumnName">
            <summary>
            This is the name under which ColumnName is stored in 
            SerializationInfo during serialization / deserialization.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a new ColumnNotFoundException.
            </summary>
            <param name="info">A SerializationInfo reference.</param>
            <param name="context">A StreamingContext.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo 
            with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.DatabaseName">
            <summary>
            Gets the name of the database in which the column was not found.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.ColumnName">
            <summary>
            Gets the name of the column that was not found.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.ToString">
            <summary>
            Converts the exception to a string.
            </summary>
            <returns>A string containing Type.FullName, Message, the database and column names, InnerException and StackTrace.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ColumnNotFoundException.GetMessage(System.String,System.String,System.String)">
            <summary>
            Gets the error message that describes the reason for the exception.
            </summary>
            <param name="message">The optional user-supplied message.</param>
            <param name="databaseName">The optional database name.</param>
            <param name="columnName">The optional column name.</param>
            <returns>Message if message is not null; othwerwise, a default language-dependent message.
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">
            <summary>
            Custom exception raised when the given value is not between min and max range
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="minSize">Minimum value allowed</param>
            <param name="maxSize">Maximum value allowed</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.Int64,System.Int64)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="minSize">Minimum value allowed</param>
            <param name="maxSize">Maximum value allowed</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="minSize">Minimum value allowed</param>
            <param name="maxSize">Maximum value allowed</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.MaxSize">
            <summary>
            Maximum value allowed
            For string: maximum length of the string
            For numeric values: maximum number (long)
            For date values: maximum date in ticks
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.MinSize">
            <summary>
            Minimum value allowed
            For string: minimum length of the string
            For numeric values: minimum number (long)
            For date values: minimum date in ticks
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException.Message">
            <summary>
            Overrides the messahe info by adding the own range info
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException">
            <summary>
            Custom error raised when a duplicate Id already exists in the database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.#ctor(System.String,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="objectType">type of the object</param>
            <param name="id">id of the object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.ObjectType">
            <summary>
            Type of the object that raises the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.Id">
            <summary>
            Id of the object that raises the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException">
            <summary>
            Custom error raised when a duplicate name already exists in the database for that language and owner
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="objectType">type of the object</param>
            <param name="id">id of the object</param>
            <param name="name">the duplicated name</param>
            <param name="language">language code</param>
            <param name="owner">owner name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.ObjectType">
            <summary>
            Type of the object that raises the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.Id">
            <summary>
            Id of the object that raises the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.Name">
            <summary>
            Value of the name field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.LanguageCode">
             <summary>
            Language code field
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.OwnerName">
             <summary>
            Owner name field
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">
            <summary>
            Custom error raised when some string contains an invalid character
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.InvalidCharacter">
            <summary>
            Represents the char that is found as invalid
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException.Message">
            <summary>
            Overrides the message info by adding the invalid char found
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            <summary>
            Custom error raised when an object was not found (in database for example)
            specifying type name of the object and id (if exists)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.#ctor(System.String)">
            <summary>
            Default constructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Constructor that fills the internal data
            </summary>
            <param name="typeName">type name of the object that was not found</param>
            <param name="id">id of the object (if exists)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.TypeName">
            <summary>
            Name of the type of the object not found
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.Id">
            <summary>
            ID of the object that was not found (as string)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException">
            <summary>
            Exception class related to results protocolling
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.ResultProtocolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException">
            <summary>
            Custom error raised when signature is not validated for an object
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Types.EntityType,Audicon.SmartAnalyzer.Common.Types.VerificationType,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="id">id of the object</param>
            <param name="type">type of the object</param>
            <param name="verificationType">type of validation that was performed</param>
            <param name="error">The actual error found</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.Type">
            <summary>
            Type of the object not found
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.Id">
            <summary>
            ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.VerificationType">
            <summary>
            Type of validation that was performed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.Error">
            <summary>
            The actual error found furing validation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.SignatureViolationException.ToString">
            <summary>
            Overrider for ToString
            </summary>
            <returns>Customized error description</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException">
            <summary>
            Custom error raised when one tag is defined as mandatory for n input file defined as having optional tagging
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="testId">id of the test</param>
            <param name="inputFileAlias">alias of the input file</param>
            <param name="tagId">id of the tag</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.TestId">
            <summary>
            Id of the test that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.InputFileAlias">
            <summary>
            Alias of the input file that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.TagId">
            <summary>
            Id of the tag that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagMandatoryNotAllowedException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException">
            <summary>
            Custom error raised when tags are set for an input file that doesn't suppose to have tags
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.#ctor(System.Guid,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="testId">id of the test</param>
            <param name="inputFileAlias">alias of the input file</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.TestId">
            <summary>
            Id of the test that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.InputFileAlias">
            <summary>
            Alias of the input file that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotAllowedException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException">
            <summary>
            Custom error raised when tags are not set for an input file that suppose to have tags
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.#ctor(System.Guid,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="testId">id of the test</param>
            <param name="inputFileAlias">alias of the input file</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.TestId">
            <summary>
            Id of the test that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.InputFileAlias">
            <summary>
            Alias of the input file that raised the error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.TagsNotDefinedException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException">
            <summary>
            Custom error raised when an object has a different version than the expected version for which the code was done
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.#ctor(System.String)">
            <summary>
            Default contructor with message
            </summary>
            <param name="message">message to be sent to the consumer</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Contructor that fills the internal data
            </summary>
            <param name="objectName">type name of the object that was checked</param>
            <param name="expectedVersion">expected version as string</param>
            <param name="foundVersion">version received from object as string</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal serialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.ObjectName">
            <summary>
            Name of the object for which the version is compared
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.ExpectedVersion">
            <summary>
            Expected version for the given object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.FoundVersion">
            <summary>
            Found version for the given object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Exceptions.WrongVersionException.Message">
            <summary>
            Overrides the message info by adding the internal data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow">
            <summary>
            Interface for app start workflow as exposed to SA code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.Name">
            <summary>
            App name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.Image">
            <summary>
            App image
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.Description">
            <summary>
            App description
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.Version">
            <summary>
            App version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.ExpirationDate">
            <summary>
            App expiration date
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.AvailableItems">
            <summary>
            App child content objects
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.ExternalDescriptions">
            <summary>
            App external descriptions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.StandardLinksMask">
            <summary>
            Flags mask specifying visible standard links
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.Actions">
            <summary>
            App start workflow actions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflow.IsIdle">
            <summary>
            Specifies whether there are no active actions, either scheduled or under execution
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflowCustomAction">
            <summary>
            Basic interface that all App Start Workflow custom action implementation classes have to expose
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.IAppStartWorkflowCustomAction.Execute(Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext,System.String)">
            <summary>
            Custom action entry point method
            </summary>
            <param name="context"></param>
            <param name="commandLine"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.ICompositeAppStartWorkflow">
            <summary>
            Interface for composite app start workflow as exposed to SA code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppStartWorkflow.ICompositeAppStartWorkflow.Descriptions">
            <summary>
            List of descriptions of apps within the composite. Each single element includes description body (byte[]), description type and the header
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction">
            <summary>
            Interface for workflow basic action as exposed to SA code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Index">
            <summary>
            Action's index
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.ExecutionState">
            <summary>
            Last execution state
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Error">
            <summary>
            Comment on action's execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Started">
            <summary>
            Execution start time
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Finished">
            <summary>
            Execution finish time
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.ProcessingState">
            <summary>
            Processing state
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Comment">
            <summary>
            User specific comment
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.AppWorkflow.IAppStartWorkflowAction.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CaseAdmin.IAuditFolderDataAccessor">
            <summary>
            The interface IAuditFolderDataAccessor implements COM-visible collection of audit folder metadata objects
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CaseAdmin.IAuditFolderDataAccessor.Item(System.Int32)">
            <summary>
            Gets the data of the audit folder specified by index within the list.
            </summary>
            <param name="index">The index of the audit folder whose data is requested.</param>
            <returns>The data of the specified audit folder.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CaseAdmin.IAuditFolderDataAccessor.IndexOf(System.String)">
            <summary>
            Retrives the index of audit folder specified by its name.
            </summary>
            <param name="auditFolderName">The name of the audit folder whose index is requested.</param>
            <param>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</param>
            <param>An exception is thrown if the name is null.</param>
            <returns>Index of audit folder, if the list of folder metadata objects contains an audit folder with the specified name; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">If auditFolderName is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CaseAdmin.IAuditFolderDataAccessor.Count">
            <summary>
            Retrieves the length of the list of folder metadata objects.
            </summary>
            <returns>Length of the list of folder metadata objects.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CaseAdmin.IAuditFolderDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.HssCollectionBase">
            <summary>
            The interface HssCollectionBase is a redeclaration of the interface AFG_HSS._Collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.HssCollectionBase.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>
            An System.Collections.IEnumerator object that can be used to iterate through 
            the collection.
            </returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.HssCollectionBase.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext">
            <summary>
            ICirExecutionContext is the interface from which all other CIR execution context interfaces derive.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.AbortImport">
            <summary>
            Gets / sets a value that instructs the importer to abort the task.
            </summary>
            <remarks>Default value: false</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.ImportFiles">
            <summary>
            Gets a reference to the collection of file descriptors of the current CIR or extension.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.Errors">
            <summary>
            Gets a reference to the collection of errors.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.UserData">
            <summary>
            Gets a reference to a dictionary that can be used to store user-definable data for the current CIR execution. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.Messages">
            <summary>
            Gets a reference to the collection of messages that are to be displayed in the message window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.AccountNumberLength">
            <summary>
            Gets or sets the length for account number columns. The default value is 0.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.CirOfficer">
            <summary>
            Gets the name of the person who should be contacted in case specific tables of a CIR have less or more columns as expected.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.HelpFilesDirectory">
            <summary>
            Gets the path where CIR help files are stored.
            The path should have a backslash at the end.
            It will be used within dialog macros.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.IsServerImportTask">
            <summary>
            Gets a value that indicates whether the IDEA databases are located on the server.
            </summary>
            <remarks>This property does not have always the same value as the property IsServerTask.
            Certain subtasks of a CIR do not run on IDEA Server (e.g., dialog tasks) and therefore 
            IsServerTask will always be false for them. This property tells the caller whether the 
            IDEA databases that were imported by the running CIR are located on the server or not.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.ParentWindowHandle">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.HostSynchronizationContext">
            <summary>
            Gets the SynchronizationContext of the host.
            </summary>
            <remarks>The HostSynchronizationContext is used by the executor or by a 
            CIR subtask to implement modal dialog boxes.
            <para>This reference can be null.
            For a server task this reference is always null.
            </para>
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.CommandLine">
            <summary>
            Gets the command line (expanded, if the task has requested the expansion of environment variables) that was assigned to the task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.DataPreparationOnlyMode">
            <summary>
            Gets a value that indicates whether the CIR is being executed only to prepare data.
            </summary>
            <remarks>DataPreparationOnlyMode is true if and only if the CIR is being executed to prepare data that was 
            imported in another session.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.SubtaskType">
            <summary>
            Gets a value that specifies the type of the current CIR subtask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.ParentWindowHandle32">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.ParentWindowHandleAsString">
            <summary>
            Gets the handle of the parent window as a string formatted using the InvariantCulture.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.DataReturnMode">
            <summary>
            Gets a value that indicates whether the CIR's data import is based on the response to a data request.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext.GetRequestedTableGroupIdentifiers">
            <summary>
            If DataReturnMode is true, the method gets an array with the identifiers of the requested table groups; otherwise
            the method returns an empty array.
            </summary>
            <returns>An array containing the identifiers of the requested table groups. 
            The method returns an empty array if DataReturnMode is false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext2">
            <summary>
            ICirExecutionContext2 extends ICirExecutionContext with service-provider-like functionality.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext2.GetServiceById(System.String)">
            <summary>
            Gets the service object with the specified id.
            </summary>
            <param name="serviceId">A string containing the id of the service to get.</param>
            <returns>If found, a reference to the service with the specified id; otherwise, null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext3">
            <summary>
            ICirExecutionContext3 extends ICirExecutionContext with new properties and methods.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext3.SharedUserData">
            <summary>
            Gets a reference to a dictionary that can be used to store user-definable persistent data for the current CIR 
            and all its active extensions. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext3.TempUserData">
            <summary>
            Gets a reference to a dictionary that can be used to store user-definable non-persistent data for the current CIR's or 
            extension's subtasks. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext3.SharedTempUserData">
            <summary>
            Gets a reference to a dictionary that can be used to store user-definable non-persistent data for the current CIR 
            and all its active extensions. 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirMessageBoxService">
            <summary>
            ICirMessageBoxService provides a GUI framework-agnostic interface for displaying message boxes during the execution of a CIR.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirMessageBoxService.DoDisplayMessageBox(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Displays a message box in front of the window specified in the
            execution context.
            </summary>
            <param name="context">A reference to the current CIR execution context.
            An exception is thrown if this reference is null.</param>
            <param name="message">A string containing the message to display.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.InvalidOperationException">If context.IsServerTask is true.</exception>
            <remarks>The method displays a message box in the specified execution context's SynchronizationContext. 
            The method uses the name of the current routine (context.TestName)
            as the caption of the message box and displays the MessageBoxButton.OK.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettings">
            <summary>
            ICirWizardPageSettings is an interface that provides access to the settings of a CIR Wizard page.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettings.Inputs">
            <summary>
            Gets a reference to a case-insensitive dictionary that can be used to store the actual parameter values
            of the page.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettings.PageId">
            <summary>
            Gets the identifier of the page.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettings.Enabled">
            <summary>
            Gets / sets a boolean that specifies whether the page is enabled or not.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettingsService">
            <summary>
            ICirWizardPageSettingsService provides an interface for accessing the settings of the CIR Wizard pages.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettingsService.GetCirWizardPageSettings(System.String)">
            <summary>
            Gets the settings object of the CIR wizard page with the specified id.
            </summary>
            <param name="pageId">A string containing the id of the CIR wizard page
            whose settings object is requested.</param>
            <returns>If found, an ICirWizardPageSettings reference to the specified CIR wizard page settings object; 
            otherwise, null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IDataPreparationContext">
            <summary>
            IDataPreparationContext is an interface to an execution context that is passed on to the data preparation task of a CIR.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IDialogTaskContext">
            <summary>
            IDialogTaskContext is an interface to an execution context that is passed on to a dialog task of a CIR.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IDialogTaskContext.ParametersOnlyMode">
            <summary>
            Gets a value that indicates whether the CIR is being executed only to edit the parameters.
            </summary>
            <remarks>If ParametersOnlyMode is true, the CIR is being executed only to edit the parameters.
            In this mode, only the dialog task is being executed.
            </remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IError">
            <summary>
            The interface IError offers access to an object that describes an error.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IError.Description">
            <summary>
            Gets / sets the description of the error.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IError.Number">
            <summary>
            Gets / sets the error number.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IError.Source">
            <summary>
            Gets / sets the error source.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors">
            <summary>
            The interface IErrors provides methods for managing a collection of Error objects.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors.Add(System.Int32,System.String,System.String)">
            <summary>
            Adds a new error at the end of the list.
            </summary>
            <param name="Number">The error number.</param>
            <param name="Description">The error description. Can be null.</param>
            <param name="Source">The error source. Can be null.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors.Item(System.Int32)">
            <summary>
            Gets the value at the specified position.
            </summary>
            <param name="Index">The zero-based index to read.</param>
            <returns>The value at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If Index is outside the allowable range of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IErrors.Clear">
            <summary>
            Removes all values from the list.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMessagesCollector">
            <summary>
            The interface IMessagesCollector collects messages that are to be displayed in the message window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMessagesCollector.Name">
            <summary>
            Gets / sets the name of the collection of messages.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMessagesCollector.MessageGroups">
            <summary>
            Gets an enumerator for the list of message groups.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMessagesCollector.Add(System.String,System.String,System.String)">
            <summary>
            Adds a message to a new anonymous group at the end of the list or to a group with the 
            specified name, or changes the title of a specified group.
            </summary>
            <param name="message">The message to be added.
            The message is ignored if it is null or empty.
            </param>
            <param name="groupTitle">An optional group title. The group title is ignored if
            it is null or empty.</param>
            <param name="groupName">An optional message group name.
            If the group name is null or empty or if it consists only of white-space characters, 
            a new anonymous message group is added at the end of the list, but only if the title 
            or the message are not null or empty.
            If the group name is not null or empty or if it does not consist only of white-space 
            chars and if the title and the message are not both null or empty, then the function 
            adds a new message group with the specified name at the end of the list, if one with
            the given name does not already exist (the function uses the OrdinalIgnoreCase comparer).
            The function adds the message, if not null or empty, at the end of the list of messages 
            of the target group (i.e., the newly added group or the one with the specified name)
            and sets the title of the target group, if the specified title is not null or empty.
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMessagesCollector.Clear">
            <summary>
            Removes all groups and messages from the collector.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMoveImportedFilesToFolderTask">
            <summary>
            The interface IMoveImportedFilesToFolderTask provides access to the properties and methods of task that moves imported files to another folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMoveImportedFilesToFolderTask.Add(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2,System.String)">
            <summary>
            Adds a move operation to the task.
            </summary>
            <param name="importFile">An ISimpleImportFile2 reference to the imported database to be moved.
            An exception is thrown if this reference is null.
            An exception is thrown if the import file does not support moving to another folder (that
            is, import.SupportsMovingDatabaseToFolder is false).</param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the move operation does nothing.
            If a database with the same name already exists in the destination folder,
            the operation tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">If importFile is null.</exception>
            <exception cref="T:System.NotSupportedException">If the specified import file 
            does not support moving the database.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMoveImportedFilesToFolderTask.PerformTask">
            <summary>
            Executes the task and resynchronizes the names of the imported databases.
            </summary>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPartialImportContext">
            <summary>
            IPartialImportContext is an interface to an execution context that is passed on to the partial import task of a CIR.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPartialImportContext2">
            <summary>
            IPartialImportContext2 is an interface to an execution context that is passed on to the partial import task of a CIR.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPartialImportContext2.NewMoveImportedFilesToFolderTask">
            <summary>
            Creates a new MoveImportedFilesToFolderTask object that can be used to move imported files to another folder.
            </summary>
            <returns>An IMoveImportedFilesToFolderTask reference.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPartialImportContext3">
            <summary>
            IPartialImportContext3 is an interface to an execution context that is passed on to the partial import task of a CIR.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPartialImportContext3.RegisterDatabase(System.String,System.String)">
            <summary>
            Registers a database with the CIR's collection of imported databases.
            </summary>
            <param name="databaseName">A string containing the name of the database to register.
            Leading and trailing spaces are ignored.
            <para>An exception is thrown if this name is null or empty, or if the database does not exist.</para></param>
            <param name="databaseAlias">A string containing the alias under the which the database will be
            registered with the CIR's collection of imported databases or null. If null or empty,
            the application will generate an unique alias.
            <para>An exception is thrown if the CIR's ImportFiles (note: the collection of imported databases) already contains an 
            element with the same alias (note: the comparison is case insensitive). However, an exception exists:
            If the registration is performed by a CIR extension and the proposed alias was inherited from the main routine.
            In this case, the entry that was inherited from the main routine will be replaced with the entry registered by the extension.</para></param>
            <returns>A ISimpleImportFile2 reference to the object in ImportFiles that holds information about the database.</returns>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty or if databaseAlias is not null or empty and an element with the same
            alias already exists in the routine's ImportFiles collection.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the database does not exist.</exception>
            <remarks>The registration may change the reference to the collection of imported databases. If the registration succeeded, the caller should requery the context object
            for the new ImportFiles collection.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext">
            <summary>
            IPreIndexXmlImportDataPreparationContext is an interface to an execution context that is passed on to the pre-macros of CIRs that import data from index.xml packages.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext.IndexXml">
            <summary>
            Gets / sets the name of the index.xml file that describes the data package to be imported.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext.BaseFolder">
            <summary>
            Gets / sets the base folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext.ReplaceValues">
            <summary>
            Gets a reference to an object that manages the list of replace-values for parmeterized search patterns.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext2">
            <summary>
            IPreIndexXmlImportDataPreparationContext2 is an interface to an execution context that is passed on to the pre-macros of CIRs that import data from index.xml packages.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext2.AuditPeriodStart">
            <summary>
            Gets / sets the audit period's start date.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext2.AuditPeriodEnd">
            <summary>
            Gets / sets the audit period's end date.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext2.AuditPeriodBYStart">
            <summary>
            Gets / sets the start date of the period's business year.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IPreIndexXmlImportDataPreparationContext2.ImportFolder">
            <summary>
            Gets / sets the path to the import folder (full path for local projects, relative path for server projects).
            </summary>
            <retuns>A string containing the fully-qualified name of the import folder, if the import targets a local IDEA project;
            null, empty or a relative path, if the target is an IDEA Server project.</retuns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.RegisterDatabaseResponse">
            <summary>
            Contains the response of a database registration request.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.RegisterDatabaseResponse.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles)">
            <summary>
            Initializes a new RegisterDatabaseResponse with a reference to the newly registered object
            and a reference to the CIR's collection of imported databases that contains the newly registered object.
            </summary>
            <param name="importFile">An ISimpleImportFile2 reference.</param>
            <param name="importFiles">An ISimpleImportFiles reference.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.RegisterDatabaseResponse.ImportFile">
            <summary>
            Gets sets a reference to the object that represents the newly registered object
            in the CIR's collection of imported databases.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.RegisterDatabaseResponse.ImportFiles">
            <summary>
            Gets a reference to the CIR's collection of imported databases that contains the newly registered object.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IRegisterDatabaseService">
            <summary>
            IRegisterDatabaseService provides an interface to a service that registers databases with a CIR's collection of imported databases.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IRegisterDatabaseService.RegisterDatabase(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String,System.String)">
            <summary>
            Registers a database with the CIR's collection of imported databases.
            </summary>
            <param name="sender">An ICirExecutionContext reference to the CIR execution context in which the
            registration request occurred.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="databaseName">A string containing the name of the database to register.
            Leading and trailing spaces are ignored.
            <para>An exception is thrown if this name is null or empty, or if the database does not exist.</para></param>
            <param name="databaseAlias">A string containing the alias under the which the database will be
            registered with the CIR's collection of imported databases or null. If null or empty,
            the application will generate an unique alias.
            <para>An exception is thrown if the CIR's ImportFiles (note: the collection of imported databases) already contains an 
            element with the same alias (note: the comparison is case insensitive). However, an exception exists:
            If the registration is performed by a CIR extension and the proposed alias was inherited from the main routine.
            In this case, the entry that was inherited from the main routine will be replaced with the entry registered by the extension.</para></param>
            <returns>A RegisterDatabaseResponse that contains a reference to the new ImportFiles collection and an ISimpleImportFile2 reference to the element 
            of the new ImportFiles collection that represents the specified database.</returns>
            <exception cref="T:System.ArgumentNullException">If sender or databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty or if databaseAlias is not null or empty and an element with the same
            alias already exists in the routine's ImportFiles collection.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the database does not exist.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues">
            <summary>
            The interface IReplaceValues can be used by a preliminary task to manage
            the collection of values for the indexed placeholders of a CIR whose import 
            file descriptors have parameterized search patterns.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues.Item(System.Int32)">
            <summary>
            Gets the value at the specified one-based position.
            </summary>
            <param name="Index">The one-based index to read.</param>
            <returns>The value at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If Index is outside the allowable range of values.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues.Count">
            <summary>
            Gets the number of values in the list.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues.Add(System.String)">
            <summary>
            Adds the specified value at the end of the list.
            </summary>
            <param name="ReplaceValue">The value to add. The value can be null.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues.GetEnumerator">
            <summary>
            Returns an enumerator for the list of values.
            </summary>
            <returns>An IEnumerator for the list of values.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IReplaceValues.Clear">
            <summary>
            Removes all values from the list.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile">
            <summary>
            The interface ISimpleImportFile provides access to an alias and to its associated database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.Alias">
            <summary>
            Gets the alias of the database.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.ImportedFileName">
            <summary>
            Gets the fully-qualified name of the database associated to the current alias.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.DatabaseId">
            <summary>
            Gets the identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns Guid.Empty.
            This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.DatabaseIdAsString">
            <summary>
            Gets the string representation (32 digits separated by hyphens and enclosed in braces) of the 
            identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns the string representation of Guid.Empty.
            This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.DatabaseHasBadData">
            <summary>
            Gets a value that indicates whether bad data was found during the import of the database ImportedFileName.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.DatabaseRecordCount">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.DatabaseRecordCountAsDouble">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.AliasHasMatch">
            <summary>
            Gets a boolean that indicates whether the Alias has a match in the set of input files.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile.IsSelected">
            <summary>
            Gets a boolean that indicates whether the current item was selected to be imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2">
            <summary>
            The interface ISimpleImportFile2 provides access to an alias and to its associated database
            and to methods for moving the database to another folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.Alias">
            <summary>
            Gets the alias of the database.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.ImportedFileName">
            <summary>
            Gets the fully-qualified name of the database associated to the current alias.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.DatabaseId">
            <summary>
            Gets the identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns Guid.Empty.
            This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.DatabaseIdAsString">
            <summary>
            Gets the string representation (32 digits separated by hyphens and enclosed in braces) of the 
            identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns the string representation of Guid.Empty.
            This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.DatabaseHasBadData">
            <summary>
            Gets a value that indicates whether bad data was found during the import of the database ImportedFileName.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.DatabaseRecordCount">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.DatabaseRecordCountAsDouble">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.AliasHasMatch">
            <summary>
            Gets a boolean that indicates whether the Alias has a match in the set of input files.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.IsSelected">
            <summary>
            Gets a boolean that indicates whether the current item was selected to be imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.SupportsMovingDatabaseToFolder">
            <summary>
            Gets a value that specifies whether the current execution context allows moving the database to another folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2.MoveDatabaseToFolder(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Moves the database to the specified folder of the current project.
            </summary>
            <param name="context">A ICirExecutionContext reference to the current
            execution context.
            An exception is thrown if this reference is null.
            <para>An exception is thrown if the current execution context does
            not support moving the database, that is if SupportsMovingDatabaseToFolder is false.</para>
            <para>Currently only IPartialImportContext supports this operation.</para>
            </param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the method does nothing.
            If a database with the same name already exists in the destination folder,
            the method tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException">
            If the destination project subfolder already contained a database with the same name and 
            the method could not move the database after
            retrying the operation a predefined number of times.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the ImportedFileName is not null or empty
            and the file does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
            <remarks>If the current object's ImportedFileName is null or empty, the method does nothing.
            If the database is moved, the method updates ImportedFileName to reflect the changes.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles">
            <summary>
            The interface ISimpleImportFiles provides access to a collection of ISimpleImportFile objects.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles.Item(System.Object)">
            <summary>
            Gets the object with the specified Alias or at the specified zero-based index.
            </summary>
            <param name="index">A value that specifies which object to return. 
            If Index is a string, the function retrieves the item whose Alias is equivalent to Index.
            If Index is an Int32, the function retrieves the item at the specified index.
            If Index is neither a string, nor an Int32, an InvalidCastException exception is thrown.
            </param>
            <returns>Returns the item with the specified Alias or ar the specified index. 
            If the item is not found, an exception is thrown.</returns>
            <exception cref="T:System.ArgumentNullException">If Index is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            If Index is a string and the collection does not have an item with an equivalent Alias.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If Index is an Int32 and it is less than 0 or Index is equal to or greater than Count.
            </exception>
            <exception cref="T:System.InvalidCastException">If Index is neither a string, nor an Int32.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles.Contains(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified alias.
            </summary>
            <param name="alias">The alias whose existence is tested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the alias is null.</para>
            </param>
            <returns>True, if the collection contains an element with the specified
            alias; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>
            An System.Collections.IEnumerator object that can be used to iterate through 
            the collection.
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.IStep">
            <summary>
            IStep provides access to an audit test.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.IStep.ID">
            <summary>
            Gets the identifier of the audit step.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.ISteps">
            <summary>
            ISteps provides access to a collection of audit steps.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.ISteps.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>
            An System.Collections.IEnumerator object that can be used to iterate through 
            the collection.
            </returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.ISteps.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.Legacy.ISteps.Item(System.Int32)">
            <summary>
            Gets the member at the specified index.
            </summary>
            <param name="Index">The zero-based index of the member to retrieve. 
            An exception is thrown, if the index is not in the valid range [0, Count).</param>
            <returns>The object at the specified index if successful.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMoveServerDatabasesTask">
            <summary>
            IMoveServerDatabasesTask is the interface to a MoveServerDatabasesTask object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.IMoveServerDatabasesTask.Execute(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesArgs,System.Func{System.Boolean,System.Boolean})">
            <summary>
            Executes the task.
            </summary>
            <param name="args">A MoveServerDatabasesArgs object.
            An exception is thrown if this reference is null.</param>
            <param name="cancelCheck">An optional callback that can be used by the task to check
            whether the cancellation was requested or to report to the caller that 
            the task was cancelled.</param>
            <returns>An object of type MoveServerDatabasesResponse.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable">
            <summary>
            ICirTaskExecutable provides access to the data related to the executable of a CIR task / subtask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable.RoutineImplementationType">
            <summary>
            Gets / sets a value that identifies the format of the executable.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable.CommandLine">
            <summary>
            Gets / sets the command line to pass to the task.
            The command line can use environment variables.
            The execution engine supports the expansion of environment variables.
            The expansion depends on the value of the property ExpandCommandLine.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable.ExpandCommandLine">
            <summary>
            Gets / sets a value that specifies if the task requires that the caller expands the environment variables
            in the command line before executing the task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable.Executable">
            <summary>
            Gets / sets the bytes of the executable.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable.ExecutableName">
            <summary>
            Gets / sets the name of the executable. This value depends on the ImplementationType.
            If ImplementationType is Com, Name contains the ProgId of the corresponding component.
            If ImplementationType is Exe, Name contains the file name of the image.
            If ImplementationType is DotNetAssembly, Name contains specifies the class / method that must be called.
            If the ImplementaionType is one of the IDEA macro types, the Name is not bound to a disk file.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement">
            <summary>
            Represents a simple equation: property - operand - operator
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement.Operand">
            <summary>
            Operand of the equation
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown when given value cannot be converted to the internal type</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement.Operator">
            <summary>
            Operator of the equation
            </summary>
            <exception cref="T:System.ArgumentException">thrown when operator is not recognized or valid according to the property type</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement.PropertyFinder">
            <summary>
            Id or name of the property as string
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when finder is null or empty or contains only white spaces</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement.PropertyId">
            <summary>
            Id of the property
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationElement.PropertyType">
            <summary>
            Type of the property
            </summary>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForCOType">
            <summary>
            Implementation of one equation for a CO type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForCOType.Equation">
            <summary>
            Equation for this specific type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForCOType.Type">
            <summary>
            Type of the entity
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForCOTypeList">
            <summary>
            List of equtions for CO types
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForCOTypeList.Add(Audicon.SmartAnalyzer.Common.Types.EntityType)">
            <summary>
            Creates a new equation for CO type with specific type
            </summary>
            <param name="type">Type of the CO</param>
            <returns>newly created object</returns>
            <exception cref="T:System.ArgumentException">Thrown when tyep was already defined in the list</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectType">
            <summary>
            Interface of one equation for a type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectType.Equation">
            <summary>
            Equation for this specific type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectType.Type">
            <summary>
            Type ob object
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectTypeList">
            <summary>
            List of equtions for object types
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectTypeList.Add(Audicon.SmartAnalyzer.Common.Types.GenericObjectType)">
            <summary>
            Creates a new equation for objects with specific type
            </summary>
            <param name="type">Type of the ojects</param>
            <returns>newly created object</returns>
            <exception cref="T:System.ArgumentException">Thrown when tyep was already defined in the list</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationGroup">
            <summary>
            Represents a group of simple equations or other groups linked by AND or OR
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationGroup.Elements">
            <summary>
            List of composing parts of this group; default empty
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPart">
            <summary>
            Common interface of all parts
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPart.Negate">
            <summary>
            If this part is negated (NOT in front)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPart.Type">
            <summary>
            Type of this part; default value is EquationPartType.Element
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList">
            <summary>
            List of equation parts
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList.AddElement(System.Guid,Audicon.SmartAnalyzer.Common.Types.PropertyDataType)">
            <summary>
            Creates a new equation element and adds it to the list
            </summary>
            <param name="propertyId">Guid representing property ID</param>
            <param name="propertyType">property type</param>
            <returns>newly created element</returns>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList.AddElement(System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType)">
            <summary>
            Creates a new equation element and adds it to the list
            </summary>
            <param name="propertyFinder">Name or Id of the property as string</param>
            <param name="propertyType">property type</param>
            <returns>newly created element</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when finder is null or empty or contains only white spaces</exception>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList.AddGroup(Audicon.SmartAnalyzer.Common.Types.EquationElementType)">
            <summary>
            Creates a new equation group and adds it to the list
            </summary>
            <param name="type">type of the group</param>
            <returns>newly created group</returns>
            <exception cref="T:System.ArgumentException">thrown when the type is not recognized or it is EquationPartType.Element</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression">
            <summary>
            Filter expression combined with target Content object type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression.ObjectType">
            <summary>
            Gets the type of target CO object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression.Expression">
            <summary>
            Gets filter's expression.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList">
            <summary>
            The interface IEntityExpressionList implements COM-visible collection of CO type related filter expressions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList.Item(Audicon.SmartAnalyzer.Common.Types.GenericObjectType)">
            <summary>
            Gets the filter expressions related to CO type specified.
            </summary>
            <param name="coType">CO type.</param>
            <returns>Filter expression related to CO type specified.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList.Count">
            <summary>
            Retrieves the length of the collection.
            </summary>
            <returns>Length of the collection.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFilter">
            <summary>
            External filter definition
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFilter.Alias">
            <summary>
            Gets filter's alias.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFilter.SaModuleType">
            <summary>
            Gets the type of target SA module
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFilter.ExpressionList">
            <summary>
            Gets filter's expression.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin">
            <summary>
            Implements administration of external filters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.GetPredefinedFilter(System.String,Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType)">
            <summary>
            Obtains predefined filter
            </summary>
            <param name="alias">Alias of standard workflow action hosting the predefined filter</param>
            <param name="stdActionType">Type of standard workflow action</param>
            <returns>Predefined filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.GetFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Obtains runtime filter for default version
            </summary>
            <param name="filterAlias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <returns>Runtime filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.GetFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Version)">
            <summary>
            Obtains runtime filter
            </summary>
            <param name="filterAlias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="filterVersion">Filter version</param>
            <returns>Runtime filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.GetFilters(Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Obtains collection of runtime filters, including temporary ones
            </summary>
            <param name="saModuleType">Type of target SA module</param>
            <returns>Collection of runtime filters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.GetActiveFilter(Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Obtains currently active filter
            </summary>
            <param name="saModuleType">Type of target SA module</param>
            <returns>Currently active filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.CreateFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Collections.Generic.Dictionary{Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression},System.Boolean)">
            <summary>
            Creates new runtime filter instance
            </summary>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Target SA module type</param>
            <param name="filter">List of filter expressions</param>
            <param name="isTemporary">Temp flag</param>
            <returns>New filter object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.CreateFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Version,System.Collections.Generic.Dictionary{Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression},System.Boolean)">
            <summary>
            Creates new runtime filter instance
            </summary>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Target SA module type</param>
            <param name="version">Filter version</param>
            <param name="filter">List of filter expressions</param>
            <param name="isTemporary">Temp flag</param>
            <returns>New filter object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.SaveFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Saves runtime filter
            </summary>
            <param name="filter">Filter to save</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.PersistFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Converts temp filter into persistent one and saves it. For persistent filter, same as SaveFilter()
            </summary>
            <param name="filter">Filter to persist</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.SetActiveFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Sets active filter
            </summary>
            <param name="filter">Filter to set as active</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.SetActiveFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Sets active filter
            </summary>
            <param name="alias">Alias of active filter</param>
            <param name="saModuleType">Type of target SA module</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.SetActiveFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Version)">
            <summary>
            Sets active filter
            </summary>
            <param name="alias">Alias of active filter</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="version">Active filter version</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.DeleteFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Deletes filter
            </summary>
            <param name="filter">Filter to delete</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.DeleteFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Deletes filter
            </summary>
            <param name="alias">Alias of filter to delete</param>
            <param name="saModuleType">Type of target SA module</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.DeleteFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Version)">
            <summary>
            Deletes filter
            </summary>
            <param name="alias">Alias of filter to delete</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="version">Version of filter to delete</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines filter with list of filter expressions
            </summary>
            <param name="targetFilter">Target filter</param>
            <param name="sourceFilter">Source filter list</param>
            <param name="combineOp">Logical operation to combine with</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines filter with filter expression related to particular CO type
            </summary>
            <param name="targetFilter">Target filter</param>
            <param name="sourceFilter">Source filter related to particular CO type</param>
            <param name="combineOp">Logical operation to combine with</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter,Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.LogicalOP)" -->
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.ConsiderFilteringSuppress">
            <summary>
            Specifies whether suppressing external filters via active App Workflow has to be taken into consideration
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IExternalFiltersAdmin.Administrated">
            <summary>
            Runtime filters' administration event
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPredefinedFilter" -->
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter">
            <summary>
            COM visible runtime filter interface
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.Name">
            <summary>
            Gets filter's name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.Description">
            <summary>
            Gets filter's description.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.Version">
            <summary>
            Gets filter's version.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.IsTemporary">
            <summary>
            Specifies if filter is a temporary one
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.AddExpression(Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines filter expression with another expression
            </summary>
            <param name="oType">Target object type</param>
            <param name="sourceFilter">Source filter</param>
            <param name="combineOp">Logical operation to combine with</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.Id">
            <summary>
            Gets filter's unique ID.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.BaseVersion">
            <summary>
            Gets filter's version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter.IsNew">
            <summary>
            Specifies if filter object is yet not saved
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter">
            <summary>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Active">
            <summary>
            Set filter active or not
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Alias">
            <summary>
            Alias of the filter (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 64</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Filter">
            <summary>
            Filter expression
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.FilterExpression">
            <summary>
            External filter in Expresion format
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Description">
            <summary>
            Description of the filter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Flags">
            <summary>
            Flags of the filter
            </summary>
            <exception cref="T:System.ArgumentException">thrown when the given value is not valid for the base type enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Id">
            <summary>
            ID of the filter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Name">
            <summary>
            Name of the filter (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.TargetModule">
            <summary>
            SA target module
            </summary>
            <exception cref="T:System.ArgumentException">thrown when the given value is not valid for the base type enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.Version">
            <summary>
            Version of the filter (on set it will be trimmed)
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 32</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter.WorkflowId">
            <summary>
            Id of the workflow
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFiltersAccessor">
            <summary>
            The interface IRuntimeFiltersAccessor implements COM-visible collection of runtime filters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFiltersAccessor.Item(System.Int32)">
            <summary>
            Gets the runtime filter specified by index within the list.
            </summary>
            <param name="index">The index of the runtime filter whose data is requested.</param>
            <returns>The data of the specified runtime filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFiltersAccessor.Count">
            <summary>
            Retrieves the length of the list of runtime filters.
            </summary>
            <returns>Length of the list of runtime filters.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFiltersAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization">
            <summary>
            Access to extended (a.k.a. global) parameters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.SetParameter(System.String,System.Object,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object)">
            <summary>
            Set the value of a single parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.AddParameter(System.String,System.Object,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object)">
            <summary>
            Adds the value to parameter of type collection
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.TryGetParameter(System.String,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object,System.Boolean,Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter@)">
            <summary>
            Obtain sigle parameter value
            </summary>
            <param name="name">Parameter name</param>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
            <param name="recursive">When true, search is also performed through higher hierarchy levels</param>
            <param name="value">Parameter value</param>
            <returns>True if parameter exists, false otherwise</returns>
            <exception cref="T:System.InvalidOperationException">Parameter is of collection type</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.GetParameters(Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object,System.Boolean)">
            <summary>
            Obtain full parameters' list of specified owner
            </summary>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
            <param name="recursive">When true, search is also performed through higher hierarchy levels</param>
            <returns>Dictionary of pairs [Parameter name/Collection of parameter values]</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.GetParameters(System.String,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object,System.Boolean)">
            <summary>
            Obtain parameter of collection type
            </summary>
            <param name="name">Parameter name</param>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
            <param name="recursive">When true, search is also performed through higher hierarchy levels</param>
            <returns>Collection of parameter values</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.DeleteParameter(System.String,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object,System.Boolean)">
            <summary>
            Delete specified parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
            <param name="recursive">When true, delete is also performed within higher hierarchy levels</param>
            <returns>Number of removed parameters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.DeleteParameters(Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Object)">
            <summary>
            Delete all parameters for a given owner
            </summary>
            <param name="ownerType">Type of parameterized entity</param>
            <param name="ownerDescr">Identificator of parameterized entity</param>
            <returns>Number of removed parameters</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameterization.ThresholdOwnerType">
            <summary>
            For recursive operations, specifies the uppermost level of recursion
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter">
            <summary>
            Interface to describe the extended parameter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.Id">
            <summary>
            Id of the parameter 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.FunctionalityType">
            <summary>
            Use type of the parameter
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value set is not defined in ParameterFunctionalityType</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.OwnerType">
            <summary>
            Type of the owner (associated entity)
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value set is not defined in ParameterOwnerType</exception>
            <remarks>It will set the owner id to null in case type is set to None</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.OwnerId">
            <summary>
            Id of the owner (associated entity)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is not null and OwnerType is not None</exception>
            <exception cref="T:System.ArgumentException">Thrown when value set is null and OwnerType is something different than None</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.Name">
            <summary>
            Name of the parameter
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.ValueType">
            <summary>
            Use type of the parameter
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value set is not defined in ParameterValueType</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.ObjectValue">
            <summary>
            Sets/gets the value of the parameter when type is set as object
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not object</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.IntegerValue">
            <summary>
            Sets/gets the value of the parameter when type is set as integer
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not integer</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.FloatValue">
            <summary>
            Sets/gets the value of the parameter when type is set as float
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not float</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.BooleanValue">
            <summary>
            Sets/gets the value of the parameter when type is set as boolean
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not boolean</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.StringValue">
            <summary>
            Sets/gets the value of the parameter when type is set as string
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not string</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.DateTimeValue">
            <summary>
            Sets/gets the value of the parameter when type is set as date/time
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when value type property is not datetime</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.DateTimeValue2">
            <summary>
            Sets/gets a special value of the parameter used for multiple purposes ('to' value for a period for example, timestamp for other cases)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the value set is null and value type property is period</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.Tag">
            <summary>
            Sets/gets extra data to be stored in this parameter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.SetValue``1(``0)">
            <summary>
            Generic method to set the value for serializable types; only usable if value type is object
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <param name="value">value to save</param>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.GetValue``1">
            <summary>
            Generic method to get the value casted into proper type; only usable if value type is object
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <returns>value casted into given type</returns>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.SetTag``1(``0)">
            <summary>
            Generic method to set the tag for serializable types
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <param name="value">value to save</param>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter.GetTag``1">
            <summary>
            Generic method to get the tag casted into proper type
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <returns>value casted into given type</returns>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization">
            <summary>
            API for setting global parameters for IDEA files/subfolders
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String,System.Object)">
            <summary>
            Set global parameter for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,System.Object)">
            <summary>
            Set global parameter for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetParameter``1(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String,``0)">
            <summary>
            Set global parameter for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's generic value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetParameter``1(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,``0)">
            <summary>
            Set global parameter for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's generic value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.Object)">
            <summary>
            Set "private" (associated with execution record) parameter for given file/folder
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location (local/server)</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,System.Object)">
            <summary>
            Set "private" (associated with execution record) parameter for given file/folder
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location (local/server)</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetExecutionParameter``1(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,``0)">
            <summary>
            Set "private" (associated with execution record) parameter for given file/folder
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location (local/server)</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's generic value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SetExecutionParameter``1(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,``0)">
            <summary>
            Set "private" (associated with execution record) parameter for given file/folder
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location (local/server)</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's generic value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String,System.Object@)">
            <summary>
            Returns global parameter's value for given key for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,System.Object@)">
            <summary>
            Returns global parameter's value for given key for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetParameter``1(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String,``0@)">
            <summary>
            Returns global parameter's value for given key for given file/folder
            </summary>
            <typeparam name="T">Parameter's type</typeparam>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Generic parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetParameter``1(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,``0@)">
            <summary>
            Returns global parameter's value for given key for given file/folder
            </summary>
            <typeparam name="T">Parameter's type</typeparam>
            <param name="item">File/folder item</param>
            <param name="key">Parameter's key</param>
            <param name="value">Generic parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.Object@)">
            <summary>
            Returns "private" (associated with execution record) parameter's value for given key for given execution record and location
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,System.Object@)">
            <summary>
            Returns "private" (associated with execution record) parameter's value for given key for given execution record and location
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetExecutionParameter``1(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,``0@)">
            <summary>
            Returns "private" (associated with execution record) parameter's value for given key for given execution record and location
            </summary>
            <typeparam name="T">Parameter's type</typeparam>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
            <param name="value">Generic parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.TryGetExecutionParameter``1(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType,``0@)">
            <summary>
            Returns "private" (associated with execution record) parameter's value for given key for given execution record and location
            </summary>
            <typeparam name="T">Parameter's type</typeparam>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
            <param name="value">Generic parameter's value if the key exists; null otherwise</param>
            <returns>True if the key exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.GetParameters(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity)">
            <summary>
            Returns global parameters' list for given file/folder
            </summary>
            <param name="item">File/folder item</param>
            <returns>Global parameters' list</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.GetParameters(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity,System.String)">
            <summary>
            For specified parent folder, returns list of specified parameter's values for all child elements of the folder
            </summary>
            <param name="ideaFolder">Parent folder to investigate</param>
            <param name="paramName">Name of parameter</param>
            <returns>Collection of parameter values for folder's child elements</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.GetParameterLists(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity,System.String[])">
            <summary>
            For each child element of specified parent folder, returns list of values of parameters specified by their names
            </summary>
            <param name="ideaFolder">Parent folder to investigate</param>
            <param name="paramList">List of parameter names</param>
            <returns>Collection of child elements accompained by list of parameters with specified names</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.GetExecutionParameters(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Returns "private" (associated with execution record) parameters' list for given execution record and location
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <returns>Private parameters' list</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String)">
            <summary>
            Deletes global parameter with given key for given file/folder
            </summary>
            <param name="item">File/foldr item</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteParameter(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType)">
            <summary>
            Deletes global parameter with given key for given file/folder
            </summary>
            <param name="item">File/foldr item</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String)">
            <summary>
            Deletes "private" (associated with execution record) parameter with given key
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteExecutionParameter(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Types.GlobalParameterType)">
            <summary>
            Deletes "private" (associated with execution record) parameter with given key
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteParameters(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.Func{System.String,System.Exception,System.Boolean})">
            <summary>
            Deletes all parameters for given file/folder
            </summary>
            <param name="item">File or folder to delete parameter for</param>
            <param name="onErrorCallback">Callback to call in case an error occurs</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.DeleteExecutionParameters(System.Guid,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Func{System.String,System.Exception,System.Boolean})">
            <summary>
            Deletes all "private" (associated with execution record) parameres for given execution record and location
            </summary>
            <param name="executionId">Execution record ID</param>
            <param name="location">Execution location</param>
            <param name="onErrorCallback">Callback to call in case an error occurs</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.GetNewServerParametersCount">
            <summary>
            Returns the number of parameters' related server-side operations requiring synchronization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.SynchronizeWithServerParameters(System.Func{Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity,System.String,Audicon.SmartAnalyzer.Common.Types.CRUDType,System.Exception,System.Boolean})">
            <summary>
            Synchronize recent parameters' related server-side operations with local storage
            </summary>
            <param name="onErrorCallback">Callback to call in case an error occurs</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IImdFilesParameterization.FlushSharedActions">
            <summary>
            Publish accumulated shared actions to the server
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity">
            <summary>
            Interface to describe the a disk entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.Id">
            <summary>
            Generated internal Id of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.OwnId">
            <summary>
            Id of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.ParentId">
            <summary>
            Id of the parent folder (empty guid for no parent = entity of type folder)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.IsFolder">
            <summary>
            If this is file or folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.IsOnServer">
            <summary>
            If this is on server or local
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.Path">
            <summary>
            Path of the folder/file (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: ASCII/Unicode characters 1 through 31, quote ("), less than (&lt;), greater than (>), pipe (|), backspace (\b), null (\0) and tab (\t).</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 1024</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity.Parameters">
            <summary>
            Contains the parameters of current entity
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter">
            <summary>
            Interface to describe the basic parameter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter.Id">
            <summary>
            Id of the object (same as key)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter.Name">
            <summary>
            Name of the parameter (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter.SetValue``1(``0)">
            <summary>
            Generic method to set the value for serializable types
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <param name="value">value to save</param>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IParameter.GetValue``1">
            <summary>
            Generic method to get the value casted into proper type
            </summary>
            <typeparam name="T">serializable type</typeparam>
            <returns>value casted into given type</returns>
            <exception cref="T:System.ArgumentException">Thrown when type is not serializable</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessCommon">
            <summary>
            Interface for general functionality for all databases
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessCommon.DropConnectionFile(System.String)">
            <summary>
            Drops the connection for specified database.
            </summary>
            <param name="filePath">Path to the database.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessCommon.DropConnectionFolder(System.String,System.Boolean)">
            <summary>
            Drops the connection for all databases for the specified folder and its children.
            </summary>
            <param name="folderPath">Path to the folder.</param>
            <param name="recursive">If connections should be checked also for subfolders of given folder.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when folder does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessCommon.DropConnections">
            <summary>
            Drops all open connection.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters">
            <summary>
            Interface for accessing runtime filter database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.CompactAndRepairDatabase">
            <summary>
            Tryes to repair current database and compact it
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.EmptyDatabase">
            <summary>
            Empties the databases (both local and server).
            Deletes every record from all tables except for the version table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.GetDBVersion">
            <summary>
            Get the version of the current databse
            </summary>
            <returns>IDBVersion object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.SaveDBVersion(Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion)">
            <summary>
            Saves the version onformation for current database
            </summary>
            <param name="dbVersion">IDBVersion object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.CreateRuntimeFilter(System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Creates a new runtime filter
            </summary>
            <param name="alias">alias of the filter</param>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <returns>Newly created filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.GetRuntimeFilters(System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Returns the collection of runtime filters for given workflow id and sa module
            </summary>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <returns>collection of runtime filters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.GetRuntimeFilter(System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.String)">
            <summary>
            Returns a runtime filter for given workflow id, sa module, alias and version
            </summary>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <param name="alias">alias of the filter</param>
            <param name="version">version of the filter</param>
            <returns>runtime filter or null</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.GetRuntimeFilter(System.Guid)">
            <summary>
            Returns a runtime filter for given its id
            </summary>
            <param name="id">Guid - filter Id</param>
            <returns>runtime filter or null</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.GetActiveRuntimeFilter(System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Returns the active runtime filter for given workflow id and sa module
            </summary>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <returns>active runtime filter or null</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.SaveRuntimeFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter)">
            <summary>
            Saves a runtime filter
            </summary>
            <param name="filter">filter object</param>
            <exception cref="T:System.ArgumentNullException">thrown when filter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.DeleteRuntimeFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter)">
            <summary>
            Deletes a runtime filter
            </summary>
            <param name="filter">filter object</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when filter was not found in the database</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.DeleteRuntimeFilter(System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.String)">
            <summary>
            Deletes a runtime filter
            </summary>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <param name="alias"> alias of the filter</param>
            <param name="version">version of the filter</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when filter was not found in the database</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.DeleteRuntimeFilter(System.Guid)">
            <summary>
            Deletes a runtime filter
            </summary>
            <param name="id">Guid - filter Id</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when filter was not found in the database</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.SetActiveRuntimeFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter)">
            <summary>
            Sets a filter as active
            </summary>
            <param name="filter">Filter object</param>
            <exception cref="T:System.ArgumentNullException">Thrown when filter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.SetActiveRuntimeFilter(System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.String)">
            <summary>
            Sets a filter as active
            </summary>
            <param name="workflowId">Guid - workflow Id</param>
            <param name="module">SA module type</param>
            <param name="alias"> alias of the filter</param>
            <param name="version">version of the filter</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when filter was not found in the database</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessRuntimeFilters.SetActiveRuntimeFilter(System.Guid)">
            <summary>
            Sets a filter as active
            </summary>
            <param name="id">Guid - filter id</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when filter was not found in the database</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IServiceTypeResolver">
            <summary>
            IServiceTypeResolver provides an interface for mapping service ids to service types.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IServiceTypeResolver.LookupServiceType(System.String)">
            <summary>
            Maps a service id to its service type.
            </summary>
            <param name="serviceId">A string containing the id of the service to map.</param>
            <returns>If found, the Type object of the service with the specified id;
            otherwise, null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction">
            <summary>
            Contract implemented by any collaborate action class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.SharedActionType">
            <summary>
            Type of shared action
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.PublishSharedResult(System.Nullable{System.Guid},System.Object,System.Boolean,System.Nullable{System.DateTime}@)">
            <summary>
            Implements custom publishing of shared data. The Collaborator calls this method as the very first during the publishing process.
            If the method returns SharedActionState.Processed, Collaborator takes publishing as completed
            If the method returns SharedActionState.NoCustomProcessing, Collaborator goes ahead with standard publishing workflow
            If the method returns SharedActionState.NotSupported, Collaborator skips this action object completely and continues with the next action 
            available
            </summary>
            <param name="user">User Id to publish new results for</param>
            <param name="sharedResultInfo">preliminary shared result info</param>
            <param name="localAction">if true, action was performed on local data</param>
            <param name="syncTime">If the action wants publishing to make user's last sync date get updated, sync date is returned here</param>
            <returns>Execution state</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.GetNewSharedResultsCount(Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting,System.Nullable{System.Guid},System.DateTime,System.Int32@,System.Func{System.Nullable{System.Guid},System.DateTime,System.Boolean})">
            <summary>
            Implements custom method to obtain the number of action's new shared results
            </summary>
            <param name="dbLayer">Reusable instance of reporting database accessor</param>
            <param name="user">User Id to count new results for</param>
            <param name="syncTime">Last sync date for this user</param>
            <param name="cnt">Number of action's new shared results</param>
            <param name="checkSkipCondition">Optional method to check whether shared result have to be skipped</param>
            <returns>Execution state</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.GetSharedResultFileName(System.Object,System.Nullable{System.Guid})">
            <summary>
            Even if action class doesn't implement custom publishing, it can specify shared result file name, based on preliminary shared result info
            </summary>
            <param name="sharedResultInfo">preliminary shared result info</param>
            <param name="userId">Id of user; null means any user</param>
            <returns>If sharedResulInfo is not null, returns result file name for a given shared data; otherwise, returns shared result file's
            mask used when consuming server-side shared data</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.CreateSharedResult(System.Object,System.Boolean)">
            <summary>
            Based on preliminary shared result info, generates full shared result object to be published on server by Collaborator
            </summary>
            <param name="sharedResultInfo">preliminary shared result info</param>
            <param name="localAction">if true, action was performed on local data</param>
            <returns>Full shared result object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.GetUserForSynchronization(System.Nullable{System.Guid},System.Boolean@)">
            <summary>
            Based on requested user Id, returns user Id to be used for synchronization with server.
            </summary>
            <param name="requestedUserId">Id of user requesting synchronization with server</param>
            <param name="useAlways">true specifies that actual user Id returned has to be used for any requested user Id</param>
            <returns>Actual user Id to be used when synchronizing</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.GetNewSharedResults(Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting,System.Nullable{System.Guid},System.DateTime,Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData[]@,System.Func{System.Nullable{System.Guid},System.DateTime,System.Boolean})">
            <summary>
            Based on last synchronization date, obtains new shared results
            </summary>
            <param name="dbLayer">Reusable instance of reporting database accessor</param>
            <param name="user">User Id to get new results for</param>
            <param name="syncDate">Last sync date</param>
            <param name="newResults">List of new shared results</param>
            <param name="checkSkipCondition">Optional method to check whether shared result have to be skipped</param>
            <returns>Execution state</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.ConsumeSharedResults(Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting,System.Nullable{System.Guid},System.DateTime@,System.Int32@,System.Func{System.Nullable{System.Guid},System.DateTime,System.Boolean})">
            <summary>
            Based on last synchronization date, obtains and cosumes new shared result
            </summary>
            <param name="dbLayer">Reusable instance of reporting database accessor</param>
            <param name="user">User Id to consume new results for</param>
            <param name="syncDate">Last sync date; when implemented, the method should set the date to that of the most recent result consumed</param>
            <param name="cntRes">Number of shared results successfully consumed</param>
            <param name="checkSkipCondition">Optional method to check whether shared result have to be skipped</param>
            <returns>Execution state</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.Perform(Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData)">
            <summary>
            In case Collaborator obtains the new shared result itself, Collaborator calls this method for each obtained shared result
            </summary>
            <param name="sharedResult"></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.IgnoreResultOrigin">
            <summary>
            If this property returns true, shared action is ready to consume shared results created at current machine within current project
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedAction.SynchronizeByPublish">
            <summary>
            If this property returns true, shared action instructs Collaborator to update user's last synchronization date for this action
            each time shared result gets published
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedActionCapabilities">
            <summary>
            Metadata contract describing collaborate actions' capabilities. Custom metadata attributes for collaborate actions have to be 
            conform with this contract
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedActionCapabilities.SharedActionType">
            <summary>
            Action's type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedActionCapabilities.Priority">
            <summary>
            Optional attribute describing processing priority of actions of the same type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedActionCapabilities.Name">
            <summary>
            Optional name of the shared action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator">
            <summary>
            Interface of Collaborator Component
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.PublishSharedResult(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Object)">
            <summary>
            Publishes shared result of collaborate action
            </summary>
            <param name="action">collaborate action type</param>
            <param name="sharedResulInfo">preliminary shared result info</param>
            <returns>true if at least one collaborate action class performed the action; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.PublishSharedResult(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Object,System.Boolean)">
            <summary>
            Publishes shared result of collaborate action
            </summary>
            <param name="action">collaborate action type</param>
            <param name="sharedResulInfo">preliminary shared result info</param>
            <param name="localAction">if true, action was performed on local data</param>
            <returns>true if at least one collaborate action class performed the action; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.ConsumeSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType)">
            <summary>
            Consumes recent shared results of specified collaborate action and current user
            </summary>
            <param name="action">collaborate action type</param>
            <returns>Number of shared results successfully consumed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.ConsumeSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Guid[])">
            <summary>
            Consumes recent shared results of specified collaborate action
            </summary>
            <param name="action">collaborate action type</param>
            <param name="users">List uf users to consume results for. If null, means all users</param>
            <returns>Number of shared results successfully consumed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.ConsumeNewSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType,Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData[])">
            <summary>
            Consumes previously obtained shared results of specified collaborate action
            </summary>
            <param name="action">collaborate action type</param>
            <param name="sharedData">shared data previously obtained</param>
            <returns>Number of shared results successfully consumed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewSharedResultsCount(Audicon.SmartAnalyzer.Common.Types.SharedActionType)">
            <summary>
            Returns number of new shared results for specified collaborate action and current user
            </summary>
            <param name="action">collaborate action type</param>
            <returns>Number of new shared results available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewSharedResultsCount(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Nullable{System.Guid})">
            <summary>
            Returns number of new shared results for specified collaborate action and specified user
            </summary>
            <param name="action">collaborate action type</param>
            <param name="user">Id of user to count results for. If null, means ANY user</param>
            <returns>Number of new shared results available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType)">
            <summary>
            Returns list of recent shared results of specified collaborate action and current user
            </summary>
            <param name="action">collaborate action type</param>
            <returns>List of new shared results available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Guid[])">
            <summary>
            Returns list of recent recent shared results of specified collaborate action
            </summary>
            <param name="action">collaborate action type</param>
            <param name="users">List uf users to consume results for. If null, means all users</param>
            <returns>List of new shared results available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.DeleteSharedResults(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Deletes shared results from server for a given action, user, start date
            </summary>
            <param name="action">action type to delete result for</param>
            <param name="user">user to delete result for; null means all users</param>
            <param name="after">start date to delete result after; null means minimum date</param>
            <returns>Number of results deleted</returns>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.DownloadError">
            <summary>
            Event fired if error occures while downloading the shared data files from server 
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.ConsumeError">
            <summary>
            Event fired if error occures while consuming shared data for users' list
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.ConsumeSkip">
            <summary>
            Event fired if shared reult was skipped while consumed
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewError">
            <summary>
            Event fired if error occures while obtaining new shared data for users' list
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.GetNewSkip">
            <summary>
            Event fired if shared reult was skipped while obtaining new results
            </summary>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ICollaborator.DeleteError">
            <summary>
            Event fired if error occures while deleting shared data for user
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData">
            <summary>
            Interface implemented by any class representing shared data to be published and consumed by Collaborator
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.SharedActionType">
            <summary>
            Type of shared action responsible for shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.Server">
            <summary>
            Name of IDEA server hosting the shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.ProjectId">
            <summary>
            ID of IDEA server project hosting the shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.UserId">
            <summary>
            ID of user who provided shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.TransactionId">
            <summary>
            Shared action's transaction ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.MachineId">
            <summary>
            Unique identifier of machine where shared data was created
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.LocalProject">
            <summary>
            Name of local project shared data are related to
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.SharedActionDirection">
            <summary>
            Type of action's control flow with respect to data modified
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData.Data">
            <summary>
            Action specific data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IGlobalParameterAccessor">
            <summary>
            The interface IExecutionParameterAccessor provides read-only access to a test execution's set of actual parameters.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IGlobalParameterAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null or if a parameter with the 
            specified name does not exist.</para></param>
            <returns>The value of the specified parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If parameterName is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IGlobalParameterAccessor.Contains(System.String)">
            <summary>
            Determines whether the set of parameters contains an element with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para>
            </param>
            <returns>True, if the set of parameters contains an element with the specified
            name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IExecutionParameterAccessor">
            <summary>
            The interface IExecutionParameterAccessor provides read-only access to a test execution's set of actual parameters.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IExecutionParameterAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null or if a parameter with the 
            specified name does not exist.</para></param>
            <returns>The value of the specified parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If parameterName is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ExecutionContext.IExecutionParameterAccessor.Contains(System.String)">
            <summary>
            Determines whether the set of parameters contains an element with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para>
            </param>
            <returns>True, if the set of parameters contains an element with the specified
            name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking">
            <summary>
            Interface for accessing execution records database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.CompactAndRepairDatabase">
            <summary>
            Tryes to repair current database and compact it
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.EmptyDatabase(System.Boolean)">
            <summary>
            Empties the database.
            Deletes every record from all tables except for the version table.
            </summary>
            <param name="onServer">if table is located on server or local</param>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>  
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.EmptyDatabase">
            <summary>
            Empties the databases (both local and server).
            Deletes every record from all tables except for the version table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetDBVersion">
            <summary>
            Get the version of the current databse
            </summary>
            <returns>IDBVersion object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.SaveDBVersion(Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion)">
            <summary>
            Saves the version onformation for current database
            </summary>
            <param name="dbVersion">IDBVersion object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.CreateIDEATable(System.Boolean,System.Guid)">
            <summary>
            Creates a new IDEATable instance
            </summary>
            <param name="id">IDEA table internal id (in GUID format)</param>
            <param name="onServer">if table is located on server or local</param>
            <returns>New IDEATable instance</returns>
            <exception cref="T:System.ArgumentException">Thrown when empty GUID is provided as id</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetIDEATable(System.Boolean,System.Guid)">
            <summary>
             Returns IDEATable instance stored in DB for given table id
             database location is given through onServer parameter
            </summary>
            <param name="id">id of the table to be found</param>
            <param name="onServer">where to search for the table</param>
            <returns>IDEATable instance</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown if nothing is found in the DB for given table id</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.DeleteIDEATable(System.Boolean,System.Guid)">
            <summary>
            Deletes any IDEATable information from DB related to the given table id
            </summary>
            <param name="id">id of the table</param>
            <param name="onServer">location of the table</param>
            <remarks>This will delete also any execution records related to the given table id</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.CreateExecutionTest(System.Guid)">
            <summary>
            Creates a new TestReference instance
            </summary>
            <param name="id">A Test id in GUID format</param>
            <returns>TestReference instance</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.CreateExecution(System.Boolean,Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference)">
            <summary>
            Creates a new ExecutionRecord 
            </summary>
            <param name="test">A TestReference object</param>
            <param name="onServer">location of the table</param>
            <returns>ExecutionRecord instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when test is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecution(System.Boolean,System.Guid)">
            <summary>
            Returns the execution record object associated with the given id
            </summary>
            <param name="executionId">ID of the execution (in GUID format)</param>
            <param name="onServer">location of the table</param>
            <returns>ExecutionRecord object</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when nothing is found in the DB</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutions(System.Boolean,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>
            Returns a dictionary of execution records lists sorted by test id 
            that have the same test id or table id used
            </summary>
            <param name="onServer">location of the execution</param>
            <param name="testId">Id of the test (in GUID format) or null</param>
            <param name="tableId">Id of the table (in GUID format) or null</param>
            <param name="onlyPrimary">is taken into consideration only when table id is set; if True the result will contain
            only executions where the given table is used as primary; if False tre result will contain only executions where the given 
            table is used as additional file (not primary); if not set all executions are returned</param>
            <returns>Dictionary of ExecutionRecord</returns>
            <remarks>The key of the outside Dictionary is Test.ID property of ExecutionRecord
            The outside dictionary will be empty if nothing is found in the DB
            The inside dictionaries cannot be empty</remarks>
            <remarks>The dictionary will be empty if nothing is found in the DB</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when both parameters are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutionsUnsorted(System.Boolean,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>
            Returns an unsorted list of execution records that have the same test id or table id used
            </summary>
            <param name="onServer">location of the execution</param>
            <param name="testId">Id of the test (in GUID format) or null</param>
            <param name="tableId">Id of the table (in GUID format) or null</param>
            <param name="onlyPrimary">is taken into consideration only when table id is set; if True the result will contain
            only executions where the given table is used as primary; if False tre result will contain only executions where the given 
            table is used as additional file (not primary); if not set all executions are returned</param>
            <returns>List of execution records</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when both parameters are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
            <remarks>The list will be empty if nothing is found in the DB</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutions(System.Boolean)">
            <summary>
            Returns a dictionary of all execution records lists sorted by test id
            </summary>
            <param name="onServer">Location of the table</param>
            <returns>Dictionary of execution records lists</returns>
            <remarks>The key of the outside Dictionary is Test.ID property of execution record
            The outside dictionary will be empty if nothing is found in the DB
            The inside dictionaries cannot be empty</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when both parameters are null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
            <remarks>The dictionary will be empty if nothing is found in the DB</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutionsUnsorted(System.Boolean)">
            <summary>
            Returns an unsorted list of all execution records
            </summary>
            <param name="onServer">Location of the executions</param>
            <returns>List of execution records</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
            <remarks>The list will be empty if nothing is found in the DB</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutions(System.Boolean,Audicon.SmartAnalyzer.Common.Types.TaskState2[])">
            <summary>
            Returns a dictionary of execution records lists sorted by test id 
            that have task state from the given list and filtered by location (local or server)
            </summary>
            <param name="onServer">True if task should be executed on server, False otherwise</param>
            <param name="taskStates">Array of TaskState2 values</param>
            <returns>Dictionary of execution record lists</returns>
            <remarks>The key of the outside dictionary is Test.ID property of execution record
            The key of the inside dictionary is Table.ID property of ExecutionRecord
            The outside dictionary will be empty if nothing is found in the DB
            The inside dictionaries cannot be empty</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when taskStates is null or has no elements</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetExecutionsUnsorted(System.Boolean,Audicon.SmartAnalyzer.Common.Types.TaskState2[])">
            <summary>
            Returns the unsorted list of ExecutionRecords from the DB
            that have task state from the given list and filtered by location (local or server)
            </summary>
            <param name="onServer">True if task should be executed on server, False otherwise</param>
            <param name="taskStates">Array of TaskState2 values</param>
            <returns>List of execution records</returns>
            <remarks>The list will be empty if nothing is found in the DB</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when taskStates is null or has no elements</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.DeleteExecutionsByTests(System.Boolean,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Deletes all executions belonging to the given list of test ids
            </summary>
            <param name="onServer">True id task should be executed on server, False otherwise</param>
            <param name="tests">Any list if tests ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown when tests is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.DeleteExecutionsByIds(System.Boolean,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Deletes all execution records from a known list of ids
            </summary>
            <param name="onServer">True id task should be executed on server, False otherwise</param>
            <param name="idList">list of ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown when idList is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">thrown when connection string is null or empty (if transaction object is null)</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.UpdateExecutionStatus(System.Boolean,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{Audicon.SmartAnalyzer.Common.Types.TaskState2})">
            <summary>
            Updates various properties of an execution
            </summary>
            <param name="executionID">ID of the execution (in GUID format)</param>
            <param name="onServer">location of the table</param>
            <param name="sessionID">ID of the session associated with this execution or null</param>
            <param name="taskID">ID of the IDEA task associated with this execution or null</param>
            <param name="taskState">TaskState2 value or null</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when nothing is found in the DB</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
            <remarks>If nullable parameters are set to null they will be ignored (no change will be done for that property)</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.UpdateExecutionTestStatus(System.Boolean,System.Guid,System.Nullable{System.Boolean},System.Nullable{Audicon.SmartAnalyzer.Common.Types.InputType},System.Nullable{Audicon.SmartAnalyzer.Common.Types.TestStatus})">
            <summary>
            Updates various properties of a test belonging to a given execution
            </summary>
            <param name="executionID">ID of the execution (in GUID format)</param>
            <param name="onServer">location of the table</param>
            <param name="selected">Selected status</param>
            <param name="input">Input status</param>
            <param name="status">Current status</param>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer is true but app is not connected to a server</exception>
            <remarks>If nullable parameters are set to null they will be ignored (no change will be done for that property)</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.SaveExecution(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord)">
            <summary>
            Saves a given ExecutionRecord to the DB
            </summary>
            <param name="execution">An ExecutionRecord object</param>
            <exception cref="T:System.ArgumentNullException">Thrown if execution is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer property is true but app is not connected to a server</exception>
            <remarks>Table element of the execution will be saved too</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.SaveExecutions(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord})">
            <summary>
            Saves a given list of ExecutionRecords to the DB in one single operation
            </summary>
            <param name="executions">Any IEnumerable list of ExecutionRecords</param>
            <exception cref="T:System.ArgumentNullException">Thrown if executions is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if executions is empty</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when onServer property is true for at least one execution but app is not connected to a server</exception>
            <remarks>It would be preferable for executions to implement an interface that exposes property Count</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.SaveIDEATable(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable)">
            <summary>
            Saves a given IDEATable to the DB
            </summary>
            <param name="table">An IDEATable object</param>
            <exception cref="T:System.ArgumentNullException">Thrown if table is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when table's IsOnServer property is true but app is not connected to a server</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.CreateAppWorkflowActionInfo(System.Guid,System.Guid,System.Guid)">
            <summary>
            Creates a new action info object
            </summary>
            <param name="actionId">id of the action</param>
            <param name="workflowId">id of the parent workflow</param>
            <param name="packageId">id of the current app</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.GetAppWorkflowActionInfos(System.Collections.Generic.IEnumerable{System.Guid},System.Guid,System.Guid)">
            <summary>
            Returns the list of action info for a specific workflow and app filtered by a given list of action ids (if list is null all actions are considered)
            </summary>
            <param name="actionIds">list of action ids</param>
            <param name="workflowId">parent workflow id</param>
            <param name="packageId">current app id</param>
            <returns>list of action infos</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.SaveAppWorkflowActionInfo(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo)">
            <summary>
            Saves the given action info into the database
            </summary>
            <param name="appWorkflowActionInfo">action info object</param>
            <exception cref="T:System.ArgumentNullException">thrown when given action info is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessTracking.DeleteAppWorkflowActionInfos(System.Collections.Generic.IEnumerable{System.Guid},System.Guid,System.Guid)">
            <summary>
            Deletes the list of action info for a specific workflow and app filtered by a given list of action ids (if list is null all actions are considered)
            </summary>
            <param name="actionIds">list of action ids</param>
            <param name="workflowId">parent workflow id</param>
            <param name="packageId">current app id</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1">
            <summary>
            Collection of object of type T; key of the collection is a property of T (in general ID)
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.#ctor">
            <summary>
            Constructor forces the collection to be case-insensitive (using OrdinalIgnoreCase) and case-preserving
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Add">
            <summary>
            Adds a new instance T to the collection and sets a random ID
            </summary>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Add(System.String)">
            <summary>
            Adds a new instance T to the collection and sets its ID (if id is of type string)
            </summary>
            <param name="id">ID or any other property that is used as a key in the collection</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Add(System.Guid)">
            <summary>
            Adds a new instance T to the collection and sets its ID (if id is of type guid)
            </summary>
            <param name="id">ID or any other property that is used as a key in the collection</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Item(System.Guid)">
            <summary>
            Gets the element with the specified key as Guid
            </summary>
            <param name="key">Key of the element to get as Guid</param>
            <returns>The element</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Contains(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key as guid
            </summary>
            <param name="key">Key as Guid to search for</param>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.Add(`0)">
            <summary>
            Adds an existing instance of type T to the collection
            </summary>
            <param name="item">An existing instance of type T</param>
            <returns>instance of T (same as item usually)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.DatabaseGenericCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items for type T
            </summary>
            <param name="items">enumerable list of items of type T</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.ICirDebugger">
            <summary>
            Interface for Custom Import Routine debuggers
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.ICirDebugger.CanDebugTask(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Boolean)">
            <summary>
            Determines whether the CIR executable is eligible for debugging
            </summary>
            <param name="cirExe">CIR executable descriptor</param>
            <param name="execCtx">Execution context</param>
            <param name="checkSelection">If true, method not only estimates whether the task is eligible for debugging but also checks if the task is selected for debugging</param>
            <returns>true if debugging is available</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.ICirDebugger.DebugTask(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Type)">
            <summary>
            Performs debugging of the CIR executable
            </summary>
            <param name="cirExe">CIR executable descriptor</param>
            <param name="execCtx">Execution context</param>
            <param name="taskContextType">The type of the context object that the .NET method expects.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.ICirDebugger.OnCirExecutionEvent(System.Object,System.EventArgs)">
            <summary>
            Cir execution events' sink
            </summary>
            <param name="sender">Event's sender</param>
            <param name="args">Event's args</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.ICirDebugger.GetTaskScript(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Loads IDEA script for IDEA script-based task
            </summary>
            <param name="cirExe">CIR executable descriptor</param>
            <param name="execCtx">Execution context</param>
            <returns>IDEA script for IDEA script-based task</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.IDebugger">
            <summary>
            Base interface for all CO debuggers
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.IDebugger.IsActive">
            <summary>
            Specifies whether the current debugger is active
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.IDebugger.IpProtectionOn">
            <summary>
            Specifies if itellectual property protection is activated
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Debugging.IDebugger.IsCancellationRequested">
            <summary>
            Specifies whether cancellation of debugging session was requested
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities">
            <summary>
            General interface for extensions' metadata
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities.ID">
            <summary>
            Extension's unique ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities.NameResourceId">
            <summary>
            Name of extension's name resource string in form of FullClassName.STRING_ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities.Name">
            <summary>
            Localizable extension's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities.ExtensionType">
            <summary>
            Optional type of extension helping to distinguish between extensions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionCapabilities.Culture">
            <summary>
            Extension's culture
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ILazyExtensionContainer">
            <summary>
            Base interface of Extensions' Container with lazy loading
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ILazyExtensionContainer`1">
            <summary>
            Base interface of Extensions' Container with lazy loading specifying extensions' metadata type
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ILazyExtensionContainer`1.EnumExtensions">
            <summary>
            Enumerates extensions currently in container for requesting metadata (without instatiating them)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ILazyExtensionContainer`1.EnumExtensions(System.Func{`0,System.Boolean})">
            <summary>
            Enumerates extensions currently in container for requesting metadata and using filter callback
            </summary>
            <param name="filter">filter callback</param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ILazyExtensionContainer`1.CurrentCulture">
            <summary>
            Culture used when recomposing the container
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities">
            <summary>
            Metadata contract describing report extensions' capabilities. Custom metadata attributes for reporting extensions have to be 
            conform with this contract
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.ReportType">
            <summary>
            Type of report extension
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.LimitedTo">
            <summary>
            The Limited To option means whether a report is limited for certain results. 
            For instance we will have SoD reports which do not make sense for non-SoD results.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.Viewer">
            <summary>
            What is used to view the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.ReportId">
            <summary>
            Unique name of the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.Sequence">
            <summary>
            Order of the plugin in the list of all plugins.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities.HasOptionsDialog">
            <summary>
            True if report has options dialog.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo">
            <summary>
            Public interface for a TestResultViewModel from SA.Controls.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.AuditObjectives">
            <summary>
            Returns the ITestInfo data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.Test">
            <summary>
            Returns the ITest data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.TestResultInfo">
            <summary>
            Returns the ITestResultInfo data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.TestResultDescriptor">
            <summary>
            Returns the ITestResultDescriptor data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.TestResultFile">
            <summary>
            Returns the ITestResultFile data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.TestResultFileInfo">
            <summary>
            Returns the ITestResultFileInfo data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.PackageName">
            <summary>
            Returns the PackageName data for TestResultViewModel for public use.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo.IsSelected">
            <summary>
            Returns true if current result is selecetd in Result and Reporting.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IUserInfo">
            <summary>
            Short information abut IDEA user
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IUserInfo.Id">
            <summary>
            User's ID (server only)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IUserInfo.Name">
            <summary>
            User's name (max.mustermann)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IUserInfo.DisplayName">
            <summary>
            User's display name (Mustermann, Max)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId">
            <summary>
            Defines the ids of the IDEA calendar table columns.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.Date">
            <summary>
            Current Date
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.Weekday">
            <summary>
            The language-dependent short or full name of the week.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.DayOfYear">
            <summary>
            Ordinal number of the day in the year.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.CalendarWeek">
            <summary>
            Calendar week formatted as yyyy-Www.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.CalendarWeekStart">
            <summary>
            Start date of the calendar week.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.CalendarWeekEnd">
            <summary>
            End date of the calendar week.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.IsPublicHoliday">
            <summary>
            Identifier for public holiday (1=yes, 0=no)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.Holiday">
            <summary>
            Name of holiday
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.IsSchoolVacation">
            <summary>
            Identifier for vacation (1=yes, 0=no)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.Vacation">
            <summary>
            Name of vacation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId.IsDayOff">
            <summary>
            Specifies whether the date value is on the custom list of days off (1=yes, 0=no).
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IAssociatingTagging">
            <summary>
            Extends ITagging interface. Allows creating test/table associations when tagging the table
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IAssociatingTagging.AssociatePrimary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,System.Object[])">
            <summary>
            Associate active IDEA table with primary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="optionsList">Controlling options</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IAssociatingTagging.AssociateSecondary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,System.String,System.Object[])">
            <summary>
            Associate active IDEA table with secondary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="inputFileAlias">Secondary input file alias</param>
            <param name="optionsList">Controlling options</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator">
            <summary>
            Defines an interface to a task that creates an IDEA calendar table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.WeekNumbering">
            <summary>
            Gets / sets the week numbering to be used.
            </summary>
            <returns>A WeekNumbering value.</returns>
            <remarks>Default value: 0 (WeekNumbering.Default).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.UseShortDayNames">
            <summary>
            Gets / sets a Boolean that specifies whether the column WEEKDAY will contain the short day names.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: False (WEEKDAY contains the 'full' day names).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.IncludeZeroPeriod">
            <summary>
            Gets / sets a Boolean that specifies whether the first row of the calendar table is the zero-period row
            corresponding to IDEA's zero-date.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: 0 (the calendar does not include the zero-period row).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.WeekendsOption">
            <summary>
            Gets / sets a value that specifies whether to include or not the weekends in the result.
            </summary>
            <returns>A WeekendsOption.</returns>
            <remarks>Default value: 0 (WeekendsOption.Include).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.WeekendsMask">
            <summary>
            Gets / sets a bit pattern specifying the weekends (bit 0: Sunday, bit 1: Monday, ... bit 6: Saturday).
            This property is ignored unless WeekendsOption is set to ExcludeCustomWeekends.
            </summary>
            <returns>An int.</returns>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.IncludeColumn(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Instructs the creator to include the column with the specified id in the calendar database.
            </summary>
            <param name="columnId">A CalendarColumnId value that specifies the id of the column to be included.
            <para>The column with id Date will always be included.</para>
            </param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.StartDate">
            <summary>
            Gets / sets the Gregorian calendar start date of the result table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.EndDate">
            <summary>
            Gets / sets the Gregorian calendar end date of the result table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.TableName">
            <summary>
            Gets / sets a string containing the name of the result table.
            </summary>
            <returns>A string.</returns>
            <remarks>Default value: null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.GenerateUniqueTableName">
            <summary>
            Gets / sets a Boolean that specifies whether the generator shall try to create an unique result table name starting 
            from the suggested name.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: False (the generator does not try to create an unique result table name).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.PerformTask">
            <summary>
            Generates the calendar table.
            </summary>
            <returns>An ICalendarTableCreatorResult reference to an object that holds the result of the execution.</returns>
            <exception cref="T:System.InvalidOperationException">If TableName is null or 
            if its consists of only white spaces and GenerateUniqueTableName is false.</exception>
            <exception cref="T:System.InvalidOperationException">If the database already exists.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.PublicHolidayFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the columns IS_PUBLIC_HOLIDAY and HOLIDAY.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.SchoolVacationFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the columns IS_SCHOOL_VACATION and VACATION.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreator.DayOffFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the column IS_DAY_OFF.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreatorResult">
            <summary>
            The interface ICalendarTableCreatorResult provides access to the result of a
            calendar table creation task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreatorResult.Name">
            <summary>
            Gets the name of the calendar table.
            </summary>
            <returns>A string containing the name of the calendar table.</returns>
            <remarks>This is the default COM property of the object and therefore its dispid is zero.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ICalendarTableCreatorResult.GetColumnName(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Gets the name of the calendar column with the specified id at the time the table was created.
            </summary>
            <param name="columnId"></param>
            <returns>The name of the column with the specified id, if the column was generated; otherwise, null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder">
            <summary>
            Defines an interface to a task that creates an IDEA column filter expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.Database">
            <summary>
            Gets / sets the name of the IDEA database or a reference to an IDEA database object
            on which the filter expression operates.
            </summary>
            <remarks>This property is optional. It is only needed in case the normal filter 
            expression exceeds the maximum allowed length.
            <para>The default value is null.</para>
            <para>The database can either take the database file name with or without extension and path or
            a reference to an IDEA database object as returned by Client.OpenDatabase.</para></remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.Equation">
            <summary>
            Gets a string containing the filter expression.
            </summary>
            <returns>A string containing the filter expression or null, if an expression was not generated. </returns>
            <remarks>Default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.ColumnName">
            <summary>
            Gets / sets the name of the column whose values will be filtered.
            </summary>
            <returns>A string.</returns>
            <remarks>Default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.TempColumnNames">
            <summary>
            Gets the array of temporary helper column names that were added to the source database in case the normal filter 
            expression exceeded the maximum allowed length.
            </summary>
            <returns>the array of temporary helper column names that were added to the source database in case the normal filter 
            expression exceeded the maximum allowed length.
            <para>An empty array is returned if the filter expression was not computed or if it did not exceed the maximum allowed 
            length.</para></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.Values">
            <summary>
            Gets / sets a reference to the object that supplies the list of column values 
            (usually a dialog's list element, e.g, a ContentOfFromToList or ContentOfSingleList or an object 
            that impl. IContentOfSingleListReader or IContentOfFromToListReader) for the equation.
            </summary>
            <returns>An object that contains the list of values or null, if no values where specified.</returns>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.IgnoreCase">
            <summary>
            Gets / sets a Boolean that specifies whether the equation has to consider case sensitivity.
            </summary>
            <returns>True, if the comparisons inside the equation shall be case insensitive; otherwise, false.</returns>
            <remarks>The default value is False.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.GetMatchingRecords">
            <summary>
            Gets / sets a boolean that specifies whether the equation shall select all the records
            whose ColumnName value belongs to the given set of values or all the records that are
            not part of the given value set.
            </summary>
            <returns>True, if the equation shall select all records that belong to the specified value list; false,
            if the equation shall select all records that do not belong to the specified value list.</returns>
            <remarks>Default value: True</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.PerformTask">
            <summary>
            Performs the task by building the equation or the requested file.
            </summary>
            <returns>An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or an equivalent equation could not be generated.</para>
            <para>0 in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.Clear">
            <summary>
            Resets the object to its default state.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IColumnFilterBuilder.ReservedLength">
            <summary>
            Gets / sets a non-negative integer that represents the reserved equation length.
            </summary>
            <remarks>This property can be used to limit the maximum length of the equation to 
            the difference between IDEA's max. equation length and the specified amount.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ISpecialDayFilter">
            <summary>
            Defines a special day (e.g., public holiday, vacation or day off) filter for the calendar table creator.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ISpecialDayFilter.SpecialDayNameMaxLength">
            <summary>
            Gets the max length of a special day name in the filter.
            </summary>
            <returns>A non-negative int.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ISpecialDayFilter.IsSpecialDay(System.DateTime,System.String@)">
            <summary>
            Checks whether a date value is a special day.
            </summary>
            <param name="value">A DateTime value to be checked.</param>
            <param name="specialDayName">A reference to a string that receives the name, if available, of
            the special day.</param>
            <returns>True, if value is a special day; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogInvoker">
            <summary>
            Invokes a macro dialog.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogInvoker.NewTaskParameters">
            <summary>
            Gets a reference to a new IMacroDialogTaskParameters instance
            that can be used to specify the actual parameters for a macro dialog
            invocation.
            </summary>
            <returns>An IMacroDialogTaskParameters reference.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogInvoker.PerformTask(System.String,Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskParameters)">
            <summary>
            Invokes the specified dialog using an optional set of
            parameters.
            </summary>
            <param name="dialogId">A string containing the identifier of
            the dialog to invoke.
            <para>An exception is thrown if the identifier is null.</para>
            </param>
            <param name="args">An IMacroDialogTaskParameters reference
            to an object containing the actual parameters for the dialog
            invocation or null if the invocation does not require any actual parameters.</param>
            <returns>An IMacroDialogTaskResult reference to an object
            containing the results of the invocation.</returns>
            <exception cref="T:System.ArgumentNullException">If dialogId is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the dialog
            with the specified id was not found.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskParameters">
            <summary>
            Holds the parameters used to invoke a macro dialog.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskParameters.TableNames">
            <summary>
            Gets a reference to a case-insensitive dictionary that maps table aliases to table file names. 
            This collection can be used to specifiy the tables that
            the dialog expects.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskParameters.TablesAreOnServer">
            <summary>
            Gets / sets a boolean value indicating whether the tables in TableNames are located on the server.
            </summary>
            <returns>True if the tables are located on the server; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskParameters.Inputs">
            <summary>
            Gets a reference to a case-insensitive dictionary that maps control names to control content values. 
            This collection can be used to specify
            the actual parameters of the dialog.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskResult">
            <summary>
            Holds the results of a macro dialog invocation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskResult.AllOK">
            <summary>
            Gets a boolean value indicating whether the dialog was processed and all parameters were OK.
            </summary>
            <returns>True if the dialog was processed and all parameters were OK; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IMacroDialogTaskResult.Outputs">
            <summary>
            Gets a reference to a dictionary containing the new values of the parameters.
            </summary>
            <returns>A case-insensitive dictionary that maps control names to control content values
            containing the actual values of the parameters that were set during the invocation.
            An empty collection is returned if the dialog was cancelled.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging">
            <summary>
            Light tagging.
            Reads and performs tagging without checking for correctness against the database.
            To be used on idea server, idea script and places wher integrity is not a must.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.GetTag(System.String)">
            <summary>
            Returns the ID of the tag assigned to the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the tag.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.GetFieldName(System.String)">
            <summary>
            Returns the name of the field assigned to the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.RemoveTag(System.String)">
            <summary>
            Removes the tagging from the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the removed field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.RemoveAllTags">
            <summary>
            Removes tagging from all table columns.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.SetTag(System.String,System.String)">
            <summary>
            Adds a tag to the specified field name.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.Save">
            <summary>
            Saves defined tagging to disk file.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.NoSharedTagging">
            <summary>
            Specifies shared tagging publishing has to be suppressed
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ITagging.SaveWithTestFilter(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves defined tagging to disk file; test filter for cretaing tests associations can be specified.
            <param name="testFilter">Test filter for cretaing tests associations.</param>
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker">
            <summary>
            Defines an interface to a task that checks the wellformedness of EU VAT registration numbers.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.Value">
            <summary>
            Gets / sets a string containing the value to be checked.
            </summary>
            <returns>A string.</returns>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.CountryCode">
            <summary>
            Gets the language-independent country code of Value.
            </summary>
            <returns>A string containing the language-independent country code of Value or null, if the country code is not available.</returns>
            <remarks>The default value is null. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.Country">
            <summary>
            Gets the language-dependent country name of Value.
            </summary>
            <returns>A string containing the language-dependent country name of Value or null, if the country name is not available.</returns>
            <remarks>The default value is null. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.StructureValidity">
            <summary>
            Gets a boolean that specifies whether the structure of Value is valid.
            </summary>
            <returns>True, if Value's structure is valid; otherwise, false. </returns>
            <remarks>The default value is false. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.RuleValidity">
            <summary>
            Gets a VatConstructionRulesValidationResult value that specifies whether Value fulfills the VAT construction rules of its country.
            </summary>
            <returns>
            RulesFulfilled, if Value fulfills all construction rules, 
            RulesNotFulfilled, if Value does not fulfill the construction rules or 
            RulesNotAvailable, if the construction rules of Value's country are not available. </returns>
            <remarks>The default value is RulesNotFulfilled. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IVatRegNoChecker.PerformTask">
            <summary>
            Executes the task and stores the results in CountryCode, Country, StructureValidity and RuleValidity.
            </summary>
            <remarks>The method resets CountryCode, Country, StructureValidity and RuleValidity to their default state before performing the check.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekendsOption">
            <summary>
            Defines the options for handling the weekends.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekendsOption.Include">
            <summary>
            The weekends will be included in the calendar.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekendsOption.ExcludeIdeaWeekends">
            <summary>
            The weekends on IDEA's weekend list will not be included in the calendar.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekendsOption.ExcludeCustomWeekends">
            <summary>
            The weekends on the caller-supplied weekend list will not be included in the calendar.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekNumbering">
            <summary>
            Defines the available week numberings.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekNumbering.Default">
            <summary>
            Default: In case the first day of the week is Monday and the first week of a year is the week 
            containing the year's first Thursday, then the calendar week will be calculated as an 
            ISO-8601 compliant calendar week value. 
            In all other cases, the rules of the current user's culture will be used.
            See Req. #30067
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekNumbering.Iso8601">
            <summary>
            ISO-8601
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekNumbering.UKTax">
            <summary>
            UK HMRC tax week numbering. See also: http://www.merlyn.demon.co.uk/weekinfo.htm#UKTW
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands">
            <summary>
            Interface for the creator of all framework opperations.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.SimpleCommands">
            <summary>
            Create an instance of Audicon.SmartAnalyzer.MacroCommands.GeneralCommands
            </summary>
            <returns>Returns an instance of SimpleCommands</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.ProtectIP">
            <summary>
            Functionality for protecting the intelectual property for Idea Macros.
            </summary>
            <returns>An instance of ProtectIp class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.EquationBuilder">
            <summary>
            Functionality for building Idea equations.
            </summary>
            <returns>An instance of Equation Builder class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.TagManagement">
            <summary>
            Functionality for tags within Idea tables.
            </summary>
            <returns>An instance of TagManagement class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.IndexCleaner">
            <summary>
            Functionality to delete indices.
            </summary>
            <returns>An instance of IndexCleaner class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.ContentEquationBuilder">
            <summary>
            Get an instance of ContentEquationBuilder.
            </summary>
            <returns>An instance of ContentEquationBuilder class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.CreateDatabase">
            <summary>
            Get an instance of CreateDatabase.
            </summary>
            <returns>an istance of CreateDatabase boud to the current execution context.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.ProjectAdministration">
            <summary>
            Script support for Project Administration.
            </summary>
            <returns>An instance of CaseAdministrator class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.FieldManagement(System.Object)">
            <summary>
            Get an instance of field manager for IDEA database name or IDEA database reference
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
            <returns>Field manager instance</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.NewColumnFilterBuilder">
            <summary>
            Constructs a new ColumnFilterBuilder that can be used to create IDEA column filter expressions.
            </summary>
            <returns>An IColumnFilterBuilder reference.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.NewVatRegNoChecker">
            <summary>
            Constructs a new VatRegNoChecker that can be used to check the wellformedness of EU VAT registration numbers.
            </summary>
            <returns>An IVatRegNoChecker.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.GetFileSystem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.GlobalParameters(System.Object[])">
            <summary>
            Script support for Extended parameters (a.k.a. Global prameters)
            </summary>
            <returns>An instance of ExtendedParameterizer class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.NewCalendarTableCreator">
            <summary>
            Constructs a new CalendarTableCreator that can be used to create an IDEA calendar table.
            </summary>
            <returns>An ICalendarTableCreator.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.NewSpecialDayFilter(System.Object)">
            <summary>
            Constructs a new special day filter from the specified data or data provider object.
            </summary>
            <param name="values">An object that specifies the data or data provider object for the filter object.
            <para>Accepted types:</para>
            <para>1) IContentOfListReader with the list element of type Date.</para>
            <para>2) IEnumerable&lt;DateTime&gt;.</para>
            <para>3) IEnumerable for a collection of boxed DateTime values.</para>
            <para>4) IEnumerable for a collection whose elements are of type a) DateTime, b) object array of min length two, having 
            at index 0 the IDEA string rep. (format yyyyMMdd) of 
            a valid Gregorian calendar date and at index 1 the name of the special day, c) String containing the 
            IDEA string rep. of a valid Gregorian calendar date or d) SpecialDayData.
            </para>
            <para>5) IEnumerable&lt;SpecialDayData&gt;.</para></param>
            <returns>An ISpecialDayFilter reference to the filter object.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is of an unsupported type or if it contains items of an unknown 
            format or nulls.</exception>
            <remarks>If values is an empty collection of a supported type, the method returns an empty filter.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.NewAnonymousSpecialDayFilter(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader)">
            <summary>
            Constructs a new anonymous special day (e.g., day off) filter from the specified list of date or date range values.
            </summary>
            <param name="values">An IContentOfListReader reference to a list of date or date range values.</param>
            <returns>An ISpecialDayFilter reference to the filter object.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values's element type is not Date.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.IScriptCommands.ExternalFilters(System.Object[])">
            <summary>
            Constructs an instance of External filters' administrator.
            </summary>
            <param name="args">Optional paramaters.</param>
            <returns>Instance of External filters' administrator.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfFromToListReader">
            <summary>
            Defines an interface for reading the contents of a list containing from-to-values represented as object arrays of length two,
            having the from-value at index 0 and the to-value at index 1.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader">
            <summary>
            Defines an interface for reading the contents of a list.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.IsNumeric">
            <summary>
            Gets a Boolean that specifies whether the list holds Booleans.
            </summary>
            <returns>True, if the list holds Booleans; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.IsDecimal">
            <summary>
            Gets a Boolean that specifies whether the list holds Decimals.
            </summary>
            <returns>True, if the list holds Decimals; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.IsString">
            <summary>
            Gets a Boolean that specifies whether the list holds Strings.
            </summary>
            <returns>True, if the list holds Strings; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.IsDate">
            <summary>
            Gets a Boolean that specifies whether the list holds Dates.
            </summary>
            <returns>True, if the list holds Dates; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.IsTime">
            <summary>
            Gets a Boolean that specifies whether the list holds time values.
            </summary>
            <returns>True, if the list holds time values; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.SupportsWildcards">
            <summary>
            Gets  Boolean that specifies whether the wildcards are accepted.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.List">
            <summary>
            Gets the list of values represented as strings formatted using the invariant culture.
            </summary>
            <returns>The list of values represented as strings formatted using the invariant culture.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader.GetList">
            <summary>
            Gets an array containing the values of the list represented as strings formatted using the current culture.
            </summary>
            <returns>An object array.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfSingleListReader">
            <summary>
            Defines an interface for reading the contents of a list containing single values.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.RoutineResources.IRoutineStringAccessor">
            <summary>
            The interface IRoutineStringAccessor provides read-only access to a routine's set of string resources.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.RoutineResources.IRoutineStringAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified string resource.
            </summary>
            <param name="name">The name of the string resource whose value is requested.
            <para>The string names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para></param>
            <returns>The value of the specified string resource. 
            If the specified string is not found, an empty string is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.RoutineResources.IStringGetter">
            <summary>
            IStringGetter is a very simple interface that provides case-insensitive
            lookup of named string resources.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.RoutineResources.IStringGetter.GetString(System.String)">
            <summary>
            Gets the value of the string with the specified name.
            </summary>
            <param name="name">The name of the string resource whose value is requested.
            <para>The string names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para></param>
            <returns>The value of the specified string resource. 
            If the specified string is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory">
            <summary>
            Provides functionality for creating instances of other access point classes
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessCommon">
            <summary>
            Creates entry point for general functionality for all databases
            </summary>
            <returns>DataAccessCommon</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessStorage">
            <summary>
            Returns DataAccessStorage instance with default constructor
            </summary>
            <returns>DataAccessStorage</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessStorage(System.String)">
            <summary>
            Returns DataAccessStorage instance that uses the provided file
            </summary>
            <param name="filePath">path of the db</param>
            <returns>DataAccessStorage</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessTracking">
            <summary>
            Returns DataAccessTracking instance with default constructor
            </summary>
            <returns>DataAccessTracking</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessTracking(System.String)">
            <summary>
            Returns DataAccessTracking instance that uses the provided file
            </summary>
            <param name="filePath">path of the db</param>
            <returns>DataAccessTracking</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessReporting">
            <summary>
            Returns DataAccessReporting instance with default constructor
            </summary>
            <returns>DataAccessReporting</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessReporting(System.String)">
            <summary>
            Returns DataAccessReporting instance that uses the provided file
            </summary>
            <param name="filePath">path of the db</param>
            <returns>DataAccessReporting</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessGlobalParameters">
            <summary>
            Creates entry point for global parameters database wrapper using the default location of the file
            </summary>
            <returns>IDataAccessGlobalParameters interface</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessGlobalParameters(System.String)">
            <summary>
            Creates entry point for global parameters database wrapper using the specified location of the file
            </summary>
            <param name="filePath">location of the database</param>
            <returns>IDataAccessGlobalParameters interface</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDialogDataAccess(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Creates entry point for dialog data access providing the location
            </summary>
            <param name="location">Location of data</param>
            <returns>IDialogDataAccess interface</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessRuntimeFilters">
            <summary>
            Creates entry point for runtime filters
            </summary>
            <returns>IDataAccessRuntimeFilters interface</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessFactory.GetDataAccessRuntimeFilters(System.String)">
            <summary>
            Creates entry point for runtime filters using the specified location of the file
            </summary>
            <param name="filePath">location of the database</param>
            <returns>IDataAccessRuntimeFilters interface</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting">
            <summary>
            Interface for accessing Reporting database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.CompactAndRepairDatabase">
            <summary>
            Tryes to repair current database and compact it
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.EmptyDatabase">
            <summary>
            Empties the database.
            Deletes every record from all tables except for the version table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.GetDBVersion">
            <summary>
            Get the version of the current databse
            </summary>
            <returns>IDBVersion object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.SaveDBVersion(Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion)">
            <summary>
            Saves the version onformation for current database
            </summary>
            <param name="dbVersion">IDBVersion object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.RenameUser(System.String,System.String)">
            <summary>
            Rename user oldUser to newUser for all his test results
            </summary>
            <param name="oldUser">old user name</param>
            <param name="newUser">new user name</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of user name (after trimming) is > 128 for either old or new name</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.CreateTestResult(System.Guid)">
            <summary>
            Creates a new test reult object
            </summary>
            <param name="sessionID">Guid that identifies session</param>
            <returns>ITestResult object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.GetTestResults(System.String)">
            <summary>
            Returns a list of test results based on a specified filter
            </summary>
            <param name="filter">The part of the SQL statement after WHERE; if null or empty filter will be considered "true"</param>
            <returns>list of test results (key is sessionID)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.GetSyncManager">
            <summary>
            Returns synchronization manager 
            </summary>
            <returns>ISyncManager object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.DeleteTestResults(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Deletes the test results that match the list of session ids provided
            </summary>
            <param name="sessionIDs">any list of session ids</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.SaveTestResult(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo)">
            <summary>
            Saves a given TestResult to the DB
            </summary>
            <param name="testResult">A TestResult object</param>
            <exception cref="T:System.ArgumentNullException">Thrown if testResult is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessReporting.GetResultFiles(System.Boolean,System.String)">
            <summary>
            Returns a list of result files for a given alias
            </summary>
            <param name="onServer">returns only entries from server or client</param>
            <param name="filter">The part of the SQL statement after WHERE; if null or empty filter will be considered "true"</param>
            <returns>list of test result files</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage">
            <summary>
            Interface for accessing content database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.IsPPUContext">
            <summary>
            Gets and sets PPU context
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CompactAndRepairDatabase">
            <summary>
            Tries to repair current database and compact it
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetDBVersion">
            <summary>
            Get the version of the current database
            </summary>
            <returns>IDBVersion object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveDBVersion(Audicon.SmartAnalyzer.Common.Interfaces.IDBVersionStorage)">
            <summary>
            Saves the version information for current database
            </summary>
            <param name="dbVersion">IDBVersion object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GenerateTimestampFile">
            <summary>
            Generates and sets the timestamp file associated with a database
            </summary>
            <returns>Path to the timestamp file</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetDBTimestamp(System.Boolean)">
            <summary>
            Returns database timestamp from db itself or from timestamp file
            </summary>
            <param name="fromFile">if set the timestamp is returned from timestamp file; if this is not found it is created</param>
            <returns>timestamp</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreatePackage(System.Guid,System.String)">
            <summary>
            Creates a blank Package
            </summary>
            <param name="logicalID">logical id of the Package</param>
            <param name="languageCode">language code</param>
            <returns>The newly created Package</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePackage(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage)">
            <summary>
            Saves a package object to database
            </summary>
            <param name="package">Package object to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePackages(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage})">
            <summary>
            Saves a batch of package objects to database
            </summary>
            <param name="packages">Any IEnumerable collection of packages</param>
            <exception cref="T:System.ArgumentNullException">Thrown if packages is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if packages is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeletePackages(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Package object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Package ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPackages(System.Boolean)">
            <summary>
            Returns all the Package objects stored in the database
            </summary>
            <param name="ignoreVisibility">if set to false only valid and visible packages are returned</param>
            <returns>Collection of Package objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPackages(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Returns the Package objects stored in the database that match one of the ids provided in the list
            </summary>
            <param name="idList">list of ids of packages</param>
            <param name="ignoreVisibility">if set to false only valid and visible packages are returned</param>
            <returns>Collection of Package objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPackagesByAlias(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns the Package objects stored in the database that match one of the aliases provided in the list
            </summary>
            <param name="aliasList">list of aliases of packages</param>
            <param name="ignoreVisibility">if set to false only valid and visible packages are returned</param>
            <returns>Collection of Package objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.ContainsCloudPackages(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Check if the given list of packge ids contains any cloud package; if the list is null all the packages from the database will be considered
            </summary>
            <param name="packageIdList">list of package ids</param>
            <returns>True if at least one cloud package was found, false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SetPackageForEntities(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity})">
            <summary>
            Assign an existing package to a list of db object
            </summary>
            <param name="package">Package object</param>
            <param name="list">List of Licensable Entities</param>
            <exception cref="T:System.ArgumentNullException">Thrown if list is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when the package was not previously saved to db or list is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetEntitiesForPackage(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,Audicon.SmartAnalyzer.Common.Types.EntityType)">
            <summary>
            Return a list of entity information for the given package and entity type
            </summary>
            <param name="package">Package to which the entities belong to; null can be used for 'orphan' entities</param>
            <param name="type">Entity type</param>
            <returns>List of IDatabaseEntity</returns>
            <exception cref="T:System.ArgumentException">thrown when the given value is not valid for the base type enum</exception>
            <remarks>if type is set to unknown all entities will be returned but their name is missing</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SetVisibleState(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity})">
            <summary>
            Set visible state for a list of entities
            </summary>
            <param name="list">List of Licensable Entities</param>
            <exception cref="T:System.ArgumentNullException">Thrown if list is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when the package was not previously saved to db or list is empty</exception>
            <remarks>Fill the list only with changed data to avoid unneeded database operations</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPackageOperations">
            <summary>
            Get the list of operation performed in the current db
            </summary>
            <returns>List of IPackageOperation objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateTag(System.String)">
            <summary>
            Creates a blank Tag object
            </summary>
            <param name="id">ID of the Tag</param>
            <returns>The newly created Tag</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTag(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag)">
            <summary>
            Saves a tag object to database
            </summary>
            <param name="tag">Tag object to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTags(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag})">
            <summary>
            Saves a batch of tag objects to database
            </summary>
            <param name="tags">Any IEnumerable collection of tags</param>
            <exception cref="T:System.ArgumentNullException">Thrown if tags is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if tags is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteTags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes a Tag object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Tag ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTags">
            <summary>
            Returns all the Tag objects stored in the database without their values
            </summary>
            <returns>Collection of Tag objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTags(Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
            Returns all the Tag objects stored in the database with their values (in case additionalData contains Values4Tag flag)
            </summary>
            <param name="additionalData">List of flags, but only Values4Tag is considered</param>
            <returns>Collection of Tag objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateProperty">
            <summary>
            Creates a blank Property
            </summary>
            <returns>The newly created Property</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveProperty(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty)">
            <summary>
            Saves a Property to the database
            </summary>
            <param name="property">The Property to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveProperties(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty})">
            <summary>
            Saves a batch of property objects to database
            </summary>
            <param name="properties">Any IEnumerable collection of properties</param>
            <exception cref="T:System.ArgumentNullException">Thrown if properties is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if properties is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteProperties(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Property object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Property ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetProperties">
            <summary>
            Returns all the Property objects stored in the database without their values
            </summary>
            <returns>Collection of Property objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetProperties(Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
             Returns all the Property objects stored in the database with their values (in case additionalData contains Values4Property flag)
            </summary>
            <param name="additionalData">List of flags, but only Values4Property is considered</param>
            <returns>Collection of Property objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateSpecialProperty(Audicon.SmartAnalyzer.Common.Types.SpecialProperty)">
            <summary>
            Get special purpose property by its type
            </summary>
            <param name="type">Type of the special property</param>
            <returns>property object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateTest(System.Guid,System.String)">
            <summary>
            Creates a blank Test
            </summary>
            <param name="logicalID">logical id of the test</param>
            <param name="languageCode">language code</param>
            <returns>The newly created Test</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTest(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest)">
            <summary>
            Saves a Test to the database
            </summary>
            <param name="test">The Test to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTests(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest})">
            <summary>
            Saves a batch of test objects to database
            </summary>
            <param name="tests">Any IEnumerable collection of tests</param>
            <exception cref="T:System.ArgumentNullException">Thrown if tests is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if tests is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteTests(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Test object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Test ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTests(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a Test object or more from database containing only the basic information
            </summary>
            <param name="idList">Any IEnumerable collection of Property ids; if set to null all tests will be returned</param>
            <returns>Collection of Test objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTests(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
            Returns a Test object or more from database containing some additional information as specified in the additionalData
            </summary>
            <param name="idList">Any IEnumerable collection of Property ids; if set to null all tests will be returned</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <returns>Collection of Test objects</returns>
            <remarks>Only visible tests will be returned</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTests(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean)">
            <summary>
            Returns a Test object or more from database containing some additional information as specified in the additionalData
            </summary>
            <param name="idList">List of Test ids</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param> 
            <returns>Collection of Test objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTests(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Returns a Test object or more from database containing some additional information as specified in the additionalData
            </summary>
            <param name="idList">List of Test ids</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param> 
            <param name="ignoreEncoding">If set to false only tests which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of Test objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTestsForDataFile(System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean)">
            <summary>
            Returns a Test object or more from database that have set at least one of the values specified in the list for property BasicTestDataFile
            </summary>
            <param name="valueList">List of values</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param>
            <returns>Collection of Test objects or null (in case the list of values is not correct)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTestsForDataFile(System.Collections.Generic.IEnumerable{System.String},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Returns a Test object or more from database that have set at least one of the values specified in the list for property BasicTestDataFile
            </summary>
            <param name="valueList">List of values</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param>
            <param name="ignoreEncoding">If set to false only tests which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of Test objects or null (in case the list of values is not correct)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTestsForLogicalIds(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean)">
            <summary>
            Returns a Test object or more from database that have set at least one of the values specified in the list for property BasicTestDataFile
            </summary>
            <param name="idList">List of logical ids</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param> 
            <returns>Collection of Test objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTestsForLogicalIds(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Returns a Test object or more from database that have set at least one of the values specified in the list for property BasicTestDataFile
            </summary>
            <param name="idList">List of logical ids</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only visible tests will be returned</param> 
            <param name="ignoreEncoding">If set to false only tests which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of Test objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetFilteredObjects``1(System.Collections.Generic.IEnumerable{``0},Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Filters a list of content objects according to the given equation
            </summary>
            <typeparam name="T">type of the objects deriving from IContentObject</typeparam>
            <param name="validObjects">list of content objects to filter</param>
            <param name="equation">matching equation in expression format</param>
            <returns>list of content objects containing only the objects that match the given equation</returns>
            <exception cref="T:System.ArgumentNullException">thrown when any of the parameters is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetFilteredObjects``1(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Filters a list of content objects from the database that match a given equation
            </summary>
            <typeparam name="T">type of the objects deriving from IContentObject</typeparam>
            <param name="equation">matching equation in expression format</param>
            <param name="additionalData">list of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only valid and visible objects are returned</param>
            <param name="ignoreEncoding">If set to false only objects which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>list of content objects containing only the objects that match the given equation</returns>
            <exception cref="T:System.ArgumentNullException">thrown when any of the parameters is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetFilteredObjects``1(System.Collections.Generic.IEnumerable{``0},Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList)">
            <summary>
            Filters a list of content objects according to the given equation
            </summary>
            <typeparam name="T">type of the objects deriving from IContentObject</typeparam>
            <param name="validObjects">list of content objects to filter</param>
            <param name="equation">matching equation in IEquationPartList format</param>
            <returns>list of content objects containing only the objects that match the given equation</returns>
            <exception cref="T:System.ArgumentNullException">thrown when any of the parameters is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetFilteredObjects``1(Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPartList,Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Filters a list of content objects from the database that match a given equation
            </summary>
            <typeparam name="T">type of the objects deriving from IContentObject</typeparam>
            <param name="equation">matching equation in IEquationPartList format</param>
            <param name="additionalData">list of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <param name="ignoreVisibility">If set to false only valid and visible objects are returned</param>
            <param name="ignoreEncoding">If set to false only objects which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>list of content objects containing only the objects that match the given equation</returns>
            <exception cref="T:System.ArgumentNullException">thrown when any of the parameters is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTest(System.Guid)">
            <summary>
            Gets the basic data for only one Test
            </summary>
            <param name="id">ID of the Test</param>
            <returns>Test object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTest(System.Guid,Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
            Gets the basic data for only one Test + some additional information as specified in the additionalData
            </summary>
            <param name="id">ID of the Test</param>
            <param name="additionalData">List of flags (Dialog4Test, Info4Test, Macro4Test, Properties4Test, Tags4Test)</param>
            <returns>Test object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateTree(System.Guid,System.String)">
            <summary>
            Creates a blank Tree
            </summary>
            <param name="logicalID">logical id of the Tree</param>
            <param name="languageCode">language code</param>
            <returns>The newly created Tree</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTree(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITree)">
            <summary>
            Saves a Tree to the database
            </summary>
            <param name="tree">The Tree to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveTrees(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITree})">
            <summary>
            Saves a batch of tree objects to database
            </summary>
            <param name="trees">Any IEnumerable collection of trees</param>
            <exception cref="T:System.ArgumentNullException">Thrown if trees is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if trees is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteTrees(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Tree object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Tree ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTrees(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a Tree object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Tree ids; if set to null all trees will be returned</param>
            <returns>Collection of Tree objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTrees(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Returns a Tree object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of Tree ids</param>
            <param name="ignoreVisibility">If set to false only visible trees will be returned</param> 
            <returns>Collection of Tree objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetTree(System.Guid)">
            <summary>
            Gets the data for only one Tree
            </summary>
            <param name="id">ID of the Tree</param>
            <returns>Test object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetCachedTreesAsynchronously(System.Threading.CancellationToken,System.Action{Audicon.SmartAnalyzer.Common.Types.TreeCalculationState,System.Guid,System.ComponentModel.RunWorkerCompletedEventArgs},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Calculates the cached trees in a separate thread and returns information via callback delegate
            </summary>
            <param name="callBack">callback delegate used to return information for each single tree</param>
            <param name="token"> cancellation token</param>
            <param name="packageIds">list of package ids that the trees will have as parent; if null all the trees will be returned; if empty no tree will be returned</param>
            <param name="treeIds">list of tree ids; if null all the trees will be returned; if empty no tree will be returned</param>
            <remarks>first parameter returns the state of the processing
            second parameter return the id of the tree processed
            third parameter returns additional data depending on state
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetCachedTrees(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a list of cached trees 
            </summary>
            <param name="packageIds">list of package ids that the trees will have as parent; if null all the trees will be returned; if empty no tree will be returned</param>
            <param name="treeIds">list of tree ids; if null all the trees will be returned; if empty no tree will be returned</param>
            <returns>list of IUniqueIdentifierTree objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateDataRequest(System.Guid,System.String)">
            <summary>
            Creates a blank DataRequest
            </summary>
            <param name="logicalID">logical id of the DataRequest</param>
            <param name="languageCode">language code</param>
            <returns>The newly created DataRequest</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveDataRequest(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDataRequest)">
            <summary>
            Saves a DataRequest to the database
            </summary>
            <param name="dataRequest">The DataRequest to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveDataRequests(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDataRequest})">
            <summary>
            Saves a batch of DataRequest objects to database
            </summary>
            <param name="dataRequests">Any IEnumerable collection of DataRequest</param>
            <exception cref="T:System.ArgumentNullException">Thrown if DataRequests is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if DataRequests is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteDataRequests(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a DataRequest object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of DataRequest ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetDataRequests(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a DataRequest object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of DataRequest ids; if set to null all DataRequests will be returned</param>
            <returns>Collection of DataRequest objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetDataRequests(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Returns a DataRequest object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of DataRequest ids</param>
            <param name="ignoreVisibility">If set to false only visible DataRequests will be returned</param> 
            <returns>Collection of DataRequest objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetDataRequest(System.Guid)">
            <summary>
            Gets the data for only one DataRequest
            </summary>
            <param name="id">Id of the DataRequest</param>
            <returns>DataRequest object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateReportingPlugin(System.Guid,System.String)">
            <summary>
            Creates a blank ReportingPlugin
            </summary>
            <param name="logicalID">logical id of the ReportingPlugin</param>
            <param name="languageCode">language code</param>
            <returns>The newly created ReportingPlugin</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveReportingPlugin(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IReportingPlugin)">
            <summary>
            Saves a ReportingPlugin to the database
            </summary>
            <param name="ReportingPlugin">The ReportingPlugin to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveReportingPlugins(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IReportingPlugin})">
            <summary>
            Saves a batch of ReportingPlugin objects to database
            </summary>
            <param name="ReportingPlugins">Any IEnumerable collection of ReportingPlugin</param>
            <exception cref="T:System.ArgumentNullException">Thrown if ReportingPlugins is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if ReportingPlugins is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteReportingPlugins(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a ReportingPlugin object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of ReportingPlugin ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetReportingPlugins(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a ReportingPlugin object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of ReportingPlugin ids; if set to null all ReportingPlugins will be returned</param>
            <returns>Collection of ReportingPlugin objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetReportingPlugins(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Returns a ReportingPlugin object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of ReportingPlugin ids</param>
            <param name="ignoreVisibility">If set to false only visible ReportingPlugins will be returned</param> 
            <returns>Collection of ReportingPlugin objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetReportingPlugin(System.Guid)">
            <summary>
            Gets the data for only one ReportingPlugin
            </summary>
            <param name="id">Id of the ReportingPlugin</param>
            <returns>ReportingPlugin object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreatePseudoCir(System.Guid,System.String)">
            <summary>
            Creates a blank pseudo Cir object
            </summary>
            <param name="logicalId">logical id of the Cir</param>
            <param name="languageCode">language code</param>
            <returns>The newly created pseudo Cir</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePseudoCir(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCir)">
            <summary>
            Saves a Pseudo Cir to the database
            </summary>
            <param name="pseudoCir">The PseudoCir to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePseudoCirs(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCir})">
            <summary>
            Saves a batch of PseudoCir objects to database
            </summary>
            <param name="pseudoCirs">Any IEnumerable collection of Pseudo Cir objects</param>
            <exception cref="T:System.ArgumentNullException">Thrown if pseudoCirs is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if pseudoCirs is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeletePseudoCirs(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Pseudo Cir object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of guids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCirs(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a PseudoCir object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of guids; if set to null all Pseudo Cir objects will be returned</param>
            <returns>Collection of DataRequest objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCirs(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Boolean)">
            <summary>
            Returns a PseudoCir object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of PseudoCir ids</param>
            <param name="ignoreVisibility">If set to false only visible PseudoCirs will be returned</param> 
            <param name="ignoreEncoding">If set to false only PseudoCirs which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of PseudoCir objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCir(System.Guid)">
            <summary>
            Gets the data for only one PseudoCir
            </summary>
            <param name="id">Id of the PseudoCir</param>
            <returns>PseudoCir object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreatePseudoCirExtension(System.Guid,System.String)">
            <summary>
            Creates a blank pseudo CIR Extension object
            </summary>
            <param name="logicalId">logical id of the CIR Extension</param>
            <param name="languageCode">language code</param>
            <returns>The newly created pseudo CIR Extension</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePseudoCirExtension(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCirExtension)">
            <summary>
            Saves a pseudo CIR Extension to the database
            </summary>
            <param name="pseudoCirExtension">The Pseudo Cir Extension to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SavePseudoCirExtensions(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCirExtension})">
            <summary>
            Saves a batch of Pseudo Cir Extension objects to database
            </summary>
            <param name="pseudoCirExtensions">Any IEnumerable collection of Pseudo Cir Extension</param>
            <exception cref="T:System.ArgumentNullException">Thrown if Pseudo Cir Extension is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if PseudoCir is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeletePseudoCirExtensions(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a Pseudo Cir Extension object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of guids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCirExtensions(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns a Pseudo Cir Extension object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of guids; if set to null all Pseudo Cirs Extension will be returned</param>
            <returns>Collection of Pseudo Cir Extension objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCirExtensions(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Boolean)">
            <summary>
            Returns a Pseudo Cir Extension object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of guids</param>
            <param name="ignoreVisibility">If set to false only visible PseudoCirExtensions will be returned</param> 
            <param name="ignoreEncoding">If set to false only PseudoCirExtensions which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of Pseudo Cir Extension objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetPseudoCirExtension(System.Guid)">
            <summary>
            Gets the data for only one Pseudo Cir Extension
            </summary>
            <param name="id">Id of the Pseudo Cir Extension</param>
            <returns>Pseudo Cir Extension object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateAppWorkflow(System.Guid,System.String)">
            <summary>
            Creates a blank AppWorkflow
            </summary>
            <param name="logicalId">logical id of the ReportingPlugin</param>
            <param name="languageCode">language code</param>
            <returns>The newly created AppWorkflow</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when languageCode is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateAppWorkflowAction(Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionType)">
            <summary>
            Creates a blank AppWorkflowAction woth the specific type
            </summary>
            <param name="type">type of the action</param>
            <returns>The newly created action</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveAppWorkflow(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow)">
            <summary>
            Saves a workflow to the database
            </summary>
            <param name="workflow">The AppWorkflow object to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the standard actions have filter set but alias set to null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException">Thrown when there are 2 or more standard actions that have the same type and same alias</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteAppWorkflows(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes an AppWorkflow object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of DataRequest ids</param>
            <exception cref="T:System.ArgumentNullException">Thrown if idList is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if idList is empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflows(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns an AppWorkflow object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of AppWorkflow ids; if set to null all AppWorkflow will be returned</param>
            <returns>Collection of AppWorkflow objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflows(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.Boolean)">
            <summary>
            Returns an AppWorkflow object or more from database
            </summary>
            <param name="idList">Any IEnumerable collection of AppWorkflow ids</param>
            <param name="ignoreVisibility">If set to false only visible AppWorkflows will be returned</param> 
            <param name="ignoreEncoding">If set to false only AppWorkflows which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Collection of AppWorkflow objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflow(System.Guid)">
            <summary>
            Gets the data for only one AppWorkflow
            </summary>
            <param name="id">Id of the AppWorkflow</param>
            <returns>AppWorkflow object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflowForPackage(System.Guid)">
            <summary>
            Gets the data for the workflow associated with the given package
            </summary>
            <param name="packageId">Id of the AppWorkflow</param>
            <returns>AppWorkflow object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflowForPackage(System.Guid,Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
            Gets the data for the workflow associated with the given package
            </summary>
            <param name="packageId">Id of the AppWorkflow</param>
            <param name="additionalData">Additional data to load</param>
            <returns>AppWorkflow object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetAppWorkflowStandardAction(System.Guid,Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType,System.String)">
            <summary>
            Returns from the specified workflow a standard action based on its alias and action type
            </summary>
            <param name="workflowId">Id of the parent workflow</param>
            <param name="stdActionType">Standard action type</param>
            <param name="alias">Alias of the action</param>
            <returns>Standard action object or null if not found</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityIdException">Thrown when there are 2 or more actions found that have the same parent, same type and same alias</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateLicensableEntity(System.Guid,Audicon.SmartAnalyzer.Common.Types.EntityType)">
            <summary>
            Creates a blank licensable entity
            </summary>
            <param name="Id">id of the entity</param>
            <param name="type">type of the entity</param>
            <returns>The newly created entity</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetContentObjects``1(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of objects of type T (implementing IContentObject) 
            </summary>
            <typeparam name="T">Content object type (implementing IContentObject)</typeparam>
            <param name="idList">List of object ids (if null all abjects from the database will be returned)</param>
            <param name="additionalFlags">Additional data that should be loaded for objects; valid only for tests; for other objects this parameter is ignored</param>
            <param name="ignoreVisibility">If set to false only valid and visible objects are returned</param>
            <param name="ignoreEncoding">If set to false only objects which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Keyed collection of content objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetContentObject``1(System.Guid,Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags)">
            <summary>
            Returns one object of type T (implementing IContentObject)
            </summary>
            <typeparam name="T">Content object type (implementing IContentObject)</typeparam>
            <param name="id">Id of the object to be searched</param>
            <param name="additionalFlags">Additional data that should be loaded for objects; valid only for tests; for other objects this parameter is ignored</param>
            <returns>Found object or null (if not found in the database)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetContentObjectsForPackages``1(System.Collections.Generic.IEnumerable{System.Guid},Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of objects of type T (implementing IContentObject) that bellong to the given packages
            </summary>
            <typeparam name="T">Content object type (implementing IContentObject)</typeparam>
            <param name="packageIds">Parent package ids</param>
            <param name="additionalFlags">Additional data that should be loaded for objects; valid only for tests; for other objects this parameter is ignored</param>
            <param name="ignoreVisibility">If set to false only valid and visible objects are returned</param>
            <param name="ignoreEncoding">If set to false only objects which have unicode support (in case of unicode IDEA) will be returned</param>
            <returns>Keyed collection of content objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.CreateCompositeApp">
            <summary>
            Creates a new composite app
            </summary>
            <returns>The newly created composite app</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveCompositeApp(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp)">
            <summary>
            Saves a composite app object to database
            </summary>
            <param name="app">Composite app object to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveCompositeApps(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp})">
            <summary>
            Saves a list of composite apps objects to database
            </summary>
            <param name="apps">List of composite apps objects to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveCompositeApps(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp},System.String)">
            <summary>
            Saves a list of composite apps objects to a given folder
            </summary>
            <param name="apps">List of composite apps objects to be saved</param>
            <param name="folder">Folder where the apps will be stored</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter is null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetCompositeApps(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns composite apps objects stored in the database
            </summary>
            <param name="idList">List of composite app ids to get from database; if null all objects will be returned</param>
            <returns>Collection of composite apps objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteCompositeApps(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Delete composite apps from database.
            </summary>
            <param name="idList">List of composite app ids to delete from database</param>
            <exception cref="T:System.ArgumentNullException">Thrown when id list is null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetExtraData(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns extra data based on given id list
            </summary>
            <param name="idList">list of string ids</param>
            <returns>dictionary of extra data</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveExtraData(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Saves a list of extra data
            </summary>
            <param name="list">dictionary of extra data; key is case insensitive</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.GetExtraData``1(System.String)">
            <summary>
            Returns one element from extra data in the type specified
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
            <param name="id">Id of the elements</param>
            <returns>Extra data element</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">Thrown when id is not found in the database</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when 2 or more elements with the same id are found</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when id set is null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.SaveExtraData``1(System.String,``0)">
            <summary>
            Save one extra data entry
            </summary>
            <typeparam name="T">type of the entry</typeparam>
            <param name="id">id of the entry</param>
            <param name="value">value of the entry</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 1 and 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when id set is null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.DeleteExtraData(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Deletes extra data based on given id list; if set to null all extra data will be deleted
            </summary>
            <param name="idList">list of string ids</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage.ImportCloudLicenses(System.String,System.String)">
            <summary>
            Import cloud licenses from an xml string
            </summary>
            <param name="xmlText">xml text containg the licenses</param>
            <param name="logFile">path of the file to write log; if null and SA context the default path will be used</param>
            <returns>
            ImportState.OK =  everything was imported
            ImportState.Partial = some licenses were imported, some not (corresponding apps are not available in the database)
            ImportState.NothingToDoContent = no license was found
            ImportState.HackError = signature of the xml or ofone of the licenses is invalid
            ImportState.Error = invalid xml data (wrong format probably)
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters">
            <summary>
            Interface for accessing global parameters database
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.CompactAndRepairDatabase">
            <summary>
            Tryes to repair current database and compact it
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.EmptyDatabase">
            <summary>
            Empties the database.
            Deletes every record from all tables except for the version table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.GetDBVersion">
            <summary>
            Get the version of the current databse
            </summary>
            <returns>IDBVersion object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.SaveDBVersion(Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion)">
            <summary>
            Saves the version onformation for current database
            </summary>
            <param name="dbVersion">IDBVersion object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.CreateDiskEntity(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates a new disk entity
            </summary>
            <param name="ownId">internal id of the entity</param>
            <param name="parentId">internal id of the entity's parent (empty guid for folders, folder id for files)</param>
            <param name="isOnServer">location of the entity (local or server)</param>
            <returns>New DiskEntity instance</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.GetDiskEntity(System.Guid,System.Guid)">
            <summary>
            Returns a disk entity based on its id and parent id (only for files)
            </summary>
            <param name="ownId">internal id of the entity</param>
            <param name="parentId">internal id of the entity's parent (empty guid for folders, folder id for files)</param>
            <returns>DiskEntity instance</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If nothing is found in the DB</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.DeleteDiskEntity(System.Guid,System.Guid)">
            <summary>
            Deletes a disk entity based on its id and parent id (only for files)
            </summary>
            <param name="ownId">internal id of the entity</param>
            <param name="parentId">internal id of the entity's parent (empty guid for folders, folder id for files)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.SaveDiskEntity(Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity)">
            <summary>
            Saves a given DiskEntity to the DB
            </summary>
            <param name="entity">A DiskEntity object</param>
            <exception cref="T:System.ArgumentNullException">Thrown if DiskEntity is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.SaveDiskEntities(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IDiskEntity})">
            <summary>
            Saves a list of DiskEntity to the DB
            </summary>
            <param name="list">An enumerable list of DiskEntity objects</param>
            <exception cref="T:System.ArgumentNullException">Thrown if list is null or empty or any of the objects from list is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.CreateExtendedParameter(Audicon.SmartAnalyzer.Common.Types.ParameterFunctionalityType,Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType,System.Nullable{System.Guid},System.String)">
            <summary>
            Creates a new extended parameter
            </summary>
            <param name="functionalityType">Functionality type of the parameter</param>
            <param name="ownerType">Owner type of the parameter</param>
            <param name="ownerId">Owner id of the parameter</param>
            <param name="name">Name of the parameter</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when functionalityType value is not found in the ParameterFunctionalityType enum</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when ownerType value is not found in the ParameterOwnerType enum</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when ownerId is null and ownerType is not None</exception>
            <exception cref="T:System.ArgumentException">Thrown when ownerId is not null and ownerType is something different than None</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.GetExtendedParameters(System.Nullable{System.Guid},System.Nullable{Audicon.SmartAnalyzer.Common.Types.ParameterFunctionalityType},System.Nullable{Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType},System.Nullable{System.Guid},System.String)">
            <summary>
            Returns a list of parameters filtered by some properties; if the properties are set to null they will be ignored during filter operation.
            The parameters are searched in the specified locations.
            </summary>
            <param name="id">id of the parameter; if this is set all the other search criterias are ignored</param>
            <param name="functionalityType">functionality type of the parameter</param>
            <param name="ownerType">owner type of the parameter; if this is not set a recursive search is made and ownerId is considered to be a workflow id</param>
            <param name="ownerId">owner id of the parameter</param>
            <param name="name">name of the parameter</param>
            <returns>list of found parameters matching the search criterias</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.DeleteParameters(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a list of parameters specified by their ids; the operation is done in all databases
            </summary>
            <param name="idList">list of parameter ids</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.SaveParameter(Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter,System.Boolean)">
            <summary>
            Saves one single parameter
            </summary>
            <param name="parameter">A parameter object</param>
            <param name="overwrite">If set to true old parameters with the same type, parent and name will be deleted before saving the current parameter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if parameter is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessGlobalParameters.SaveParameters(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.GlobalParameters.IExtendedParameter},System.Boolean)">
            <summary>
            Saves a list of parameters
            </summary>
            <param name="list">An enumerable list of parameters</param>
            <param name="overwrite">If set to true old parameters with the same type, parent and name will be deleted before saving the new ones</param>
            <exception cref="T:System.ArgumentNullException">Thrown if list is null or empty or any of the objects from list is null</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion">
            <summary>
            Interface defining version information of a database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion.SchemaVersion">
            <summary>
            Version if the DB Schema
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion.LastUpdateSchema">
            <summary>
            When schema was updated last time; will return DateTime.MinValue in case this is not defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersion.LastUpdateUser">
            <summary>
            When user updated the DB content last time; will return DateTime.MinValue in case this is not defined
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationExtensions">
            <summary>
            Helper service allowing injection of custom functionality
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationExtensions.GetExtendedResult(System.String,System.Object[])">
            <summary>
            Entry point of injected extension functiohality
            </summary>
            <param name="basicFinctionalityName">Name of basic functionality to extend</param>
            <param name="args">Parameters of basic functionality</param>
            <returns>Extended result</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment">
            <summary>
            Stores information regarding installation folder, user folder, templates etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.Project">
            <summary>
            Returns current project information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.GetLocalProject(System.String)">
            <summary>
            Returns a project object generated for the specified path (only local data).
            </summary>
            <param name="projectPath">Path of the project.</param>
            <returns>Project object</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.UserName">
            <summary>
            Returns current user name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.UserFingerprint">
            <summary>
            Returns current user fingerprint (for local user name)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.UserDisplayName">
            <summary>
            Returns current user display name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.Flags">
            <summary>
            Functionality flags
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.LocationPath(Audicon.SmartAnalyzer.Common.Types.KnownLocation)">
            <summary>
            Returns path for the specified location type
            </summary>
            <param name="type">type of the location</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.LocationFolder(Audicon.SmartAnalyzer.Common.Types.KnownLocation)">
            <summary>
            Returns ExtensionFolder for the specified location type
            </summary>
            <param name="type">type of the location</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.IDEADBExtension">
            <summary>
            Returns the extension used by IDEA for DBs (.IMD or .IDM)
            </summary>
            <remarks>Dot is a part of the returned string</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.IDEAIsServerOnly">
            <summary>
            Returns the status of IDEA server only mode flag
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.IDEAEncoding">
            <summary>
            IDEA encoding
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.TestMode">
            <summary>
            Returns or sets the test only mode
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.ChangeProfilePath(System.String)">
            <summary>
            Changes profile path to the given folder
            </summary>
            <param name="newProfilePath">Path to the new profile folder</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.TemplateFileName(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Returns the name of the specified template file
            </summary>
            <param name="type">type of the file</param>
            <returns>name of the file or null if no match is found</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.TemplateFilePath(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Returns the path of the specified template file
            </summary>
            <param name="type">type of the file</param>
            <returns>path of the file or null if no match is found</returns>
            <remarks>the existence of the file is not checked</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.WorkFilePath(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Return the location of the work file according to the specified type
            </summary>
            <param name="type">type of the file</param>
            <exception cref="T:System.ArgumentException">Thrown if type is ExecutionFile, ExecutionFileServer, IndexFile or when the type is not valid</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.EnsureWorkFileExists(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Return the location of the work file according to the specified type; file is copied if it does not exists and RO flag is removed
            </summary>
            <param name="type">type of the file</param>
            <exception cref="T:System.ArgumentException">Thrown if type is ExecutionFile, ExecutionFileServer, IndexFile or when the type is not valid</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.ProtectedDataStorage">
            <summary>
            Protected storage accessor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.IsPPUContext">
            <summary>
            Gets and sets PPU context
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IApplicationEnvironment.UseSourceLibraryFolder">
            <summary>
            Returns the usage type of source library folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment">
            <summary>
            Provides project related information (server, project name, working folder etc.)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.WorkingFolder">
            <summary>
            Returns current working folder of IDEA
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.WorkingSubfolder">
            <summary>
            Sets/gets the current working subfolder of IDEA
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.SALibraryPath">
            <summary>
            Returns path of SA library from withing current working folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.OtherLibraryPath">
            <summary>
            Returns path of Other library from withing current working folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.ResultsLibraryPath">
            <summary>
            Returns path of Results library from within current working folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.ResultsLibraryName">
            <summary>
            Returns name of Results library from within current working folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.SourceFilesLibraryPath">
            <summary>
            Returns path of Source Files library from withing current working folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.ServerName">
            <summary>
            Will return IDEA server if connected; otherwise null
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.ProjectName">
            <summary>
            Will return project name (if connected to a server) or current folder name (if not connected)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.ProjectId">
            <summary>
            Will return project id (if connected to a server) or null (if not connected)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.IsConnectedToServer">
            <summary>
            True if current context is a server context; otherwise false
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.IsManaged">
            <summary>
            True if current project is managed type; otherwise false
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.WorkFilePath(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Return the location of the work file according to the specified type
            </summary>
            <param name="type">type of the file</param>
            <exception cref="T:System.ArgumentException">Thrown if type is ContentFile, ExecutionFileServer (if not connected to server) or when the type is not valid</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.EnsureWorkFileExists(Audicon.SmartAnalyzer.Common.Types.TemplateFiles)">
            <summary>
            Return the location of the work file according to the specified type; file is copied if it does not exists and RO flag is removed
            </summary>
            <param name="type">type of the file</param>
            <exception cref="T:System.ArgumentException">Thrown if type is ContentFile, CirFile, ExecutionFileServer (if not connected to server) or when the type is not valid</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.LocalProjectName">
            <summary>
            Returns current local project name of IDEA. Local project name is just the last part of working folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.WorkflowId">
            <summary>
            Sets/gets the current workflow Id
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.GetValidUsers(System.Boolean,System.String@)">
            <summary>
            Returns the list of possible users with their location (Local, Server or Default (Local and Server)) and their backup timestamp (only for current user)
            </summary>
            <param name="allUsers">if set to true the list of possible users is restricted to last user that performed take ownership (if its data is available)</param>
            <param name="lastUser">returns the last user that transferred ownership if allUsers is false and last user is not current user and last user data still exists on disk</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.TransferOwnership(System.String,System.String,System.String,System.String@,System.Exception@)">
            <summary>
            Renames one user data to another user
            </summary>
            <param name="oldUser">The original user name; cannot be null or empty</param>
            <param name="newUser">The new user name; if null or empty, current user will be assumed</param>
            <param name="timestamp">Timestamp of the data backup (will be ignored if null or empty)</param>
            <param name="backupZip">Returns path of the library back up</param>
            <param name="exception">Returns any error found</param>
            <returns>Null in case process cannot be performed because the parameters are not correct or at least one of the needed files are in use or backup file could not be created
            False in case the process failed (in this case exception and backupZip parameters are filled)
            True in case the process succedeed (in this case the backupZip parameter is filled)</returns>
            <remarks>If oldUser equals newUser, but timestamp is not set, the parameters are not considered correct</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Services.IProjectEnvironment.RollbackSALibraryBackup(System.String)">
            <summary>
            Performs a rollback of SA library folder from the given zip backup.
            </summary>
            <param name="zipFile">Backup file</param>
            <returns>Null if there process worked fine, or error if the process failed.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp">
            <summary>
            Interface implemented by Composite App content object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp.Packages">
            <summary>
            Ordered list of Apps within the composite
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeApp.CompositeWorkflow">
            <summary>
            Reference of App's composite workflow
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeAppWorkflow">
            <summary>
            Interface implemented by Composite App Workflow pseudo-content object
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeAppWorkflow.SetPseudoIds(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Set pseeudo IDs of composute
            </summary>
            <param name="id">Pseudo ID</param>
            <param name="logicalId">Pseudo logical ID</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositeAppWorkflow.AppWorkflows">
            <summary>
            List of App Workflows within the composite, accompained by host Apps
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositePart`2">
            <summary>
            Provides interface of an entity which can be part of a composite
            </summary>
            <typeparam name="TPart">Type of entity building a composite</typeparam>
            <typeparam name="TComposite">Type of a composite</typeparam>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositePart`2.CompositeAreas">
            <summary>
            List of areas specifying compatibility with other potential composite parts
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositePart`2.IdInComposite">
            <summary>
            Unique identifier within a composite
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositePart`2.GetCombineState(`0)">
            <summary>
            Determines whether building a composite with another entity is allowed or not
            </summary>
            <param name="part">Entity to build a composite with</param>
            <returns>Result of possible combine</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ICompositePart`2.Combine(`0,System.Boolean@)">
            <summary>
            Builds a composite with another entity
            </summary>
            <param name="part">Entity to build a composite with</param>
            <param name="isNew">TRue if new composite instance was created; false if another part was added to existing composite</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData">
            <summary>
            Basic interface common for one license
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.EntityId">
            <summary>
            The ID of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.PackageId">
            <summary>
            The ID of the parent package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.EntityType">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.SpecialFlags">
            <summary>
            Stores the internal flags of the content object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.DebugUntil">
            <summary>
            Stores the date until when the object can be debugged
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.ExpirationDate">
            <summary>
            Expiration date of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicenseData.ExpirationStatus">
            <summary>
            Status of the expiration information
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage">
            <summary>
            Simple data protection API
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage.AddData(System.String,System.String,System.Boolean)">
            <summary>
            Adds named data value in encrypted form
            </summary>
            <param name="name">Data name</param>
            <param name="value">Data value</param>
            <param name="withTimestamp">If true, timestamp is assigned to added value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage.AddData(System.String,System.String,System.DateTime)">
            <summary>
            Adds named data value in encrypted form
            </summary>
            <param name="name">Data name</param>
            <param name="value">Data value</param>
            <param name="timestamp">If true, timestamp is assigned to added value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage.DeleteData(System.String)">
            <summary>
            Deletes named data value(s)
            </summary>
            <param name="name">Data name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage.GetMultipleData(System.String)">
            <summary>
            Obtains and decrypts named data values added with timestamp
            </summary>
            <param name="name">Data name</param>
            <returns>List of decrypted data values accompained by timestamps (corrupted data is ignored)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProtectedDataStorage.GetSingleData(System.String)">
            <summary>
            Obtains and decrypts named data value without timestamp
            </summary>
            <param name="name">Data name</param>
            <returns>Decrypted data value or null in case the name was not found or data was corrupted</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IBranch">
            <summary>
            Interface describing branch element of data request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IBranch.Id">
            <summary>
            Id of the branch (represents the path of the branch)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 256 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IBranch.Path">
            <summary>
            Path of the branch
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 256 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IBranch.Section">
            <summary>
            Name which uniquely identifies a section inside the corresponding required data file
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of the input value (after trimming) is > 64 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IBranch.Sequence">
            <summary>
            Name which uniquely identifies a section inside the corresponding required data file
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 64 chars</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown if the input value contains other characters than 0-9 and \</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject">
            <summary>
            Common interface of all content objects
            </summary>s
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.LogicalId">
            <summary>
            Logical ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Name">
            <summary>
            The display name of a test
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 1 and 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Type">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Version">
            <summary>
            The version number of the object
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when version set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.BuildTimestamp">
            <summary>
            Returns the timestamp when the object was created (if information exists)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.OwnerName">
            <summary>
            Name of the owner of this object
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.CreatorName">
            <summary>
            Name of the creator of this object
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.MinIDEAVersion">
            <summary>
            Minimum required version for IDEA
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Packages">
            <summary>
            The packages to which this object belongs to; only valid packages will be shown
            The collection will be loaded only on request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.Properties">
            <summary>
            The properties of a test; it will contain all the properties defined in the database
            and for each property only these values assigned for this test
            The collection will be loaded only on request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject.ContentFlags">
            <summary>
            Stores the internal flags of the content object (common flags)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow">
            <summary>
            Interface for app start workflow as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.StandardLinksMask">
            <summary>
            Flags mask specifying visible standard links
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.Actions">
            <summary>
            Collection of workflow's actions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.ResourcesType">
            <summary>
            Type of the resources used for this App Workflow
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the ResourceType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.Resources">
            <summary>
            Resources used by the App Workflow 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.DescriptionType">
            <summary>
            Type of custom App description (null if no custom description available)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DescriptionType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.Description">
            <summary>
            Custom App description body
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.BaseFilter">
            <summary>
            Filter expressions to detect App related content items (those which are part of different Apps)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow.Filter">
            <summary>
            Filter expressions to detect App related content items (those which are part of different Apps)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction">
            <summary>
            Interface for workflow custom action as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.ExecutableType">
            <summary>
            Implementation type (.NET, Iss...)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.ExecutionLocation">
            <summary>
            Execution location
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.EntryPoint">
            <summary>
            Entry point for the action. Executable type-specific.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.Code">
            <summary>
            Execution body. Code has to be encrypted on set and on get.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.BaseCode">
            <summary>
            Unencrypted code.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction.RelatedTo">
            <summary>
            If not null, specifies the standard action this custom action is mapped to
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDataRequest">
            <summary>
            Interface describing the data request element defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDataRequest.Branches">
            <summary>
            Branches collection of a data request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDataRequest.Requests">
            <summary>
            Requests collection of a data request
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity">
            <summary>
            Base interface for most of the db entities
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.Name">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.Type">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.LogicalId">
            <summary>
            Logical ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.Version">
            <summary>
            The version of the entity
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDatabaseEntity.VerifyBase">
            <summary>
            Verifies an entity according to its signatures
            </summary>
            <returns>Error found or null if no error</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IFileDescriptor">
            <summary>
            Descriptor file for app external links
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IFileDescriptor.Title">
            <summary>
            Title of the link
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IFileDescriptor.Link">
            <summary>
            Web address or file path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IFileDescriptor.IsFile">
            <summary>
            Is file or web link
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IFileDescriptor.Flags">
            <summary>
            Flags for links
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation">
            <summary>
            Provides information about operations performed on a package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.Id">
            <summary>
            Id of the package that was modified
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.LogicalId">
            <summary>
            Logical Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.LanguageCode">
            <summary>
            Language code of the package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.Name">
            <summary>
            Name of the package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.Type">
            <summary>
            Type of the operation performed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.Version">
            <summary>
            The version number of the package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackageOperation.Timestamp">
            <summary>
            Timestamp when this operation was performed
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyResource">
            <summary>
            Interface for language dependant properties of a property
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyResource.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyResource.Name">
            <summary>
            Name of the property
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not beteen 1 and 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValueResource">
            <summary>
            Interface for language dependant properties of a property value
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValueResource.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValueResource.Value">
            <summary>
            Value of the property value
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of value exceeds 128 characters</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCir">
            <summary>
            Interface describing the pseudo cir element defined in the database
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPseudoCirExtension">
            <summary>
            Interface describing the pseudo cir extension element defined in the database
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRelatedContentItemsExpression">
            <summary>
            Defines filter expression for App related content items (those which can be part of different Apps)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRelatedContentItemsExpression.RelatedContentItemType">
            <summary>
            Type of related content items
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRelatedContentItemsExpression.Expression">
            <summary>
            Filter expression to detect related items
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IReportingPlugin">
            <summary>
            Interface describing the reporting plugin element defined in the database
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest">
            <summary>
            Interface describing a request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.Id">
            <summary>
            Id of the request (represents the combobox entry)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 256 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.Entry">
            <summary>
            Combobox entry
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 64 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.Type">
            <summary>
            Flag telling the UI what kind of request shall be created (document request file or XML request file)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the RequestType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.Sequence">
            <summary>
            Order of the combo entry; default 0
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value is not between 0 and Int16.MaxValue</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.RequiredData">
            <summary>
            Required data collection of a request
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequest.SetDefault(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData)">
            <summary>
            Sets the default flag for a data object and resets this flag for all other objects
            </summary>
            <param name="requiredData">Required data value for which the flag is set</param>
            <exception cref="T:System.NullReferenceException">Thrown when parameter is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when parameter is not found in the internal collection</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData">
            <summary>
            Interface describing required data element of a request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData.Id">
            <summary>
            Id of the request (language name)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 256 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData.Language">
            <summary>
            Language name
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the input value is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the input value (after trimming) is > 64 chars</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData.DataFile">
            <summary>
            The file (binary) which contains the required data depended on the selected entries in the tree
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData.TemplateFile">
            <summary>
            In case a document report shall be executed this entry will contain the file name of the report template which shall be used. 
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of template file (after trimming) is greated than 256</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IRequiredData.IsDefault">
            <summary>
            If the required data is the default one
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction">
            <summary>
            Interface for workflow standard action as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction.StandardType">
            <summary>
            Type of action
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction.PreprocessList">
            <summary>
            List of custom actions' Ids to be executed prior to this action. This collection is constructed based on custom actions' fields RelatedTo and Index
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction.PostprocessList">
            <summary>
            List of custom actions' Ids to be executed after this action. This collection is constructed based on custom actions' fields RelatedTo and Index
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowStandardAction.Filter">
            <summary>
            External filter 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagResource">
            <summary>
            Interface for language dependant properties of a tag
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagResource.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagResource.Name">
            <summary>
            Display name of the tag
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not beteen 1 and 40</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagResource.Description">
            <summary>
            Short description of the tag
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of description (after trimming) is > 2000</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile">
            <summary>
            Interface for test input file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Id">
            <summary>
            ID of the object (the same as alias)
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when ID contains spaces (inside the string)</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of ID (after trimming) is not beteen 0 and 64</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Alias">
            <summary>
            Alias of the input file
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of title (after trimming) is not beteen 1 and 64</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Name">
            <summary>
            Display name of the input file
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of title (after trimming) is not beteen 1 and 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Primary">
            <summary>
            Specifies if the input file is the primary one
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Mandatory">
            <summary>
            Specifies if the input file is mandatory
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.TagType">
            <summary>
            Specifies how the input file requires to be tagged
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TagType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile.Tags">
            <summary>
            Contains the tags assigned to a test
            The collection will be loaded only on request
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITree">
            <summary>
            Interface describing the tree element defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITree.TreeType">
            <summary>
            Type of the tree
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TreeType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITree.Code">
            <summary>
            Tree code of the tree; this should be encrypted if type is standard
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction">
            <summary>
            Interface for workflow basic action as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Id">
            <summary>
            Action's unique Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Index">
            <summary>
            Action's index
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Name">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Type">
            <summary>
            Type of action
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Flags">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.CommandLine">
            <summary>
            Command line. Type-specific
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowAction.AppWorkflow">
            <summary>
            Parent workflow reference
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDialog">
            <summary>
            Provides dialog information stored in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDialog.Required">
            <summary>
            If dialog is required, not required or optional
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DialogRequired enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDialog.Type">
            <summary>
            Type of the dialog (for now just compiled assembly)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DialogType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IDialog.Code">
            <summary>
            Dialog data (binary or C# code)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity">
            <summary>
            Basic interface common for all entities that can be licensed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.VisibilityState">
            <summary>
            Stores the information if the object is visible for the user
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.SpecialFlags">
            <summary>
            Stores the internal flags of the content object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.DebugUntil">
            <summary>
            Stores the date until when the object can be debugged
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.ExpirationDate">
            <summary>
            Expiration date of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.ExpirationStatus">
            <summary>
            Status of the expiration information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.VerifyFull">
            <summary>
            Verifies an entity according to its signatures; both base and license
            </summary>
            <returns>Error found or null if no error</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity.VerifyLicense(System.String)">
            <summary>
            Verifies an entity license signature according to the given license id
            </summary>
            <param name="licenseId">license value; if null all possible valid licenses are checked</param>
            <returns>Error found or null if no error</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage">
            <summary>
            Provides package interface
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.Alias">
            <summary>
            The alias of the package
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of input string (after trimming) is > 50</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when input string is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.DescriptionType">
            <summary>
            Type of the description
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DescriptionType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.Description">
            <summary>
            Keeps the description of a package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.ExternalDescriptions">
            <summary>
            External descriptions
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.IconType">
            <summary>
            Type of the icon
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the ImageType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.Icon">
            <summary>
            Keeps the icon of a package
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.Timestamp">
            <summary>
            Timestamp when this package was last added/updated
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage.SupportsServer">
            <summary>
            Returns if the app has content that can work on server.
            It will return a proper value (true or false) only for main database; for any other database it will return null.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty">
            <summary>
            Interface of the property entity (test property)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.DataType">
            <summary>
            Data type of the property
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the PropertyDataType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.Flags">
            <summary>
            Possible flags assigned to this property
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the PropertyFlags enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.Resources">
            <summary>
            The possible resources for this property (name, language code) 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.Values">
            <summary>
            Collection of values
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.OwnerName">
            <summary>
            Name of the owner of this object
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.CreatorName">
            <summary>
            Name of the creator of this object
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.Version">
            <summary>
            The version number of a test
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when version set is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when major.minor.build as string exceeds 32 chars</exception>
            <remarks>revision field is not taken into consideration</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty.ToggleDefault(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue)">
            <summary>
            Sets/unsets the default flag for a value and resets this flag for all other values (for single select properties)
            </summary>
            <param name="propetyValue">Property value for which the flag is set</param>
            <exception cref="T:System.NullReferenceException">Thrown when parameter is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when parameter is not found in the internal collection</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue">
            <summary>
            Interface for value element of a property
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.Value">
            <summary>
            The actual value of the property value returned using the base type assigned to data type
            (int for integer, string for string, date for date and boolean for boolean)
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when internal value cannot be converted to the internal type (only for get)</exception>
            <exception cref="T:System.ArgumentException">Thrown when value passed cannot be converted to internal type (only for set)</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.ValueAsString">
            <summary>
            Value returned as string
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when internal type is not PropertyDataType.String</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.ValueAsNumber">
            <summary>
            Value returned as integer
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when internal type is not PropertyDataType.Integer</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.ValueAsBoolean">
            <summary>
            Value returned as boolean
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when internal type is not PropertyDataType.Boolean</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.IsDefault">
            <summary>
            If the value is the default one for this property
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPropertyValue.Version">
            <summary>
            The version number of a test
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when version set is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when major.minor.build as string exceeds 32 chars</exception>
            <remarks>revision field is not taken into consideration</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag">
            <summary>
            Interface for database tag element (meta definition)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.Id">
            <summary>
            Generated ID of the object
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when ID contains spaces (inside the string)</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of ID (after trimming) is not beteen 1 and 64</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.DataType">
            <summary>
            Data types for which a tag is valid; this can be a combination of types
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DataTypes enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.Resources">
            <summary>
            The possible resources for this tag (name, description, language code) 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.Mandatory">
            <summary>
            Defines if Tag is mandatory (only when tag is loaded as an element of Tags collection of a Test; otherwise is null)
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when set is done for a generic Tag definition</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter sent is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when period identifier property is set to true and mandatory is going to be set to false</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.OwnerName">
            <summary>
            Name of the owner of this object
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.CreatorName">
            <summary>
            Name of the creator of this object
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not between 0 and 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.Version">
            <summary>
            The version number of a test
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when version set is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when major.minor.build as string exceeds 10 chars</exception>
            <remarks>revision field is not taken into consideration</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag.ChangeId(System.String)">
            <summary>
            Changes the id of an existing tag
            </summary>
            <param name="newID">New desired ID as string</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when newID contains spaces (inside the string)</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of newID (after trimming) is not beteen 1 and 64</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue">
            <summary>
            Interface for value element of a tag
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue.Mandatory">
            <summary>
            Keeps the information if this particular value is mandatory (in a value mapping)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue.Description">
            <summary>
            Short description of what this value represents
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue.Value">
            <summary>
            The actual value (as string)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITagValue.Version">
            <summary>
            The version number of a test
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when version set is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when major.minor.build as string exceeds 32 chars</exception>
            <remarks>revision field is not taken into consideration</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo">
            <summary>
            Interface for description part of a test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Id">
            <summary>
            ID of the object
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when ID contains spaces (inside the string)</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of ID (after trimming) is not beteen 1 and 32</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Title">
            <summary>
            Title of the description
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of title (after trimming) is not beteen 1 and 128</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Type">
            <summary>
            Formatting type of the description
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DescriptionType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Description">
            <summary>
            Keeps the description of a test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Sequence">
            <summary>
            Order of the description; default 0
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value is not between 0 and Int16.MaxValue</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Visible">
            <summary>
            Visibility of the description; default true
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInfo.Flags">
            <summary>
            Flags for test info object
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TestInfoFlags enum</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro">
            <summary>
            Provides macro information stored in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro.Type">
            <summary>
            Type of the macro (for now just IDEA macro)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the MacroType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro.Body">
            <summary>
            Macro code (the algorithm and content); this is encrypted 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro.BodyAsString">
            <summary>
            Macro code as string for easy of use in some cases; this will be the unencrypted macro
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro.ResourcesType">
            <summary>
            Type of the resources used for this macro
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the ResourceType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.IMacro.Resources">
            <summary>
            Resources used by the macro 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest">
            <summary>
            Interface for test element as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.ShortName">
            <summary>
            The short name for a test
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 50</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.ValidFrom">
            <summary>
            Start of the validity period; default Constants.MinDateValidity
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if FromDate is greater than ToDate or FromDate is smaller than Constants.MinDateValidity</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.ValidTo">
            <summary>
            End of the validity period; default Constants.MaxDateValidity
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if ToDate is smaller than FromDate or ToDate is greater than Constants.MaxDateValidity</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.Flags">
            <summary>
            Possible flags assigned to this property
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TestFlags enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.DialogRequired">
            <summary>
            Fast access to check if a test has dialog or not
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.InputFiles">
            <summary>
            Contains the input files assigned to a test
            The collection will be loaded only on request
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.TogglePrimary(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile)">
            <summary>
            Sets/unsets the primary input file
            </summary>
            <param name="inputFile">Input file for which the flag is set</param>
            <exception cref="T:System.NullReferenceException">Thrown when parameter is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when parameter is not found in the internal collection</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.GetPrimaryInputFile">
            <summary>
            Returns primary input file or null in case no input files are defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.InfoData">
            <summary>
            Contains the descriptions of a test
            The object will be loaded only on request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.DialogData">
            <summary>
            Contains the dialog data of a test
            The object will be loaded only on request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.MacroData">
            <summary>
            Contains the macro data of a test
            The object will be loaded only on request
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest.Properties">
            <summary>
            The properties of a test; it will contain all the properties defined in the database
            and for each property only thise values assigned for this test
            The collection will be loaded only on request
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor">
            <summary>
            The interface IChartDescriptor manages the description of a chart.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.WindowTitle">
            <summary>
            Gets or sets the title of the cahr window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.WindowWidth">
            <summary>
            Gets or sets the width of the chart window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.WindowHeight">
            <summary>
            Gets or sets the height of the chart window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.ChartType">
            <summary>
            Gets the type of the chart.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.ChartTitle">
            <summary>
            Gets or sets the title of the chart.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.ShowLegend">
            <summary>
            Controls the visibility of the chart legend.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.XAxisTitle">
            <summary>
            Gets or sets the title of the X axis.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.YAxisTitle">
            <summary>
            Gets or sets the title of the Y axis.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.Database">
            <summary>
            Gets or sets the source IDEA table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.Field">
            <summary>
            Gets or sets the field from IDEA table used for X axis.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.IsStratified">
            <summary>
            Defines if stratification is applied to the base field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.ExcludeErrors">
            <summary>
            Exclude zero, error, empty values.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.StatisticOperation">
            <summary>
            Defines what statistic operation is applied.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.AddStatisticField(System.String)">
            <summary>
            Adds extra field for statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.AddStatisticFieldWithColor(System.String,System.Byte,System.Byte,System.Byte)">
            <summary>
            Adds extra field for statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="colorRed">Red color.</param>
            <param name="colorGreen">Green color.</param>
            <param name="colorBlue">Blue color.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.SecondaryStatisticOperation">
            <summary>
            Defines what secondary statistic operation is applied.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.AddSecondaryStatisticField(System.String)">
            <summary>
            Adds extra field for secondary statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.IChartDescriptor.GenerateXML">
            <summary>
            Generates idash xml file
            </summary>
            <returns>XmlDocument object</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInputFile">
            <summary>
            Interface describing an input file for a test result
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInputFile.Alias">
            <summary>
            Alias of the input file
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of title (after trimming) is not beteen 0 and 64</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInputFile.Primary">
            <summary>
            Specifies if the input file is the primary one
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInputFile.Path">
            <summary>
            Specifies the path of the input table
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is not between 1 and 512</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInputFile.FileId">
            <summary>
            ID of the input file
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager">
            <summary>
            Interface managing synchronization timestamps for different operations
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.UserName">
            <summary>
            User name under which the execution took place; default current user name
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of user name (after trimming) is > 128</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.Server">
            <summary>
            Name of the server (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of server name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.Project">
            <summary>
            Name of the project (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of project name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.Type">
            <summary>
            Type of the synchronization
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the SyncType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.SetLastSyncDateForAllUsers">
            <summary>
            When set to true, instructs Sync Manager to set last sync date for all users
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.GetLastSyncDate">
            <summary>
            Returns the most recent date of syncronization records matching a specific filter
            If no entry is found DateTime.MinValue is returned
            </summary>
            <returns>date of the last syncronization</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ISyncManager.SetLastSyncDate(System.DateTime)">
            <summary>
            Saves last sync details if needed
            </summary>
            <param name="timeStamp">new time stamp for synchronization</param>
            <returns>true if the new timestamp was saved, false if the db already contained a newer value</returns>
            <exception cref="T:System.ArgumentNullException">thrown when SyncRecord's UserName, Server or Project property is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if timeStamp is greater than Constants.MaxDateValidity or ExecutionDate is smaller than Constants.MinDateValidity</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile">
            <summary>
            The interface ITestResultFile provides access to a test result file.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.Name">
            <summary>
            Gets or sets the name of the result file.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.Id">
            <summary>
            Gets or sets the identifier of the IDEA table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.ParentId">
            <summary>
            Gets or sets the identifier of the IDEA table's parent.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.RecordCount">
            <summary>
            Gets or sets the number of records of the IDEA table with the specified Id.
            </summary>
            <remarks>If the record count is not known, the caller should set RecordCount 
            to -1, which is also the default value of this property.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is less than -1.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.ReportSequence">
            <summary>
            Gets or sets a number that indicates the report sequence.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.ResultIsVisible">
            <summary>
            Gets / sets a value indicating whether the result file is visible in the GUI.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.ResultType">
            <summary>
            Gets or sets a value that specifies the type of the result.
            </summary>
            <remarks> Default value: TestResultTypes.None</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.AddReportType(System.String)">
            <summary>
            Adds a report type to the collection of the report types that are supported by the current result file.
            </summary>
            <param name="reportTypeId">The identifier of the report type to add.</param>
            <returns>True, if the specified report type was added, false, if a report type with the same value already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.RemoveReportType(System.String)">
            <summary>
            Removes a report type from the collection of the report types that are supported by the current result.
            </summary>
            <param name="reportTypeId">The identifier of the report type to remove.</param>
            <returns>True, if the report type was removed, false, if the report type was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.SupportsReportType(System.String)">
            <summary>
            Determines if the test result file supports a given report type.
            </summary>
            <param name="reportTypeId">The identifier of the report.</param>
            <returns>True, if the specified report is supported; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.GetReportTypes">
            <summary>
            Gets an array with the identifiers of the report types that are supported by the current result file.
            </summary>
            <returns>An array containing all the supported report types. 
            The function returns an empty array if the collection of supported types is empty.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.AddSupportedExportType(System.String)">
            <summary>
            Adds an export type to the collection of the export types that are supported by the current result file.
            </summary>
            <param name="exportId">The identifier of the export type to add.</param>
            <returns>True, if the specified export type was added, false, if an export type with the same value already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If exportId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.RemoveSupportedExportType(System.String)">
            <summary>
            Removes an export type from the collection of the export types that are supported by the current result file.
            </summary>
            <param name="exportId">The identifier of the export type to remove.</param>
            <returns>True, if the export type was removed, false, if the export type was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If exportId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.SupportsExportType(System.String)">
            <summary>
            Determines if the test result file supports a given export type.
            </summary>
            <param name="exportTypeId">The identifier of the export type.</param>
            <returns>True, if the specified export is supported; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If exportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.GetSupportedExportTypes">
            <summary>
            Gets an array with the identifiers of the export types that are supported by the current result file.
            </summary>
            <returns>An array containing all the supported export types. 
            The function returns an empty array if the collection of supported exports is empty.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile.ExtraValues">
            <summary>
            Gets a reference to a dictionary that can be used to store extra properties 
            (e.g., the columns to be included in a report or the number of rows to be displayed in a report) for a result.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles">
            <summary>
            The interface ITestResultFiles manages a collection of test results.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles.Create">
            <summary>
            Creates an empty test result.
            </summary>
            <returns>A reference to an empty test result.</returns>
            <remarks>This method does not add the newly created result to the collection of test results.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles.Add(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Adds a result to the end of the collection of test results.
            </summary>
            <param name="value">The object to insert. An exception is thrown, if this reference is null.</param>
            <returns>True, if the result was added, false, if the result already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles.Remove(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Removes a result from the from the collection of test results.
            </summary>
            <param name="value">The object to remove from the list. If the object is not in the list, the function does nothing.</param>
            <returns>True, if the result was removed, false, if the result was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles.Clear">
            <summary>
            Removes all results from the collection of test results.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles.GetTestResultFiles">
            <summary>
            Gets an array with all test results in the current collection in the order in which they were added.
            </summary>
            <returns>An array containing all test results in the current collection. 
            The function returns an empty array if the collection is empty.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo">
            <summary>
            Provides the basic information regarding test execution results
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.SessionId">
            <summary>
            ID of the session associated with this execution (default Guid.Empty)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.TestId">
            <summary>
            ID of the test associated with this execution (default Guid.Empty)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.UserName">
            <summary>
            User name under which the execution took place; default current user name
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of user name (after trimming) is > 128</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.ExecutionDate">
            <summary>
            When the test execution was performed; default Now
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if ExecutionDate is greater than Constants.MaxDateValidity or ExecutionDate is smaller than Constants.MinDateValidity</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.State">
            <summary>
            Possible state of the execution
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TestExecutionState enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.Message">
            <summary>
            Message of the execution (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <remarks>Null is allowed; empty string is converted to null; if message is longer than 4000 characters it will be truncated</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.FileName">
            <summary>
            Name of the result file (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 512</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.LibraryItemId">
            <summary>
            ID of the library item associated with this file; can be null
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.Server">
            <summary>
            Name of the server (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of server name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.Project">
            <summary>
            Name of the project (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of project name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.TestResultFiles">
            <summary>
            The list of result files for the current execution report
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.DownloadRequired">
            <summary>
            Flag indicating that for this server-side result info the protocol file wasn't yet downloaded
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.StartDate">
            <summary>
            When the test execution started; default Now
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if StartDate is greater than Constants.MaxDateValidity or ExecutionDate is smaller than Constants.MinDateValidity</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.PrimaryInputTable">
            <summary>
            Returns primary input file path or null in case no input files are defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.InputFiles">
            <summary>
            The input files used for current result
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.GetPrimaryInputFile">
            <summary>
            Returns primary input file or null in case no input files are defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.Comment">
            <summary>
            User-defined text describing the import session
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.CorrelationId">
            <summary>
            Stores the identifier of the related CIR import session; is null for test related entries
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo.RenameResultFile(System.String,System.String)">
            <summary>
            Renames the an existing test result file
            </summary>
            <param name="oldName">old name of the result file</param>
            <param name="newName">new name of the result file</param>
            <exception cref="T:System.ArgumentNullException">thrown when any of the parameters is null</exception>
            <exception cref="T:System.ArgumentNullException">thrown when the new name already exists in the collection</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">thrown when the old name is not found in the collection</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">thrown when new name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of new name (after trimming) is > 512</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo">
            <summary>
            Information about result files created by test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Name">
            <summary>
            Name of the result file (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 512</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Type">
            <summary>
            Type of the result file - default None
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TestResultFileTypes enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Size">
            <summary>
            Size of the result file (number of records); default -1 (unknown)
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value is not between -1 and Int32.MaxValue</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Visible">
            <summary>
            Returns if the result file should be shown to the user
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.BaseTable">
            <summary>
            Name of the base table file (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 512</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Alias">
            <summary>
            Alias of the result (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of alias (after trimming) is > 50</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.ShortName">
            <summary>
            Short name of the resulte (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: \ / ? * : [ ]</exception>
            <remarks>Null is allowed; empty string is converted to null; if input value has more than 31 chars it will be trimmed to 31 chars</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.Description">
            <summary>
            Description of the result (on set it will be trimmed) and set to null if the result is empty
            </summary>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.FileId">
            <summary>
            ID of the result file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.ReportTypes">
            <summary>
            List of report types allowed for this result
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when each part of the list is empty or null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when comma is found inside of a part > 50</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of a part > 50</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of list > 1000</exception>
            <remarks>internal list is calculated as a comma separated string from the parts and length of the final list contains the commas</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.ExportTypes">
            <summary>
            List of export types allowed for this result
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when each part of the list is empty or null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when comma is found inside of a part > 50</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of a part > 50</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of list > 1000</exception>
            <remarks>internal list is calculated as a comma separated string from the parts and length of the final list contains the commas</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo.ReportSequence">
            <summary>
            Order of the result in a report; default 0
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when value is not between 0 and Int32.MaxValue</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor">
            <summary>
            Represent the overall result of audit test execution. 
            See the TFS document $/SmartAnalyzer/Main/Docs/Development/Client/Components/ReportingRequirements.docx, Section 2.3 for details
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.SessionId">
            <summary>
            Unique value identifying each test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.TestId">
            <summary>
            Id of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.LogicalId">
            <summary>
            Logical Id of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.TestVersion">
            <summary>
            Test version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.TestLanguage">
            <summary>
            Test language
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.User">
            <summary>
            User who executed the test 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.StartDate">
            <summary>
            Time the test was queued for executon
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.CompleteDate">
            <summary>
            Time the test execution was completed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.State">
            <summary>
            Possible state of the execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Period">
            <summary>
            Period of the execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Message">
            <summary>
            Message of the execution (on set it will be trimmed) and set to null if the result is empty
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Trace">
            <summary>
            Trace of the execution 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.InputFiles">
            <summary>
            List of input files' descriptors
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Parameters">
            <summary>
            List of execution parameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Results">
            <summary>
            List of result files created by test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Tags">
            <summary>
            List of execution tags
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.IsAtServer">
            <summary>
            Flag specifying the server-side execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Server">
            <summary>
            If server-side execution, name of the management server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Project">
            <summary>
            If server-side execution, name of the project
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.OperatingSystemInfo">
            <summary>
            Information about OS used to execute the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.GlobalizationInfo">
            <summary>
            Globalization info when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.CasewareIdeaInfo">
            <summary>
            IDEA settings when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.SmartAnalyzerInfo">
            <summary>
            SA settings when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.Comment">
            <summary>
            User-defined text describing the import session
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.CorrelationId">
            <summary>
            Stores the identifier of the related CIR import session; is null for test related entries
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.ShortName">
            <summary>
            Short name of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor.OwnerName">
            <summary>
            Owner's name of the test
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo">
            <summary>
            Interface for workflow action execution info as defined in the database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.ActionId">
            <summary>
            Action referenced by action info
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.WorkflowId">
            <summary>
            Parent workflow referenced by action info
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.PackageId">
            <summary>
            Parent app referenced by action info
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.StartTime">
            <summary>
            Execution start time
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.EndTime">
            <summary>
            Execution finish time
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.ExecutionState">
            <summary>
            Last execution state
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the AppWorkflowActionExecutionState enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.Error">
            <summary>
            Execution error
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.ProcessingState">
            <summary>
            Processing state
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the AppWorkflowActionProcessingState enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.CommentType">
            <summary>
            Type of comment 
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the DescriptionType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IAppWorkflowActionInfo.Comment">
            <summary>
            User specific comment
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter">
            <summary>
            Interface for database entity storing an execution parameter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter.Id">
            <summary>
            ID of the parameter = name of the control
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 100</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter.Value">
            <summary>
            An instance of a class defined in SA.Parameters
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when null value is passed</exception>
            <exception cref="T:System.ArgumentException">Thrown when class is not serializable</exception>
            <remarks>When value is set the TypeName property is also populated accordingly</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter.Flags">
            <summary>
            Possible flags assigned to this parameter
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the ParameterFlags enum</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord">
            <summary>
            Interface describing an execution record
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.Id">
            <summary>
            Internal Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.IsOnServer">
            <summary>
            If execution is to be done on server or local
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.Test">
            <summary>
            TestReference object of this execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.Parameters">
            <summary>
            The parameters used for current execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.DialogParameters">
            <summary>
            The parameters used for current execution set from dialog
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.PrivateParameters">
            <summary>
            The parameters used for current execution set from global barameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.InputFiles">
            <summary>
            The input files used for current execution
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.GetPrimaryInputFile">
            <summary>
            Returns primary input file or null in case no input files are defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.FromDate">
            <summary>
            Start of the date interval assigned to this execution; default Constants.MinDateValidity
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if FromDate is greater than ToDate or FromDate is smaller than Constants.MinDateValidity</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.ToDate">
            <summary>
            End of the date interval assigned to this execution; default Constants.MaxDateValidity
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if ToDate is smaller than FromDate or ToDate is greater than Constants.MaxDateValidity</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.SetPeriod(System.DateTime,System.DateTime)">
            <summary>
            Sets both start and end of the date interval assigned to this execution
            </summary>
            <param name="fromDate">starting date</param>
            <param name="toDate">ending date</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if fromDate is greater than toDate or fromDate is smaller than Constants.MinDateValidity</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown if toDate is smaller than fromDate or toDate is greater than Constants.MaxDateValidity</exception> 
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.SessionID">
            <summary>
            ID of the session associated with this execution (default Guid.Empty)
            </summary>
            <remarks>Guid.Empty is treated as not set</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.TaskID">
            <summary>
            ID of the IDEA task associated with this execution (default Guid.Empty)
            </summary>
            <remarks>Guid.Empty is treated as not set</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.TaskState">
            <summary>
            The state of the IDEA task (default TaskState2.Unspecified)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TaskState2 enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord.VisibilityState">
            <summary>
            Visibility state (default VisibilityStates.Visible)
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the VisibilityStates enum</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATableSvc">
            <summary>
            Extend IIDEATable interface adding some operations like Open
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATableSvc.Open(System.Boolean)">
            <summary>
            Opens the idea table
            </summary>
            <param name="readOnly">if set to <c>true</c>open the table in read only mode.</param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATableSvc.IsVirtual">
            <summary>
            Gets a value indicating whether the idea dab is virtual.
            </summary>
            <value>
            	<c>true</c> if this idea DB is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATableSvc.RestoreState">
            <summary>
            .NET GC forces Release() to be called on COM pointers, which results in undesired bahaviour (e.g. files get unlocked on server etc)
            This method cares about restoring the current state of IDEA table after GC has done its job
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile">
            <summary>
            Interface describing an input file for execution record
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile.Alias">
            <summary>
            Alias of the input file
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of title (after trimming) is not beteen 0 and 64</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null or empty</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile.Table">
            <summary>
            IDEATable object of this execution
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when value is already set once; after that the property is read only</exception>
            <exception cref="T:System.ArgumentException">Thrown when location of the table is different than the location of the execution</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile.Primary">
            <summary>
            Specifies if the input file is the primary one
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile.Tagged">
            <summary>
            Specifies the tagged state of the input file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionInputFile.TaggedBy">
            <summary>
            Name of the person who made last tag change
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is not beteen 0 and 128</exception>
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IInputFileData">
            <summary>
            Interface of the input file within the dialog context
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IInputFileData.Path">
            <summary>
            Path of the file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IInputFileData.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IInputFileData.Folder">
            <summary>
            Folder path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IInputFileData.Alias">
            <summary>
            Alias name of the file
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData">
            <summary>
            Interface of the parent object within the dialog context
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.Id">
            <summary>
            Generated ID of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.Name">
            <summary>
            The display name of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.Alias">
            <summary>
            An alias name of the object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.Type">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData.Version">
            <summary>
            The version number of the object
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference">
            <summary>
            Interface defining test related information inside an execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference.Id">
            <summary>
            ID of the test to be performed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference.Input">
            <summary>
            If it needs parameters to be introduced by the user
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the InputType enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference.Status">
            <summary>
            If the test is ready for execution in current context; default value is None
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if value is not one defined in the TestStatus enum</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.ITestReference.Selected">
            <summary>
            If test is selected or not
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable">
            <summary>
            Interface for IDEA table meta data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable.Id">
            <summary>
            ID of the IDEA table
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable.Name">
            <summary>
            Name of the IDEA file (on set it will be trimmed)
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when it is set to an null or empty string</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of name (after trimming) is > 512</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable.IsDummy">
            <summary>
            Keeps the information if a table is virtual (dummy table)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IIDEATable.IsOnServer">
            <summary>
            If execution is to be done on server or local
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersionStorage">
            <summary>
             Interface defining extended version information for content database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersionStorage.ContentVersion">
            <summary>
            Version of DB content
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value set is null</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersionStorage.LastUpdateContent">
            <summary>
            When content was updated last time (by Audicon); will return DateTime.MinValue in case this is not defined
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IDBVersionStorage.LanguageCode">
            <summary>
            Language code
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when languageCode is not a valid culture</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExtension">
            <summary>
            Base interface for all extensions' classes
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtension.ID">
            <summary>
            Extension's unique ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtension.CultureInfo">
            <summary>
            Extension's culture
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExtension.IsDisposed">
            <summary>
            If extension was disposed, returns true; otherwise, false
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionContainer">
            <summary>
            Base interface of Extensions' Container
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionContainer.GetExtensions``1">
            <summary>
            Retrieves extensions of a given type
            </summary>
            <typeparam name="T">type of extensions to retrieve</typeparam>
            <returns>List of extensions of a given type</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExtensionContainer.Refresh">
            <summary>
            Performs refresh for all contained catalogs
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller">
            <summary>
            Describes Create functionality for test execution results
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolInputFiles(Audicon.SmartAnalyzer.Common.Types.AliasedEntity[])">
            <summary>
            Protocols list of test's input files
            </summary>
            <param name="inputFiles">array of input files</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolResultFile(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Protocols information about new tets result file
            </summary>
            <param name="resFile">test result file's description</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolResultFile(System.String,Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes,System.Int32,System.Boolean)">
            <summary>
            Protocols information about new tets result file
            </summary>
            <param name="name">test result file's name</param>
            <param name="type">test result file's type</param>
            <param name="size">test result file's size</param>
            <param name="isVisible">test result file's visibility flag (GUI)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolState(Audicon.SmartAnalyzer.Common.Types.TestExecutionState)">
            <summary>
            Protocols test execution state
            </summary>
            <param name="state">execution state</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolPeriod(Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods)">
            <summary>
            Protocols test execution period
            </summary>
            <param name="period">execution period</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolMessage(System.String)">
            <summary>
            Protocols test execution error message
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolTrace(Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry[])">
            <summary>
            Protocols test execution trace
            </summary>
            <param name="trace">array of trace elements</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolTags(Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo[])">
            <summary>
            Protocols test execution tags
            </summary>
            <param name="tags">array of tags</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolParameters(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter[])">
            <summary>
            Protocols test execution parameters
            </summary>
            <param name="pars">array of parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolComment(System.String)">
            <summary>
            Protocols test result's comment
            </summary>
            <param name="comment">comment</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.ProtocolCorrelationId(System.Nullable{System.Guid})">
            <summary>
            Protocols test result's correlation ID
            </summary>
            <param name="correlationId">correlation Id</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocoller.Flush(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Persists currently protocolled information
            </summary>
            <param name="execCtx">execution context object</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader">
            <summary>
            Describes Read/Update/Delete functionality for test execution results
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetResultsInfo(System.String)">
            <summary>
            Retrieves test results info based on filter
            </summary>
            <param name="filter">filter in form of SQL WHERE clause</param>
            <returns>Array of result info objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetResultsInfo(NHibernate.Criterion.ICriterion)">
            <summary>
            Retrieves test results info based on NHibernate filter
            </summary>
            <param name="filter">filter in NHibernate style</param>
            <returns>Array of result info objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetResultsInfo(System.Guid[])">
            <summary>
            Retrieves test results info based on array of test session IDs
            </summary>
            <param name="sessionIds">array of test session IDs</param>
            <returns>Array of result info objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetActiveProjectResultsInfo">
            <summary>
            Retrieves test results info for current managed project (local + server active project, if present)
            </summary>
            <returns>Array of result info objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetActiveProjectResultsInfo(System.Boolean)">
            <summary>
            Retrieves test results info for current managed project (local + server active project, if present)
            </summary>
            <param name="currentUserOnly">If true, only result created by current user are retrieved; if false, results for all users are retrieved</param>
            <returns>Array of result info objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetResultDescriptor(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo)">
            <summary>
            Retrieves full test result description (protocol); if necessary, downloads the server-side result description
             and performs its integration into the local results' index DB
            </summary>
            <param name="info">test's info object</param>
            <returns>result description</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetNewServerResultsCount">
            <summary>
            Retrieves number of server-side test results not integrated into local results' index DB
            </summary>
            <returns>cnt of new server-side results</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetNewServerResultsCount(System.Boolean)">
            <summary>
            Retrieves number of server-side test results not integrated into local results' index DB
            </summary>
            <param name="currentUserOnly">If true, only result created by current user are retrieved; if false, results for all users are retrieved</param>
            <returns>number of server-side test results not integrated into local results' index DB</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetNewServerResultsCount(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves number of server-side test results not integrated into local results' index DB for a given list of users
            </summary>
            <param name="users">list of users (account names) to retrieve the count for; null or empty list means all users</param>
            <returns>number of server-side test results not integrated into local results' index DB</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.SynchronizeWithServerResults(System.Boolean,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Performs integration of new server-side test results into local results' index DB
            </summary>
            <param name="downloadFiles">true indicates to download and integrate full test result description; by false only test info
            is integrated, so that e.g. information about test result files is still missing in local results' index DB</param>
            <param name="onErrorCallback">callback called if error occurs when processing some result; if the callback return false
            synchronization is aborted</param>
            <returns>cnt of results successfully integrated into local results' index DB</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.SynchronizeWithServerResults(System.Boolean,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean},System.Boolean)">
            <summary>
            Performs integration of new server-side test results into local results' index DB
            </summary>
            <param name="downloadFiles">true indicates to download and integrate full test result description; by false only test info
            is integrated, so that e.g. information about test result files is still missing in local results' index DB</param>
            <param name="onErrorCallback">callback called if error occurs when processing some result; if the callback return false
            synchronization is aborted</param>
            <param name="currentUserOnly">If true, only result created by current user are retrieved; if false, results for all users are retrieved</param>
            <returns>cnt of results successfully integrated into local results' index DB</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.SynchronizeWithServerResults(System.Boolean,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs integration of new server-side test results into local results' index DB for a given list of users
            </summary>
            <param name="downloadFiles">true indicates to download and integrate full test result description; by false only test info
            is integrated, so that e.g. information about test result files is still missing in local results' index DB</param>
            <param name="onErrorCallback">callback called if error occurs when processing some result; if the callback return false
            synchronization is aborted</param>
            <param name="users">List of users (account names) to synchronize for; null or empty list means all users</param>
            <returns>cnt of results successfully integrated into local results' index DB</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.DeleteResult(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo)">
            <summary>
            Deletes test result
            </summary>
            <param name="info">test info object for the result</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.DeleteResults(System.String,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Deletes test results info based on filter
            </summary>
            <param name="filter">filter in form of SQL WHERE clause</param>
            <param name="onErrorCallback">callback called if error occurs when deleting some result; if the callback return false
            deleting is aborted</param>
            <returns>Number of results deleted</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.DeleteResults(NHibernate.Criterion.ICriterion,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Deletes test results info based on NHibernate filter
            </summary>
            <param name="filter">filter in NHibernate style</param>
            <param name="onErrorCallback">callback called if error occurs when deleting some result; if the callback return false
            deleting is aborted</param>
            <returns>Number of results deleted</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptorsCount">
            <summary>
            Returns number of server-side results thar require downloading of server-side descriptor file
            </summary>
            <returns>number of results requiring download</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptorsCount(System.Boolean)">
            <summary>
            Returns number of server-side results thar require downloading of server-side descriptor file
            </summary>
            <param name="currentUserOnly">If true, only result created by current user are retrieved; if false, results for all users are retrieved</param>
            <returns>number of results requiring download</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptorsCount(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns number of server-side results thar require downloading of server-side descriptor file for a given list of users
            </summary>
            <param name="users">List of users (account names) to return the number for; null or empty list means all users</param>
            <returns>number of results requiring download</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptors(System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Downloads all server-side descriptor files requiring download
            </summary>
            <param name="onErrorCallback">callback called if error occurs when processing some result; if the callback return false
            download is aborted</param>
            <returns>List of result descriptors downloaded</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptors(System.Boolean,System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Downloads all server-side descriptor files requiring download
            </summary>
            <param name="currentUserOnly">If true, only result created by current user are retrieved; if false, results for all users are retrieved</param>
            <param name="onErrorCallback">callback called if error occurs when processing some result; if the callback return false
            download is aborted</param>
            <returns>List of result descriptors downloaded</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetMissingServerResultDescriptors(System.Collections.Generic.IEnumerable{System.String},System.Func{Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,System.Exception,System.Boolean})">
            <summary>
            Downloads all server-side descriptor files requiring download for a given list of users
            </summary>
            <param name="users">List of users (account names) to download the descriptors for; null or empty list means all users</param>
            <param name="onErrorCallback"></param>
            <returns>List of result descriptors downloaded</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.RemoveResultFiles(System.Guid,System.Guid[])">
            <summary>
            Removes specified result files from test protocol
            </summary>
            <param name="sessionId">Test session Id</param>
            <param name="fileIds">File IDs of result files to remove</param>
            <returns>number of files actually removed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.UpdateResultFile(System.Guid,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo,Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields)">
            <summary>
            Edits the fields of specified result file
            </summary>
            <param name="sessionId">Test session Id</param>
            <param name="newFileInfo">new values to assign</param>
            <param name="fieldsToUpdate">flags indicating which fields are affected</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.GetUsersWithServerResults">
            <summary>
            Returns a list of users' names (account names) who have AT results on server
            </summary>
            <returns>List of users with results</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IResultProtocolReader.RenameInputFiles(System.Guid,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Types.AliasedEntity})">
            <summary>
            Renames the list of input files within a test
            </summary>
            <param name="sessionId">Test's session Id</param>
            <param name="newNames">List of alias/name pairs</param>
            <returns>Number of input files renamed</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IReport">
            <summary>
            the base interface for the reporting 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IReport.GenerateReport(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo},System.Boolean,System.IntPtr)">
            <summary>
            Will generate the report based on selected steps
            </summary>
            <param name="selectedResults">Selected results available in Results and Reporting</param>
            <param name="showIntermediateResults">True if intermediate results have to be displayed.</param>
            <param name="hWndParent">Handle to a parent dialog.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IReport.ShowOptions(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo},System.Boolean,System.IntPtr)">
            <summary>
            Read/Load the options
            </summary>
            <param name="selectedResults">Selected results available in Results and Reporting</param>
            <param name="showIntermediateResults">True if intermediate results have to be displayed.</param>
            <param name="hWndParent">Handle to a parent dialog.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IReport.SpecifyOutputOrder(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo},System.Boolean,System.IntPtr)">
            <summary>
            Launch Specify Output Order Dialog.
            </summary>
            <param name="selectedResults">Selected results available in Results and Reporting</param>
            <param name="showIntermediateResults">True if intermediate results have to be displayed.</param>
            <param name="hWndParent">Handle to a parent dialog.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IReport.VerifyLicense(System.String)">
            <summary>
            Verify if the current report is valid for the current license
            </summary>
            <param name="licenseId">license Id</param>
            <returns>true if report is available; false report is not available</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.Name">
            <summary>
            Display name of the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.Type">
            <summary>
            get/set the type of report
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.LimitedTo">
            <summary>
            return true if the plug-in has options dialog
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.Viewer">
            <summary>
            The modality used to display the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.ReportId">
            <summary>
            Id of the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.Sequence">
            <summary>
            Order of the report in the report list.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.HasOptionsDialog">
            <summary>
            return true if current extension has options dialog
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IReport.HasSpecifyOutputOrderDialog">
            <summary>
            return true if the plug-in Has Specify Output Order Dialog
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging">
            <summary>
            The interface IRoutineLogging provides logging functionality to SA routines and their executors.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogError(System.String,System.Object[])">
            <summary>
            Logs an error.
            </summary>
            <param name="message">The error message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogErrorWithId(System.String,System.Object[])">
            <summary>
            Logs an error with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogMessage(System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="message">The message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogMessageWithId(System.String,System.Object[])">
            <summary>
            Logs a message with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para>
            </param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning.
            </summary>
            <param name="message">The message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.LogWarningWithId(System.String,System.Object[])">
            <summary>
            Logs a warning with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.FormatMessage(System.String,System.Object[])">
            <summary>
            Formats a string using the specified arguments.
            </summary>
            <param name="message">The format (with indexed placeholders) message. An exception is thrown if message is null.</param>
            <param name="args">The arguments for formatting the message.
            </param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging.FormatMessageWithId(System.String,System.Object[])">
            <summary>
            Loads a resource string and formats it using the specified arguments.
            </summary>
            <param name="resourceId">The id of the resource to load. 
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods">
            <summary>
            The interface ITestPeriods exposes the period-related actual parameters of a test execution.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods.From">
            <summary>
            Gets the start date of the test's period.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods.To">
            <summary>
            Gets the end date of the test's period.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo">
            <summary>
            Create EntityDomainContext for Debuging.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.LoadProjectInfo(System.Object)">
            <summary>
            Load informations regarding idea project from external DomainContext.
            </summary>
            <param name="domainContext">The idea domain context.</param>
            <returns>True, if the loading was succesful.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.FileNameOnServer(System.String)">
            <summary>
            Returns the full name of a file on server.
            </summary>
            <param name="fileName">Name of the file without extenstion.</param>
            <returns>The full path of the file.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.ProjectFolderName">
            <summary>
            Get project folder name on server as unique identifier.
            </summary>
            <returns>The folder name of the idea project.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
            <returns>The name of the idea project.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.ProjectID">
            <summary>
            Gets the ID of the project.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.GetIdeaContext">
            <summary>
            Returns the idea context of the current thread.
            </summary>
            <returns>The current idea context.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IProjectInfo.SetIdeaContext(System.Object)">
            <summary>
            Sets the idea context for then current thread.
            </summary>
            <param name="ideaContext">The new idea context.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic">
            <summary>
            Interface for TaggingBusinessLogic.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.Initialize(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo,System.Collections.Generic.IList{System.Guid},Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage)">
            <summary>
            Initialization when tagging only primary base table for all tests.
            </summary>
            <param name="tableInfo">Info about the idea table to use.</param>
            <param name="listOfTestIds">List of tests to use.</param>
            <param name="activeDatabase">Reference to SmartAnalyzer database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.Initialize(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile,Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage)">
            <summary>
            Initialization when you make tagging for a specific test and execution.
            </summary>
            <param name="tableInfo">Info about the idea table to use.</param>
            <param name="dbTest">Info about the data base test used.</param>
            <param name="dbTestInputFile">Info about the data base test input file used.</param>
            <param name="activeDatabase">Reference to SmartAnalyzer database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.Initialize(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile,Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage)">
            <summary>
            Initialization when you make tagging for a specific test and execution.
            </summary>
            <param name="tableInfo">Info about the idea table to use.</param>
            <param name="dbTest">Info about the data base test used.</param>
            <param name="dbTestInputFile">Info about the data base test input file used.</param>
            <param name="dbExecutionRecord">Info about the data base test execution record.</param>
            <param name="activeDatabase">Reference to SmartAnalyzer database.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.TableInfo">
            <summary>
            File info object of an idea table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.ExecutionRecord">
            <summary>
            Execution record.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.TestInputFile">
            <summary>
            Test input file.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.Test">
            <summary>
            Database test.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.GetAllTags">
            <summary>
            Returns all tags that are defined in the database and are needed by the Tagging View Model.
            This should be called from the Tagging View Model.
            The table tags are compared with the tags info in the Database. 
            Invalid tags or columns association will not be returned.
            </summary>
            <returns>The list of available Tags to me assigned.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.GetTableTagging">
            <summary>
            Returns the list of tags applyed to the tabel and the assigned table column.
            Tags that are not used are not in the returned list.
            Each tag has only the assigned table column. There is no compatible columns list. The list is empty.
            You cannot call SaveTagging() after calling this function only.
            The table tags are compared with the tags info in the Database. 
            Invalid tags or columns association will not be returned.
            </summary>
            <returns>The list of tags applyed to the tabel</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.GetTableTagging(System.Guid,System.String)">
            <summary>
            Returns the list of tags applyed to the tabel and the assigned table column associated with a particular test.
            </summary>
            <param name="testId">Id of the target test.</param>
            <param name="inputFileId">Id of input file.</param>
            <returns>The list of tags applyed to the tabel</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.SaveTagging">
            <summary>
            Saves the tagging for the selected Idea Table.
            </summary>
            <returns>List of changes</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.SaveTagging(System.Guid)">
            <summary>
            Saves the tagging for the selected Idea Table.
            </summary>
            <param name="targetTestId">Test id for special attention.</param>
            <returns>List of changes</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.SaveTagging(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Saves the tagging for the selected Idea tables.
            </summary>
            <param name="listOfTestIds"> list of test Ids for which to update the status.</param>
            <returns>List of changes.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITaggingBusinessLogic.GetDbTagging">
            <summary>
            Returns the list of tags available in DB.
            </summary>
            <returns>The list of tags available in DB</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext">
            <summary>
            Interface implemented by Smart Analyzer test execution context object
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.ScriptProgress(System.Int16,System.Int16)">
            <summary>
            Execution progress report 
            </summary>
            <param name="percent">Current execution completeness, percent</param>
            <param name="nextPercentHint">Estimated execution completeness at the end of current execution phase, percent</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.InputFiles">
            <summary>
            List of input IDEA files used by test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.OutputFiles">
            <summary>
            List of output IDEA files created by test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.PrimaryInputFile">
            <summary>
            Name of primary input file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.PrimaryOutputFile">
            <summary>
            Name of primary output file
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Parameter(System.String)">
            <summary>
            Returns execution parameter with a given name assigned to a primary input file
            </summary>
            <param name="name">Parameter's name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TableParameter(System.String,System.String)">
            <summary>
            Returns execution parameter with a given name assigned to an input file with a given name
            </summary>
            <param name="tableName">Table's name</param>
            <param name="parameterName">Parameter's name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.GlobalParameter(System.String,System.String)">
            <summary>
            Returns global parameter with a given name assigned to input file with specified alias
            </summary>
            <param name="inputFileAlias">Table's alias</param>
            <param name="name">Parameter's name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.GlobalParameters(System.String)">
            <summary>
            Returns list of global parametersassigned to input file with specified alias
            </summary>
            <param name="inputFileAlias">Table's alias</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Trace(System.String)">
            <summary>
            Simple trace method
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TestResultFiles">
            <summary>
            Gets a reference to the object that manages a collection of test result files.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Parameters">
            <summary>
            Gets a reference to an accessor for the primary input table's set of parameters.
            </summary>
            <remarks>An accessor is available also in case the test does not have any input tables.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.ExecutionStatus">
            <summary>
            Gets / sets a value that indicates how the macro has completed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.IsServerTask">
            <summary>
            Determines if the current task is running on an IDEA server.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Log">
            <summary>
            Gets a reference to an object that provides logging functionality to SA routines and their executors.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TestId">
            <summary>
            Gets the identifier of the test routine.
            </summary>
            <remarks>The property returns the B-representation (32 digits separated by hyphens and enclosed in braces) 
            of the Guid that is the identifier of the test routine.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TestVersion">
            <summary>
            Gets the version information of the test routine.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.IsCancellationRequested">
            <summary>
            Determines if the current routine is to be canceled.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.MacroCommands">
            <summary>
            Gets a reference to an object that provides access to various IDEA-related functions.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.ExtendedCommands">
            <summary>
            Gets a reference to an object that provides access to extended, app-specific functions.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Periods">
            <summary>
            Gets a reference to an object that exposes the period-related actual parameters of a test execution.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.UserName">
            <summary>
            Gets the Windows user name of the user who created the task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Strings">
            <summary>
            Gets a reference to an object that provides read-only access to a routine's set of string resources.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TestName">
            <summary>
            Gets the name of the test routine.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.IsDebugLicenseAvailable">
            <summary>
            Gets a value that specifies whether a debug license is available and valid for the currently running routine.
            True, if and only if a valid debug license is available for the currently running routine.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.IdeaClient">
            <summary>
            Gets a reference to the IDEA Client instance in the current execution context.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="msecs">The number of milliseconds for which the thread is blocked.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.InputFilesContainsAlias(System.String)">
            <summary>
            Determines whether the collection of input files contains an element with the specified alias.
            </summary>
            <param name="aliasValue">The alias whose existence is tested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>If aliasValue is null, empty or if it consists only of white space chars,
            the method interprets the call as a request to resolve the primary input file.</para>
            </param>
            <returns>True, if the collection of input files contains an element with the specified 
            alias; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.InputFileByAlias(System.String)">
            <summary>
            Gets the name of input file with the specified alias.
            </summary>
            <param name="aliasValue">The alias whose corresponding input file name is requested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>If aliasValue is null, empty or if it consists only of white space chars,
            the method interprets the call as a request to resolve the primary input file.</para>
            <para>An exception is thrown if an input file with the 
            specified alias does not exist.</para>
            </param>
            <returns>The name input file with the specified alias.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If aliasValue is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.TaskProgress(System.Int16,System.Int16)">
            <summary>
            Execution progress report. Same as ScriptProgress.
            </summary>
            <param name="percent">Current execution completeness, percent</param>
            <param name="nextPercentHint">Estimated execution completeness at the end of current execution phase, percent</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext.IntellectualPropertyOptions">
            <summary>
            Options related to intellectual property issues
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext2">
            <summary>
            IExecutionContext2 extends IExecutionContext with service-provider-like functionality.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext2.GetServiceById(System.String)">
            <summary>
            Gets the service object with the specified id.
            </summary>
            <param name="serviceId">A string containing the id of the service to get.</param>
            <returns>If found, a reference to the service with the specified id; otherwise, null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext3">
            <summary>
            IExecutionContext3 extends IExecutionContext2 with App Workflow related properties.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext3.AppWorkflowID">
            <summary>
            Gets the ID of active App Workflow as string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext3.IsAppWorkflowExecution">
            <summary>
            Determines if the current task is running in context of App Workflow.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress">
            <summary>
            Interface for script execution progress notifications
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress.ScriptProgress(System.Int16,System.Int16)">
            <summary>
            Execution progress report 
            </summary>
            <param name="percent">Current execution completeness, percent</param>
            <param name="nextPercentHint">Estimated execution completeness at the end of current execution phase, percent</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask">
            <summary>
            Interface defining the behaviour of IDEA Task aimed at audit test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.Id">
            <summary>
            Test's key; consists of test's ID (as in DB) and execution session ID (set by task submitter)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.Name">
            <summary>
            Name of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.MachineId">
            <summary>
            Unique identifier of client's computer (where from the test was submitted)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.Error">
            <summary>
            Test execution result (null if success)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.InputParams">
            <summary>
            Test's input parameters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.Initialize">
            <summary>
            Initialize test (normally, from DB)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.LoadParams(System.String)">
            <summary>
            For future use in script; should load all necessary parameters from file
            </summary>
            <param name="fileName">Parameters' file name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.PerformTask(System.Boolean)">
            <summary>
            Forces test's execution
            </summary>
            <param name="async">task executed asynchronousla if true</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.Cancel">
            <summary>
            Aborts task's execution
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITestExecutorTask.TestInfo">
            <summary>
            Returns basic test info
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.ITracer">
            <summary>
            High level tracing service interface
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.InitializeSaContext(Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo,Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo)">
            <summary>
            Returns context info
            </summary>
            <param name="ideaInfo"></param>
            <param name="saInfo"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Info(System.String)">
            <summary>
            Simple tracing of information
            </summary>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Info(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracing of information
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Info(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Formatting and tracing of information
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="format">message format</param>
            <param name="argv">message args</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Warning(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracing of warning
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Warning(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Formatting and tracing of warning
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="format">message format</param>
            <param name="argv">message args</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Error(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracing of error
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Error(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Formatting and tracing of error
            </summary>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="format">message format</param>
            <param name="argv">message args</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Trace(System.Diagnostics.TraceEventType,Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Formatting and tracing of message of any event type
            </summary>
            <param name="traceLevel">event type</param>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="message">message format</param>
            <param name="argv">message args</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.ITracer.Trace(System.Diagnostics.TraceEventType,Audicon.SmartAnalyzer.Common.Types.FunctionalArea,Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes,System.String,System.Object[])">
            <summary>
            Formatting and tracing of message of any event type
            </summary>
            <param name="traceLevel">event type</param>
            <param name="funcArea">Functional area on behalf of which tracer operates</param>
            <param name="infoTypes">types of extra information to be added to trace</param>
            <param name="message">message format</param>
            <param name="argv">message args</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression">
            <summary>
            Common part of any expression element.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression.Negate">
            <summary>
            Gets the negation status of the expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression.Type">
            <summary>
            Gets the type of the element (AND, OR or simple)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup">
            <summary>
            The interface IExpressionSimple provides information regarding a group of expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup.Negate">
            <summary>
            Gets the negation status of the expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup.Type">
            <summary>
            Gets the type of the group (AND or OR).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup.AddGroup(System.Boolean,System.Boolean)">
            <summary>
            Creates a new expression group and adds it to the current group.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="isAND">if true group is AND group, else it is OR group</param>
            <returns>newly created group</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup.AddElement(System.Boolean,System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType,Audicon.SmartAnalyzer.Common.Types.EquationOperator,System.Object[])">
            <summary>
            Creates a new simple expression and adds it to the current group.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="propertyName">name of the property</param>
            <param name="propertyType">property type</param>
            <param name="equationOperator">operator to be used in the equation</param>
            <param name="operands">variable number of operands (IsInList accepts more than 1)</param>
            <returns>newly created element</returns>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception> 
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup.Elements">
            <summary>
            Returns the list of elements in current group.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple">
            <summary>
            The interface IExpressionSimple provides information regarding a simple equation expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.Negate">
            <summary>
            Gets the negation status of the expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.Type">
            <summary>
            Gets the type of the expression (always simple).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.PropertyName">
            <summary>
            Gets the name of the property used (left side of the expression).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.PropertyType">
            <summary>
            Gets the type of the property used.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.Operator">
            <summary>
            Gets the operator used in expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionSimple.Operand">
            <summary>
            Gets the operand used in expression (right side of the expression).
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree">
            <summary>
            The interface declares methods for accessing and modifying a tree whose leaves are GUIDs.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.IsReadOnly">
            <summary>
            Gets a value indicating whether the instance is read-only.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.GetDirectory(System.Int32)">
            <summary>
            Returns information about a directory.
            </summary>
            <param name="nodeId">The id of the directory to retrieve.</param>
            <returns>A reference to a DirectoryRecord object describing the directory.</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If a directory with the specified id was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.GetFirstLevelSubdirectoriesOf(System.Int32)">
            <summary>
            Returns all first-level subdirectories of the specified directory in the increasing order of their position.
            </summary>
            <param name="nodeId">The id of the node whose subdirectories to retrieve. 
            By using the special value 0, the caller can retrieve the root directory.</param>
            <returns>A list of all first-level subdirectories of the specified directory in the increasing order of their position.
            For each subdirectory, its identifier and name are returned. An empty list is returned if the specified node does not exist.
            </returns>            
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.GetFirstLevelLeavesOf(System.Int32)">
            <summary>
            Returns all first-level leaves of the specified directory.
            </summary>
            <param name="nodeId">The id of the node whose leaves to retrieve.</param>
            <returns>A list of all first-level leaves of the specified directory.
            An empty list is returned if the specified node does not exist.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.GetLeaf(System.Int32)">
            <summary>
            Returns information about a leaf.
            </summary>
            <param name="id">The id of the leaf to retrieve.</param>
            <returns>A reference to a LeafRecord describing the leaf.</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If a leaf with the specified id was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.InsertDirectory(System.String,System.Int32,System.Int32)">
            <summary>
            Inserts the specified directory into the tree. The function generates a unique id for the new node.
            </summary>
            <param name="name">The name of the new directory. An exception is thrown if this reference is null.
            The name must not be unqiue inside the parent directory.</param>
            <param name="position">The zero-based position of the node in the list of subdirectories of the specified node.
            The special value -1 can be used in case the node will be added to the end of the list. 
            If position equals the number of sibling subdirectories, the node will also be added to the end of the list.
            Otherwise the position must be an interger between 0 and the number of sibling subdirectories minus 1.</param>
            <param name="parentId">The id of the parent node.</param>
            <returns>The identifier of the new database entry.</returns>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position is neither -1, nor a valid index in the list of 
            existing sibling subdirectories.</exception>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If parentId does not identify 
            an existing node.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.MoveDirectoryTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a directory to another location.
            </summary>
            <param name="sourceId">The identifier of the directory to move. An exception is thrown if the directory 
            does not exist.</param>
            <param name="destinationId">The identifier of the directory to which the function moves the source directory. 
            An exception is thrown if the destination does not exist.
            An exception is thrown if the destination is a subdirectory of the source directory or if source and 
            destination are the same.</param>
            <param name="position">The zero-based position of the node in the list of subdirectories of the specified node.
            The special value -1 can be used in case the node will be added to the end of the list. 
            If position equals the number of sibling subdirectories, the node will also be added to the end of the list.
            Otherwise the position must be an interger between 0 and the number of sibling subdirectories minus 1.</param>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
            <exception cref="T:System.ArgumentException">If source and destination are the same, or if the destination is 
            a descendant of the source.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If sourceId does not identify 
            an existing directory.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If destinationId does not identify 
            an existing directory.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position is neither -1, nor a valid index in the list of 
            existing sibling subdirectories.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.RecursivelyDeleteDirectory(System.Int32)">
            <summary>
            Deletes the specified node (if not a root) and all its descendants. 
            </summary>
            <param name="nodeId">The id of the node to delete. The function does nothing if the specified directory does not exist.</param>
            <remarks>If the specified node is a root (that is, its Parent id is 0), only its descendants will be deleted.</remarks>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.RenameDirectory(System.Int32,System.String)">
            <summary>
            Renames the directory with the specified id.
            </summary>
            <param name="nodeId">The id of the directory to rename. An exception is thrown if the directory does not exist.</param>
            <param name="newName">The new name of the directory. An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If newName is null.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified directory does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.ImportDirectoryFrom(System.Int32,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree,System.Int32,System.Int32)">
            <summary>
            Imports a directory and all its descendants to the specified directory.
            </summary>
            <param name="sourceId">The identifier of the directory to import. An exception is thrown if the directory does not exist.
            </param>
            <param name="source">The FunWithFavs source object that contains the directory to import. An exception is thrown if this 
            reference is null.
            FunWithFavs can be equal to the current instance.</param>
            <param name="destinationId">The identifier of the directory to which the function copies the source directory. 
            An exception is thrown if the destination does not exist.
            If the source object is the same as the current instance, then an exception is thrown if the destination is a subdirectory 
            of the source directory or if source and destination are the same.
            If the source object and the current instance are different but are using the same database and the destination is a 
            subdirectory of the source directory or if source and destination are the same, 
            then the behavior of the function is not defined.
            <para>If the destination directory contains a subdirectory with the same name as the source, the function will not merge them.
            A directory with the same name will be added to the destination.</para>
            </param>
            <param name="position">The zero-based position of the node in the list of subdirectories of the specified node.
            The special value -1 can be used in case the node will be added to the end of the list. 
            If position equals the number of sibling subdirectories, the node will also be added to the end of the list.
            Otherwise the position must be an interger between 0 and the number of sibling subdirectories minus 1.</param>
            <returns>The identifier of the copy of the source directory.</returns>
            <remarks>The function creates a copy of the specified directory and of all its descendants in the destination directory; 
            therefore the function does not guarantee that the identifiers of the source nodes are preserved.
            <para>The behavior is 'all or nothing'.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If source is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If sourceId does not identify an existing 
            directory.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If destinationId does not identify an 
            existing directory.</exception>
            <exception cref="T:System.ArgumentException">If source and destination are the same, or if the destination is a descendant 
            of the source.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position is neither -1, nor a valid index in the list of existing 
            sibling subdirectories.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.InsertLeaf(System.Guid,System.Int32)">
            <summary>
            Inserts the specified leaf reference into the tree. The function generates a unique id for the new entry.
            </summary>
            <param name="referenceId">The identifier of the leaf to insert.</param>
            <param name="parentId">The id of the parent node.</param>
            <returns>Returns a pair whose boolean part returns true if the leaf was inserted and 
            false if the parent already contained a leaf with the same identifier, and whose int part 
            returns the identifier of the new entry or the identifier of the existing entry.</returns>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If parentId does not identify an existing node.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.DeleteLeaf(System.Int32)">
            <summary>
            Deletes the specified leaf.
            </summary>
            <param name="id">The id of the leaf to delete. The function does nothing if the specified leaf does not exist.</param>
            <exception cref="T:System.ObjectDisposedException">If the object is disposed.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.InsertLeaves(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
            <summary>
            Inserts a sequence of leaves into the specified directory. The function generates unique ids for the new entries.
            </summary>
            <param name="referenceIds">The reference identifiers to insert. An exception is thrown if this reference is null.</param>
            <param name="parentId">The id of the parent node.</param>
            <returns>A list of pairs, in the order in which the referenceIds were enumerated. 
            Each entry corresponds to the referenceId on the same position and is a pair whose boolean part returns true if the leaf 
            was inserted and false if the parent already contained a leaf with the same identifier, and 
            whose int part returns the identifier of the new entry or the identifier of the existing entry.
            The function returns an empty list if the input sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If referenceIds is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If the input sequence is not empty and the parentId does not identify an existing node.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.DeleteLeaves(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes the specified leaves.
            </summary>
            <param name="ids">The ids of the leaves to delete. 
            The function does not fail if the sequence is empty or if the sequence contains leaves that do no exist.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If ids is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the object is disposed.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.DeleteLeavesByRefId(System.Collections.Generic.IEnumerable{System.Guid},System.Int32)">
            <summary>
            Deletes all the specified leaves of the given directory.
            </summary>
            <param name="ids">The ids of the leaves to delete.
            The function does not fail if the sequence is empty or if the sequence contains leaves that do no exist.
            An exception is thrown if this reference is null.
            </param>
            <param name="parentId">The id of the directory whose leaves to delete. 
            The function does nothing if the directory does not exist.</param>
            <exception cref="T:System.ArgumentNullException">If ids is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the object is disposed.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
            <remarks>Only the direct descendants of the directory will be removed.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Interfaces.Trees.IUniqueIdentifierTree.MoveLeavesTo(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Moves a set of leaves to the specified directory.
            </summary>
            <param name="leaves">The identifiers of the leaves to move. 
            An exception is thrown if this reference is null or if it contains a leaf that does not exist.
            If the sequence is empty, the function does nothing.
            </param>
            <param name="destinationId">The identifier of the directory to which the function moves the source directory. 
            An exception is thrown if the destination does not exist.</param>
            <returns>A list of pairs, in the order in which the leaves were enumerated. 
            Each entry corresponds to the leaf on the same position and is a pair whose boolean part returns true if the leaf 
            was inserted and false if the parent already contained a leaf with the same identifier, and 
            whose int part returns the identifier of the leaf or the identifier of the existing entry.
            <para>The function removes all input leaves from their parent directory (if the destination is different than the 
            source directory).</para>
            <para>The function returns an empty list if the input sequence is empty.</para></returns>
            <exception cref="T:System.ArgumentNullException">If leaves is null.</exception>
            <exception cref="T:System.NotSupportedException">If the object is read-only.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If destinationId does not identify an existing directory.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">
            If sequence contains an item that does not exist.</exception>
            <remarks>The behavior is 'all or nothing'.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging">
            <summary>
            Allows creating test/table associations when tagging the table
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.#ctor(System.Object,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation[])">
            <summary>
            Constructor.
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
            <param name="locations">Optional options controlling the associations</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.GetTag(System.String)">
            <summary>
            Returns the ID of the tag assigned to the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the tag.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.GetFieldName(System.String)">
            <summary>
            Returns the name of the field assigned to the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.RemoveTag(System.String)">
            <summary>
            Removes the tagging from the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the removed field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.RemoveAllTags">
            <summary>
            Removes tagging from all table columns.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.SetTag(System.String,System.String)">
            <summary>
            Adds a tag to the specified field name.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified field name does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.Save">
            <summary>
            Saves defined tagging to disk file.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.SaveWithTestFilter(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves defined tagging to disk file; test filter for cretaing tests associations can be specified.
            <param name="testFilter">Test filter for cretaing tests associations.</param>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.NoSharedTagging">
            <summary>
            Specifies shared tagging publishing has to be suppressed
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.AssociatePrimary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,System.Object[])">
            <summary>
            Associate active IDEA table with primary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="optionsList">Controlling options</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.AssociatingTagging.AssociateSecondary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,System.String,System.Object[])">
            <summary>
            Associate active IDEA table with secondary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="inputFileAlias">Secondary input file alias</param>
            <param name="optionsList">Controlling options</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase">
            <summary>
            Create, modify and populate Idea Databases
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Create based on the context.
            </summary>
            <param name="execContext">Instance of populated context.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.DatabaseName">
            <summary>
            Get the database name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.FieldDelimiter">
            <summary>
            Data field delimiter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.RecordDelimiter">
            <summary>
            Data record delimiter
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.UseDefaultLocale">
            <summary>
            Use default locale settings (english) when parsing data (numbers); if set to false then current locale settings will be used
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AddDatabase(System.String,System.String)">
            <summary>
            Registers the name of the table to be created
            </summary>
            <param name="databaseName">table's name</param>
            <param name="description">table's description</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AddDatabaseAt(System.String,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Registers the name of the table to be created on specified location
            </summary>
            <param name="databaseName">table's name</param>
            <param name="description">table's description</param>
            <param name="location">Location of a new table</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.Open(System.String)">
            <summary>
            Open on Idea database that you want to modify.
            </summary>
            <param name="databaseName">Name of the database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.Close">
            <summary>
            Closes the database opened previously by Open()
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.PerformTask">
            <summary>
            Performs the table adding task specified previously by calling AddDatabase()/AddField()/AppendValues()
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AddField(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Registers the new field to be added to the table to create.
            </summary>
            <param name="fieldName">Name of the new field.</param>
            <param name="description">Description of the new field.</param>
            <param name="type">Type of the new field.</param>
            <param name="length">Length of the new field.</param>
            <param name="decimals">Decimals of the new field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AppendEmptyValues">
            <summary>
            Append an empty value the new table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AppendRecord(System.String)">
            <summary>
            Appends single record to the new table
            </summary>
            <param name="value">String containing values separated by FieldDelimiter</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.AppendValues(System.String)">
            <summary>
            Append values the new table.
            </summary>
            <remarks>You can only add a whole line. Lines will be separated by RecordDelimiter and values by FieldDelimiter. 
            If values are empty, an empty line will be appended.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.LoadValuesFromFile(System.String,System.UInt32,System.String)">
            <summary>
            Loads data records from the file and appends them to the new table
            </summary>
            <param name="fileName">File name</param>
            <param name="linesToSkip">Lines to skip before loading records</param>
            <param name="separator">Character used as data separator</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.EditValue(System.Int32,System.String,System.String)">
            <summary>
            Edit a cell.
            </summary>
            <param name="lineNumber">Line number of the cell.</param>
            <param name="fieldName">Name of the field which contains the cell.</param>
            <param name="newValue">Value to be added in the cell.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.ReadValue(System.Int32,System.String)">
            <summary>
            Get the value from a cell.
            </summary>
            <param name="lineNumber">Line number of the cell.</param>
            <param name="fieldName">Name of the field which contains the cell.</param>
            <returns>Value of the cell.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.ReadLine(System.Int32)">
            <summary>
            Get the values from a whole line.
            </summary>
            <param name="lineNumber">Number of the line from which the values will be gotten.</param>
            <returns>List of values separated by FieldDelimiter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CreateDatabase.Create">
            <summary>
            Create an empty database
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder">
            <summary>
            Builds Idea equation based on dialog parameter.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.Clear">
            <summary>
            Clears the list of equations.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.Equation">
            <summary>
            Get or set an equation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.UseMatch">
            <summary>
            Sets if "@match"will be used the final equation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.Database">
            <summary>
            Set the opened idea database (populated IdeaDatabase object).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.Add">
            <summary>
            Create an equation and add it to the main builder.
            </summary>
            <returns>Returns an equation object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.EquationBuilder.PerformTask">
            <summary>
            Checkes if the equation is valid.
            </summary>
            <returns> 0 if equation if computed OK.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement">
            <summary>
            Provides functionality for manipulating the IDEA table fields
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement.#ctor(System.Object)">
            <summary>
            ctor
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement.#ctor(System.Object,Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            ctor
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
            <param name="execCtx">Execution context reference</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement.AppendField(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Registers the new parameerized field to be added to the table
            </summary>
            <param name="fieldName">Name of the new field.</param>
            <param name="description">Description of the new field.</param>
            <param name="type">Type of the new field.</param>
            <param name="length">Length of the new field.</param>
            <param name="decimals">Decimals of the new field.</param>
            <param name="args">If present, first item is the equation of the new field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement.PerformTask">
            <summary>
            Finalize adding the fields
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.HistoryCleaner">
            <summary>
            Idea table history cleaner.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.HistoryCleaner.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.HistoryCleaner.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Constructor for setting execution context.
            </summary>
            <param name="execContext"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.HistoryCleaner.RemoveHistory(System.String)">
            <summary>
            Removes history added during the current execution.
            </summary>
            <param name="ideaTableName">Name of Idea table for which the history will be deleted</param>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.IndexCleaner">
            <summary>
            Idea table index cleaner.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.IndexCleaner.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.IndexCleaner.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Constructor for setting execution context.
            </summary>
            <param name="execContext">instance of execution context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.IndexCleaner.DeleteIndex(System.String,System.String)">
            <summary>
            Delete index from an idea table.
            </summary>
            <param name="ideaTableName">Name of Idea table for which the indices will be deleted</param>
            <param name="indices">Indices that need to be removed of the form "I1;A/D;I2;A/D..."</param>
            <remarks>This will preserve indices existing on the base table.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP">
            <summary>
            Functionality for protecting the intelectual property for Idea Macros.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.#ctor">
            <summary>
            Basic Constructor.
            </summary>
            <remarks>Execution location will be set to Client.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Constructor used for setting the execution location.
            </summary>
            <param name="execContext">Execution Context object.</param>
            <exception cref="T:System.ArgumentNullException">If execContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.ProjectOverviewOff">
            <summary>
            Idea will not record history information for its tables in Project Overview.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.ProjectOverviewOn">
            <summary>
            Idea will record history information for its tablesin Project Overview.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.RemoveHistory(System.String)">
            <summary>
            Deletes the history of an Idea table.
            </summary>
            <param name="ideaTableName">Name or path of an Idea table.</param>
            <remarks>If path is not present current working directory will be used.</remarks>
            <exception cref="T:System.ArgumentException">If ideaTableName can not be found.</exception>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.RemoveHistoryLast(System.String,System.Int32)">
            <summary>
            Deletes last history rows of an Idea table.
            </summary>
            <param name="ideaTableName">Name or path of an Idea table.</param>
            <param name="count">Number of elements to be removed.</param>
            <remarks>If path is not present current working directory will be used.</remarks>
            <exception cref="T:System.ArgumentException">If ideaTableName can not be found.</exception>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.RemoveHistoryKeep(System.String,System.Int32)">
            <summary>
            Deletes all history rows of an Idea table except the first n.
            </summary>
            <param name="ideaTableName">Name or path of an Idea table.</param>
            <param name="count">Number of elements to be removed.</param>
            <remarks>If path is not present current working directory will be used.</remarks>
            <exception cref="T:System.ArgumentException">If ideaTableName can not be found.</exception>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.HistoryCount(System.String)">
            <summary>
            Retreave history count for a table.
            </summary>
            <param name="ideaTableName">Name or path of an Idea table.</param>
            <remarks>If path is not present current working directory will be used.</remarks>
            <exception cref="T:System.ArgumentException">If ideaTableName can not be found.</exception>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.ProtectIP.HistoryCleaner">
            <summary>
            Get an instance of historyCleaner.
            </summary>
            <returns>an istance of HistoryCleaner boud to the current execution context.</returns>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging">
            <summary>
            Light tagging.
            Reads and performs tagging without checking for correctness against the database.
            To be used on idea server, idea script and places wher integrity is not a must.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.#ctor(System.String)">
            <summary>
            Specialized constructor.
            The caller should compute the full path of the file.
            </summary>
            <param name="tablePath">Full path of the idea table.</param>
            <exception cref="T:System.ApplicationException">Thrown when the list of fields is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.#ctor(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Specialised constructor.
            </summary>
            <param name="ideaDatabase">Reference to opened idea database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.#ctor(System.String,System.Boolean)">
            <summary>
            Instanciates the class using a file name(no full path) and a flag(local or on server).
            </summary>
            <param name="relativeFileName">Name of the file with extension.</param>
            <param name="isLocal">True if is local and false if on server.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.GetTag(System.String)">
            <summary>
            Returns the ID of the tag assigned to the specified field name. This method is not supported any more 
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the tag.</returns>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.GetFieldName(System.String)">
            <summary>
            Returns the name of the field assigned to the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified tag ID does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.RemoveTag(System.String)">
            <summary>
            Removes the tagging from the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the removed field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified tag ID does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.RemoveAllTags">
            <summary>
            Removes tagging from all table columns.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.SetTag(System.String,System.String)">
            <summary>
            Adds a tag to the specified field name.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified field name does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.Save">
            <summary>
            Saves defined tagging to disk file.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.SaveWithTestFilter(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves defined tagging to disk file; test filter for cretaing tests associations can be specified.
            <param name="testFilter">Test filter for cretaing tests associations.</param>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.Tagging.NoSharedTagging">
            <summary>
            Specifies shared tagging publishing has to be suppressed
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement">
            <summary>
            Used for managing SA tags.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.GetAllTags(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Get collection of tags for Idea database. Each collection item provides COM-visible interface defined by the class 
             Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag
            </summary>
            <param name="database">Opened IEDA database</param>
            <returns>Collection of DB's tags</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.TagExists(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Search for a tag inside an Idea database.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="tagName">Name of the tag to search for.</param>
            <returns>Name of the field if tag is found</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tagName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.GetFieldForTag(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Returns IDEA tables field name associated with given tag.
            </summary>
            <param name="database">Opened IDEA database.</param>
            <param name="tagName">Name of the tag to search for.</param>
            <returns>Name of the field associated with the tag; empty string in case tag not found</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tagName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.SetFieldExtras(COMDBLib.ComDatabase2,System.String,System.String)">
            <summary>
            Sets a raw tag info to database field
            </summary>
            <param name="database">Database to set</param>
            <param name="fieldName">Name of field</param>
            <param name="tagInfo">Raw tag info to set</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.GetFieldExtras(COMDBLib.ComDatabase2,System.String)">
            <summary>
            Gets a raw tag info for database field
            </summary>
            <param name="database">Database to get from</param>
            <param name="fieldName">Name of field</param>
            <returns>Raw tag info</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.CheckTagExistence">
            <summary>
            Get an instance of CheckTagExistence.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.Tagging(System.String)">
            <summary>
            Functionality for Tagging Idea tables.
            </summary>
            <param name="tableName">Name of Idea table that needs to be taged.</param>
            <returns>An instance of TableTagging class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.TaggingForLocation(System.String,System.Boolean)">
            <summary>
            Functionality for Tagging Idea tables.
            </summary>
            <param name="tableName">Name of Idea table that needs to be taged.</param>
            <param name="server">True if file is located on server.</param>
            <returns>An instance of TableTagging class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.TaggingForDb(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Functionality for Tagging Idea tables.
            </summary>
            <param name="database">A reference to the Idea table that needs to be taged.</param>
            <returns>An instance of TableTagging class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.TagManagement.AssociatingTagging(System.Object,System.Object[])">
            <summary>
            Functionality for Tagging Idea tables and associating them with Audit tests.
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
            <param name="args">Options controlling the associations</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence">
            <summary>
            Functionality for tag axistance and its definition.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence.Database">
            <summary>
            Atach an Idea database to check tag existance context.
            </summary>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence.Add(System.String)">
            <summary>
            Adds an tag name to the list of input tags.
            </summary>
            <param name="tagName">Name of the Tag to be added.</param>
            <exception cref="T:System.ArgumentNullException">If tagName is null.</exception>
            <exception cref="T:System.ArgumentException">If tagName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence.PerformTask">
            <summary>
            Populate the existing or missing tags objects.
            </summary>
            <remarks>Case sensitive search is used for matching tags.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence.MissingTags">
            <summary>
            List of missing tags.
            </summary>
            <exception cref="T:System.ApplicationException">If perform task has not been called.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.CheckTagExistence.ExistingTags">
            <summary>
            List of existing tags.
            </summary>
            <exception cref="T:System.ApplicationException">If perform task has not been called.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator">
            <summary>
            Implementsa task for creating an IDEA calendar table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Initializes a new CalendarTableCreator with a refernce to
            the execution context in which the creator will operate.
            The object will use a culture object based on the current user's 
            default locale, including the user-selected settings, as 
            provider of day names, default week rule, first day of week and calendar.
            </summary>
            <param name="context">An IExecutionContext context reference.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new CalendarTableCreator with a refernce to
            the execution context in which the creator will operate and the CultureInfo
            that will be used as provider of day names, default week rule, first day of week 
            and calendar.
            </summary>
            <param name="context">An IExecutionContext context reference.</param>
            <param name="culture">A CultureInfo reference that will be used as provider 
            of day names, default week rule, first day of week and calendar or null, if the
            object shall use a culture object based on the current user's 
            default locale, including the user-selected setting.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.ExecutionContext">
            <summary>
            Gets a reference to the current SA execution context.
            </summary>
            <returns>An IExecutionContext.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.m_context">
            <summary>
            Holds a reference to the current SA execution context.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CultureInfo">
            <summary>
            Gets a reference to the CultureInfo object that acts
            as the provider of day names, default week rule, first day of week and calendar.
            </summary>
            <returns>The caller-supplied CultureInfo object or a culture object based on the 
            current user's default locale, including the user-selected settings.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.m_cultureInfo">
            <summary>
            Holds a reference to the CultureInfo object that acts
            as the provider of day names, default week rule, first day of week and calendar.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions">
            <summary>
            Defines the calendar table options.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions.UseShortDayNames">
            <summary>
            If set, instructs the creator to assign short day names to the column WEEKDAY.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions.IncludeZeroPeriod">
            <summary>
            If set, instructs the creator to to start the calendar table with a row zero-period row
            corresponding to IDEA's zero-date.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions.GenerateUniqueTableName">
            <summary>
            If set, the creator shall try to create an unique result table name starting 
            from the suggested name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CreatorOptions">
            <summary>
            Gets / sets the creator options.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.IsCreatorOptionSet(Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions)">
            <summary>
            Determines whether one or more CalendarTableCreatorOptions are set in CreatorOptions.
            </summary>
            <param name="option">The CalendarTableCreatorOptions to check.</param>
            <returns>True, if the option(s) were set; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.SetCreatorOption(Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarTableCreatorOptions,System.Boolean)">
            <summary>
            Turns on or off the specified calendar creator option in CreatorOptions.
            </summary>
            <param name="option">The CalendarTableCreatorOptions to change.</param>
            <param name="value">A Boolean that specifies whether the option will be enabled or not.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.IsColumnSelected(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Determines whether the specified column is to be included in the calendar table.
            </summary>
            <param name="columnId">The column id.</param>
            <returns>True, if the column was selected; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.ColumnIds">
            <summary>
            Gets / sets a value that specifies the ids of the optional calendar column to be included.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.WeekNumbering">
            <summary>
            Gets / sets the week numbering to be used.
            </summary>
            <returns>A WeekNumbering value.</returns>
            <remarks>Default value: 0 (WeekNumbering.Default).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.UseShortDayNames">
            <summary>
            Gets / sets a Boolean that specifies whether the column WEEKDAY will contain the short day names.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: False (WEEKDAY contains the 'full' day names).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.IncludeZeroPeriod">
            <summary>
            Gets / sets a Boolean that specifies whether the first row of the calendar table is the zero-period row
            corresponding to IDEA's zero-date.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: 0 (the calendar does not include the zero-period row).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.WeekendsOption">
            <summary>
            Gets / sets a value that specifies whether to include or not the weekends in the result.
            </summary>
            <returns>A WeekendsOption.</returns>
            <remarks>Default value: 0 (WeekendsOption.Include).</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.WeekendsMask">
            <summary>
            Gets / sets a bit pattern specifying the weekends (bit 0: Sunday, bit 1: Monday, ... bit 6: Saturday).
            This property is ignored unless WeekendsOption is set to ExcludeCustomWeekends.
            </summary>
            <returns>An int.</returns>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.IncludeColumn(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Instructs the creator to include the column with the specified id in the calendar database.
            </summary>
            <param name="columnId">A CalendarColumnId value that specifies the id of the column to be included.
            <para>The column with id Date will always be included.</para>
            </param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.StartDate">
            <summary>
            Gets / sets the Gregorian calendar start date of the result table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.EndDate">
            <summary>
            Gets / sets the Gregorian calendar end date of the result table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.TableName">
            <summary>
            Gets / sets a string containing the name of the result table.
            </summary>
            <returns>A string.</returns>
            <remarks>Default value: null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.PublicHolidayFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the columns IS_PUBLIC_HOLIDAY and HOLIDAY.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.SchoolVacationFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the columns IS_SCHOOL_VACATION and VACATION.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.DayOffFilter">
            <summary>
            Gets / sets a special day filter that the creator uses to determine the value of the column IS_DAY_OFF.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GenerateUniqueTableName">
            <summary>
            Gets / sets a Boolean that specifies whether the generator shall try to create an unique result table name starting 
            from the suggested name.
            </summary>
            <returns>A Boolean.</returns>
            <remarks>Default value: False (the generator does not try to create an unique result table name).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetCalendarWeekCalculator(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.WeekNumbering,System.Globalization.CultureInfo)">
            <summary>
            Creates a calendar week calculator for the specified week numbering and culture info.
            </summary>
            <param name="weekNumbering">A WeekNumbering value.</param>
            <param name="cultureInfo">A CultureInfo object that acts as a provider of calendar, calendar week rule and first day of week
            for those week numberings that require them.</param>
            <returns>An ICalendarWeekCalculator.</returns>
            <exception cref="T:System.ArgumentNullException">If cultureInfo is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.LogParameters">
            <summary>
            Logs the creator's parameters to the execution context's log.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.PerformTask">
            <summary>
            Generates the calendar table.
            </summary>
            <returns>An ICalendarTableCreatorResult reference to an object that holds the result of the execution.</returns>
            <exception cref="T:System.InvalidOperationException">If TableName is null or 
            if it consists of only white spaces and GenerateUniqueTableName is false.</exception>
            <exception cref="T:System.InvalidOperationException">If the database already exists.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.VerifyTableName">
            <summary>
            Verifies the table name.
            </summary>
            <returns>A trimmed string containing the table name or null.</returns>
            <exception cref="T:System.InvalidOperationException">If TableName is null or 
            if its consists of only white spaces and GenerateUniqueTableName is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.VerifyWeekNumbering">
            <summary>
            Verifies the WeekNumbering property value.
            </summary>
            <returns>A WeekNumbering value.</returns>
            <exception cref="T:System.InvalidOperationException">If WeekNumbering is not one of the defined values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.VerifyWeekendsOption">
            <summary>
            Verifies the WeekendsOption property value.
            </summary>
            <returns>A WeekendsOption value.</returns>
            <exception cref="T:System.InvalidOperationException">If WeekendsOption is not one of the defined values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.VerifyStartDate">
            <summary>
            Verifies the StartDate property value.
            </summary>
            <exception cref="T:System.InvalidOperationException">If StartDate is not valid for CultureInfo's calendar.</exception>
            <returns>The date component of StartDate.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.VerifyEndDate">
            <summary>
            Verifies the EndDate property value.
            </summary>
            <exception cref="T:System.InvalidOperationException">If StartDate is not valid for CultureInfo's calendar.</exception>
            <returns>The date component of StartDate.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.IsDateValid(System.DateTime)">
            <summary>
            Determines whether the specified Gregorian calendar date is valid for
            the CultureInfo's calendar.
            </summary>
            <param name="value">A Gregorian date and time value.</param>
            <returns>True, if the value is in the range Calendar.MinSupportedDateTime and Calendar.MaxSupportedDateTime; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata">
            <summary>
            Extends IdeaColumnMetadata with a property that holds the calendar column id.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Initializes a new empty CalendarColumnMetadata for
            the column with the specified id.
            </summary>
            <param name="columnId">A CalendarColumnId value.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata.#ctor(Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata)">
            <summary>
            Initializes a new CalendarColumnMetadata instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata.ColumnId">
            <summary>
            Gets the id of the column.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata.m_columnId">
            <summary>
            Holds the id of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.CalendarColumnMetadata.ZeroPeriodValueAsString">
            <summary>
            Returns the IdeaDbCreatorHelper-compatible string representation 
            of the current column in the zero-period row.
            </summary>
            <returns>A string/</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetDefaultCalendarTableName">
            <summary>
            Returns the default calendar table name including the IDEA database file extension.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetCalendarTableResourceString(System.String,System.String)">
            <summary>
            Retrieves the value of the specified calendar table resource
            from the SA execution context's strings table.
            </summary>
            <param name="resourceId">A string containing the id of the requested resource.</param>
            <param name="defaultValue">An optional string that the method will return if the resource could not
            be located.</param>
            <returns>The value of the resource with the specified id or defaultValue, if the resource was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetDateColumnMetadata">
            <summary>
            Returns the metadata for the creation of the DATE column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetWeekDayColumnMetadata(System.Int32)">
            <summary>
            Returns the metadata for the creation of the DATE column.
            </summary>
            <param name="maxValueLength">An int containing the max. length of the column.</param>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetDayOfYearColumnMetadata">
            <summary>
            Returns the metadata for the creation of the DAY_OF_YEAR column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetCalendarWeekColumnMetadata">
            <summary>
            Returns the metadata for the creation of the CALENDAR_WEEK column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetCalendarWeekStartColumnMetadata">
            <summary>
            Returns the metadata for the creation of the CALENDAR_WEEK_START column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetCalendarWeekEndColumnMetadata">
            <summary>
            Returns the metadata for the creation of the CALENDAR_WEEK_END column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetIsPublicHolidayColumnMetadata">
            <summary>
            Returns the metadata for the creation of the IS_PUBLIC_HOLIDAY column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetHolidayColumnMetadata">
            <summary>
            Returns the metadata for the creation of the HOLIDAY column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetIsSchoolVacationColumnMetadata">
            <summary>
            Returns the metadata for the creation of the IS_SCHOOL_VACATION column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetVacationColumnMetadata">
            <summary>
            Returns the metadata for the creation of the VACATION column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetIsDayOffColumnMetadata">
            <summary>
            Returns the metadata for the creation of the IS_DAY_OFF column.
            </summary>
            <returns>A CalendarColumnMetadata value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetDayNames(System.Globalization.DateTimeFormatInfo)">
            <summary>
            Gets an array of day names from the current user's default locale taking
            the option UseShortDayNames into account.
            </summary>
            <param name="di">A DateTimeFormatInfo reference.</param>
            <returns>A string array indexed by DayOfWeek.</returns>
            <exception cref="T:System.ArgumentNullException">If di is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.AdjustCharColumnLength(System.Int32)">
            <summary>
            Adjusts the length of an alphanumeric IDEA column to the valid range.
            </summary>
            <param name="proposedLength">An int containing the initial column length.
            If non-positive, the method returns 1.</param>
            <returns>An int in [1,  IdeaEquationBuilderHelper.MaxCharColumnLength].</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreator.GetSpecialDayNameColumnLength(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.ISpecialDayFilter)">
            <summary>
            Computes the length of an alphanumeric IDEA column that holds the names of
            the special days provided by a special day filter.
            </summary>
            <param name="filter">An ISpecialDayFilter whose SpecialDayNameMaxLength specifies
            the max day name length or null, if a filter is not available.</param>
            <returns>An int. One, if filter is null; otherwise a value in 
            [1, IdeaEquationBuilderHelper.MaxCharColumnLength] based on the filter's SpecialDayNameMaxLength.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult">
            <summary>
            Implements the ICalendarTableCreatorResult interface.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId,System.String})">
            <summary>
            Creates a new CalendarTableCreatorResult initialized
            with the specified table name and column name map.
            </summary>
            <param name="tableName">A string containing the name of the result table.</param>
            <param name="columnNames">A dictionary that maps column ids to column names.
            The method will store a reference to this object for its entire lifetime.
            </param>
            <returns>A TTaskDefaultComInterface reference to a new object.</returns>
            <exception cref="T:System.ArgumentNullException">If tableName or columnNames is null.</exception>
            <exception cref="T:System.ArgumentException">If tableName is empty.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult.Name">
            <summary>
            Gets the name of the calendar table.
            </summary>
            <returns>A string containing the name of the calendar table.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult.m_name">
            <summary>
            Holds the table name.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult.GetColumnName(Audicon.SmartAnalyzer.Common.Interfaces.MacroCommands.CalendarColumnId)">
            <summary>
            Gets the name of the calendar column with the specified id at the time the table was created.
            </summary>
            <param name="columnId"></param>
            <returns>The name of the column with the specified id, if the column was generated; otherwise, null.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.CalendarTableCreatorResult.m_columns">
            <summary>
            Holds a reference to the column map.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CaseAdmin.CaseAdministrator">
            <summary>
            Implements varios functionalities related to Smart Analyzer Case Administration (Audit Project Administration)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CaseAdmin.CaseAdministrator.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            ctor
            </summary>
            <param name="context">Execution context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CaseAdmin.CaseAdministrator.GetAuditFolderData(System.String,Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType)">
            <summary>
            Retrieves audit folder metadata
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="dataType">Type of data details to retrieve</param>
            <returns>Audit folder metadata</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CaseAdmin.CaseAdministrator.EnumerateAuditFolders(Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType)">
            <summary>
            Enumerates audit folders within current IDEA working folder. Result is the list of audit folder metadata objects
            </summary>
            <param name="dataType">Type of data details to retrieve</param>
            <returns>Audit folders as the list of audit folder metadata objects</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder">
            <summary>
            Implements a task that creates an IDEA column filter expression.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.#ctor">
            <summary>
            Initializes a new ColumnFilterBuilder in the default state.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.Database">
            <summary>
            Gets / sets the name of the IDEA database or a reference to an IDEA database object
            on which the filter expression operates.
            </summary>
            <remarks>This property is optional. It is only needed in case the normal filter 
            expression exceeds the maximum allowed length.
            <para>The default value is null.</para>
            <para>The database can either take the database file name with or without extension and path or
            a reference to an IDEA database object as returned by Client.OpenDatabase.</para></remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.m_databaseValue">
            <summary>
            Holds the value of the Database property that was set by the caller or null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.Equation">
            <summary>
            Gets a string containing the filter expression.
            </summary>
            <returns>A string containing the filter expression or null, if an expression was not generated. </returns>
            <remarks>Default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.TempColumnNames">
            <summary>
            Gets the array of temporary helper column names that were added to the source database in case the normal filter 
            expression exceeded the maximum allowed length.
            </summary>
            <returns>the array of temporary helper column names that were added to the source database in case the normal filter 
            expression exceeded the maximum allowed length.
            <para>An empty array is returned if the filter expression was not computed or if it did not exceed the maximum allowed 
            length.</para></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.ColumnName">
            <summary>
            Gets / sets the name of the column whose values will be filtered.
            </summary>
            <returns>A string.</returns>
            <remarks>Default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.Values">
            <summary>
            Gets / sets a reference to the object that supplies the list of column values 
            (usually a dialog's list element, e.g, a ContentOfFromToList or ContentOfSingleList or an object 
            that impl. IContentOfSingleListReader or IContentOfFromToListReader)
            for the equation.
            </summary>
            <returns>An object that contains the list of values or null, if no values where specified.</returns>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.m_values">
            <summary>
            Holds the value of the Values property that was set by the caller or null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.IgnoreCase">
            <summary>
            Gets / sets a Boolean that specifies whether the equation has to consider case sensitivity.
            </summary>
            <returns>True, if the comparisons inside the equation shall be case insensitive; otherwise, false.</returns>
            <remarks>The default value is False.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.GetMatchingRecords">
            <summary>
            Gets / sets a boolean that specifies whether the equation shall select all the records
            whose ColumnName value belongs to the given set of values or all the records that are
            not part of the given value set.
            </summary>
            <returns>True, if the equation shall select all records that belong to the specified value list; false,
            if the equation shall select all records that do not belong to the specified value list.</returns>
            <remarks>Default value: True</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.ReservedLength">
            <summary>
            Gets / sets a non-negative integer that represents the reserved equation length.
            </summary>
            <remarks>This property can be used to limit the maximum length of the equation to 
            the difference between IDEA's max. equation length and the specified amount.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.m_reservedLength">
            <summary>
            Holds the value of ReservedLength
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.PerformTask">
            <summary>
            Performs the task by building the equation or the requested file.
            </summary>
            <returns>An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0 in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.Clear">
            <summary>
            Resets the object to its default state.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.SetDefaultState">
            <summary>
            Sets the object in the default state.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.ResetOutputState">
            <summary>
            Resets the values of the output properties.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleEmptyValueList">
            <summary>
            Handles the case of an empty list of column values.
            </summary>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation does not exceed the max. allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation, if it exceeds the max. allowed length.</para>
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleDateList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfSingleListReader)">
            <summary>
            Handles the case of a list of date values.
            </summary>
            <param name="listReader">An IContentOfSingleListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Date.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            If the list is empty, the method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0 in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDate is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongDateList(System.Collections.Generic.List{System.DateTime},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumns(System.Collections.Generic.IList{System.DateTime},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleDateRangeList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfFromToListReader)">
            <summary>
            Handles the case of a list of date range values.
            </summary>
            <param name="listReader">An IContentOfFromToListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Date.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0 in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDate is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongDateRangeList(System.Collections.Generic.List{System.Tuple{System.DateTime,System.Nullable{System.DateTime}}},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumns(System.Collections.Generic.IList{System.Tuple{System.DateTime,System.DateTime}},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleNumericList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfSingleListReader)">
            <summary>
            Handles the case of a list of Decimal or Int64 values.
            </summary>
            <param name="listReader">An IContentOfSingleListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Decimal or Numeric.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDecimal and listReader.IsNumeric are false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongNumericList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.
            The method assumes that the values are properly formatted for an IDEA equation. The method is
            allowed to sort the collection.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumnsForNumericSingleValueList(System.Collections.Generic.List{System.String},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process. 
            The method assumes that the values are properly formatted for an IDEA equation. 
            The method is allowed to sort this list.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleNumericRangeList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfFromToListReader)">
            <summary>
            Handles the case of a list of Decimal or Int64 range values.
            </summary>
            <param name="listReader">An IContentOfFromToListReader reference to the list of range values.
            An exception is thrown if this reference is null or if its type is not Decimal or Numeric.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDecimal and listReader.IsNumeric are false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongNumericRangeList(System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.
            The method assumes that the values are properly formatted for an IDEA equation. The method is
            allowed to sort the collection.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumnsForNumericRangeList(System.Collections.Generic.List{System.Tuple{System.String,System.String}},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process. 
            The method assumes that the values are properly formatted for an IDEA equation. 
            The method is allowed to sort this list.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleTimeList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfSingleListReader)">
            <summary>
            Handles the case of a list of Time values.
            </summary>
            <param name="listReader">An IContentOfSingleListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Time.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsTime is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongTimeList(System.Collections.Generic.List{System.TimeSpan},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumn(System.String,Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a numeric virtual temp column with the specified equation and an unique random name.
            </summary>
            <param name="equation">A string containing the equation of the new column.</param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">>A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If equation, fieldManager or tempColumnNames is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the length of the equation exceeds IDEA's max. equation length.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumns(System.Collections.Generic.List{System.TimeSpan},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process. The method is allowed to sort this list.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumns(System.Collections.Generic.List{System.Tuple{System.TimeSpan,System.TimeSpan}},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="ranges">The list of values to process. The method is allowed to sort this list.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
            <remarks>The method assumes that the list does not contain trivial ranges.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.GetTempColumnsEquationLength(System.Collections.Generic.IList{System.String})">
            <summary>
            Computes the length of a boolean IDEA expression on a collection of temp. column names using
            the current GetMatchingRecords value.
            </summary>
            <param name="tempColumnNames">A list containing the column names.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If tempColumnNames is null.</exception>
            <exception cref="T:System.ArgumentException">If tempColumnNames is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.GetTempColumnNamesEquation(System.Collections.Generic.IList{System.String})">
            <summary>
            Computes a boolean IDEA expression on a collection of temp. column names using
            the current GetMatchingRecords value.
            </summary>
            <param name="tempColumnNames">A list containing the column names.</param>
            <returns>A string containing the IDEA equation.</returns>
            <remarks>If temp. column count is greater than one, the method surrounds the equation with parentheses.</remarks>
            <exception cref="T:System.ArgumentNullException">If tempColumnNames is null.</exception>
            <exception cref="T:System.ArgumentException">If tempColumnNames is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleTimeRangeList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfFromToListReader)">
            <summary>
            Handles the case of a list of Time range values.
            </summary>
            <param name="listReader">An IContentOfFromToListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Date.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDate is false.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.MaxEquationLength">
            <summary>
            Returns the max. allowed equation length.
            </summary>
            <returns>An Int32.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongTimeRangeList(System.Collections.Generic.List{System.Tuple{System.TimeSpan,System.Nullable{System.TimeSpan}}},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleStringRangeList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfFromToListReader)">
            <summary>
            Handles the case of a list of Time range values.
            </summary>
            <param name="listReader">An IContentOfFromToListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Date.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsDate is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongStringRangeList(System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.
            The method is allowed to sort the list.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumnsForStringRangeList(System.Collections.Generic.List{System.Tuple{System.String,System.String}},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process. 
            The method is allowed to sort this list.
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleStringList(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfSingleListReader)">
            <summary>
            Handles the case of a list of Time values.
            </summary>
            <param name="listReader">An IContentOfSingleListReader reference to the list of values.
            An exception is thrown if this reference is null or if its type is not Time.</param>
            <returns>
            An Int32 value. One of the following values will be returned:
            <para>1, if the length of the equation is less than the maximum allowed length. 
            The method sets Equation to the all-rows filter, if GetMatchingRecords is true, or to the no-row filter, if GetMatchingRecords is false.</para>
            <para>The length of the equation in case the equation exceeds the maximum allowed length and Database was not set or 
            an equivalent equation could not be generated.</para>
            <para>0, in case temporary helper columns were added to the database. 
            The names of the helper columns are available in the array TempColumnNames and the filter expression based on these columns in Equation.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If listReader is null.</exception>
            <exception cref="T:System.ArgumentException">If listReader.IsTime is false.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongSearchStringList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the seatch string values to be matched.
            The method is allowed to sort the list.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumnsForRegExprList(System.Collections.Generic.List{System.String},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of reg. expressions to process. 
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.HandleLongStringList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Called to handle an equation that exceeds the max. allowed length.
            </summary>
            <param name="values">A List containining the values to be matched.
            The method is allowed to sort the list.</param>
            <param name="currentEquation">A string containing the current equation.</param>
            <returns><para>0, if the method created temp. columns and a new equation that does not exceed the max. allowed length.</para>
            <para>1, if the current equation does not exceed the max. allowed length.</para>
            <para>The length of the current equation if the method could not generate an alternative equation using temp. columns.</para></returns>
            <remarks>The method sorts values as part of creating temp columns.
            <para>If the method succeeds, it updates the properties Equation and, in case temp. columns were created, TempColumnNames.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If values or currentEquation is null.</exception>
            <exception cref="T:System.ArgumentException">If currentEquation is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.AddTempColumnsForStringSingleValueList(System.Collections.Generic.List{System.String},Audicon.SmartAnalyzer.Common.MacroCommands.AuditTest.FieldManagement,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates temp columns with equations that do not exceed IDEA's max equation length.
            </summary>
            <param name="values">The list of values to process. 
            <para>If the list is empty, the method does nothing.</para></param>
            <param name="fieldManager">A FieldManagement object to which the method adds the computed columns.
            The method does not call PerformTask on fieldManager.</param>
            <param name="tempColumnNames">A string list to which the method adds the names of the temp. columns it created.</param>
            <exception cref="T:System.ArgumentNullException">If values, fieldManager or tempColumnNames is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.VerifyColumnName">
            <summary>
            Verifies that ColumnName is not null, empty or a string of white spaces.
            </summary>
            <returns>The trimmed value of ColumnName.</returns>
            <exception cref="T:System.InvalidOperationException">If ColumnName is null, empty or a string of white spaces.</exception>
            <remarks>The method does not check the existence of the column.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ColumnFilterBuilder.VerifyValuesReferenceNotNull">
            <summary>
            Verifies that Values is not null.
            </summary>
            <returns>The non-null Values reference.</returns>
            <exception cref="T:System.InvalidOperationException">If Values is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.CustomImport.ContentEquationBuilder">
            <summary>
            Equation builder
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CustomImport.ContentEquationBuilder.GetStandardTestFilter(System.Object[])">
            <summary>
            Creates and returns a instance of ExpressionSimple.
            </summary>
            <param name="operands">variable number of operands.</param>
            <returns>Standard test filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CustomImport.ContentEquationBuilder.GetTestFilter(System.String,System.Object[])">
            <summary>
            Creates and returns a instance of ExpressionSimple.
            </summary>
            <param name="property">Name of the test property to base the filter on.</param>
            <param name="operands">Variable number of operands.</param>
            <returns>Test filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CustomImport.ContentEquationBuilder.CreateExpression(System.Boolean,System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType,Audicon.SmartAnalyzer.Common.Types.EquationOperator,System.Object[])">
            <summary>
            Creates and returns a instance of ExpressionSimple.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="propertyName">name of the property</param>
            <param name="propertyType">property type</param>
            <param name="equationOperator">operator to be used in the equation</param>
            <param name="operands">variable number of operands (IsInList accepts more than 1)</param>
            <returns>ExpressionSimple</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.CustomImport.ContentEquationBuilder.CreateExpressionGroup(System.Boolean,Audicon.SmartAnalyzer.Common.Types.LogicalOP,System.Object[])">
            <summary>
            Creates and populates a group expression.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="groupOperator">logical operator to combine group elements</param>
            <returns>ExpressionGroup</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter">
            <summary>
            Represents a special day filter for anonymous special days (e.g., days off).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader)">
            <summary>
            Constructs a new AnonymousSpecialDayFilter from the specified list of date or date range values.
            </summary>
            <param name="values">An IContentOfListReader reference to a list of date or date range values.</param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values's element type is not Date.</exception>
            <exception cref="T:System.ArgumentException">If value is not an IContentOfSingleListReader or an IContentOfFromToListReader.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter.#ctor(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructs a new AnonymousSpecialDayFilter from the specified collection of dates.
            </summary>
            <param name="values">An IEnumerable&lt;DateTime&gt; reference.</param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter.SpecialDayNameMaxLength">
            <summary>
            Gets the max length of a special day name in the filter.
            </summary>
            <returns>Always zero.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter.IsSpecialDay(System.DateTime,System.String@)">
            <summary>
            Checks whether a date value is a special day.
            </summary>
            <param name="value">A DateTime value to be checked.</param>
            <param name="specialDayName">A reference to a string that the method will always set to null.</param>
            <returns>True, if value is a special day; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.AnonymousSpecialDayFilter.IsInRange(System.DateTime)">
            <summary>
            Checks whether a date value is contained in one of the current date ranges.
            </summary>
            <param name="value">A DateTime containing only the date part of the value to test.</param>
            <returns>True, if the value is contained in one of the current ranges; otherwise, false.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin">
            <summary>
            Implements administrating of runtime external filters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.GetPredefinedFilter(System.String,Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType)">
            <summary>
            Obtains predefined filter
            </summary>
            <param name="alias">Alias of standard workflow action hosting the predefined filter</param>
            <param name="stdActionType">Type of standard workflow action</param>
            <returns>Predefined filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.GetFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Object[])">
            <summary>
            Obtains runtime filter for default version
            </summary>
            <param name="filterAlias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="args">Additional parameters. When present, 1) filter version a string</param>
            <returns>Runtime filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.GetFilters(Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Obtains collection of runtime filters, including temporary ones
            </summary>
            <param name="saModuleType">Type of target SA module</param>
            <returns>Collection of runtime filters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.GetActiveFilter(Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            Obtains currently active filter
            </summary>
            <param name="saModuleType">Type of target SA module</param>
            <returns>Currently active filter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.CreateFilter(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.Object[])">
            <summary>
            Creates new runtime filter instance
            </summary>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Target SA module type</param>
            <param name="args">Additional parameters. When present, 1) bool temp flag; 2) filter version as string</param>
            <returns>New filter object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.SaveFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Saves runtime filter
            </summary>
            <param name="filter">Filter to save</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.PersistFilter(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            Converts temp filter into persistent one and saves it. For persistent filter, same as SaveFilter()
            </summary>
            <param name="filter">Filter to persist</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.SetActiveFilter(System.Object,System.Object[])">
            <summary>
            Sets active filter
            </summary>
            <param name="filterOrAlias">Filter to set as active. Can be either filter object (IPublicRuntimeFilter) or filter alias (string)</param>
            <param name="args">Additional parameters. When present, 1) SA module type (SaModuleType); 2) filter version as string.
            Additional parameters are valid only in conjunction with filter alias</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Filtering.ExternalFiltersAdmin.DeleteFilter(System.Object,System.Object[])">
            <summary>
            Sets active filter
            </summary>
            <param name="filterOrAlias">Filter to delete. Can be either filter object (IPublicRuntimeFilter) or filter alias (string)</param>
            <param name="args">Additional parameters. When present, 1) SA module type (SaModuleType); 2) filter version as string.
            Additional parameters are valid only in conjunction with filter alias</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystem">
            <summary>
            Class that search for files or folders using a pattern
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystem.GetFiles(System.String,System.String,System.Int32)">
            <summary>
            GetFiles searches for files using a normal pattern ( with wildcards * and ?)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystem.GetFilesByRegEx(System.String,System.String,System.Int32)">
            <summary>
            GetFilesByRegEx searches for files using a regular expression pattern 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystem.GetFolders(System.String,System.String,System.Int32)">
            <summary>
            GetFolders searches for folders using a normal pattern ( with wildcards * and ?)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItems">
            <summary>
            A collection container normally used from IDEA macro with "For Each" loop
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItems.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem})">
            <summary>
            
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItems.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem">
            <summary>
            Hold infos about a file/folder
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem.RelativePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem.Path">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.Types.FileSystemItem.Size">
            <summary>
            the Size will be used in IDEA macros, and the biggest integer type is long = Int32
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands">
            <summary>
            Basic functionality common to Tests and CIRs. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SAContext">
            <summary>
            Set the context for Simple Commands.
            </summary>
            <remarks>This will try to set the current working directory for Idea by opening the base table.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreateUniqueFileInProjectLibrary(COMMONIDEACONTROLSLib.LibraryLocation,System.String,System.String,Audicon.SmartAnalyzer.Common.Types.EncodingType)">
            <summary>
            Creates a file with unique name within IDEA project library folder
            </summary>
            <param name="libType">Library folder type</param>
            <param name="basePath">Base for unique file name</param>
            <param name="fileContent">Contents to initialite the new file with</param>
            <param name="encodingType">New file encoding</param>
            <returns>Full path of new file; on server it is UNC path</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.UniqueFileName(System.Object,System.Object[])">
            <summary>
            Create a unique name for a file, based on a specific type. If the test has primary input file which is located within a subfolder,
            the result is also within this subfolder
            </summary>
            <param name="baseName">Base name as string without extension and with/without relative path. </param>
            <param name="resultType">The type of file.</param>
            <returns>Full path for client, relative path for server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If result type is not valid.</exception>
            <exception cref="T:System.ArgumentException">If basetable is not in the corect format(string).</exception>
            <remarks>The count starts at 2.</remarks>
            <remarks>The path is relative to IDEA's working directory.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.UniqueFileFlatName(System.Object,System.Object[])">
            <summary>
            Create a unique name for a file, based on a specific type. The primary input file's folder is not taken ino account
            </summary>
            <param name="baseName">Base name as string without extension and with/without relative path. </param>
            <param name="resultType">The type of file.</param>
            <returns>Full path for client, relative path for server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If result type is not valid.</exception>
            <exception cref="T:System.ArgumentException">If basetable is not in the corect format(string).</exception>
            <remarks>The count starts at 2.</remarks>
            <remarks>The path is relative to IDEA's working directory.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.UniqueFileInFolderName(System.String,System.String,System.Object[])">
            <summary>
            Create a unique name for a file in multiple folders, based on a specific type
            </summary>
            <param name="baseName">Base name as string without extension and with/without relative path</param>
            <param name="subFolder">Additional folder to check uniqueness for</param>
            <param name="resultType">The type of file.</param>
            <returns>The name of the file, withouf folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CheckAccessRights(System.String)">
            <summary>
            Checks the access rights of a specific directory.
            </summary>
            <param name="path">Path on which the check will be performed.</param>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
            <exception cref="T:System.IO.IOException">If rights are missing to handle that specific directory.</exception>
            <remarks>If full rights are available no error is trown.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreateResultObject(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates an result to be added to the results collection
            </summary>
            <param name="tableName">Name of Idea table without extension or path information.</param>
            <param name="isVisible">Value indicating whether the result is visible in the GUI. </param>
            <param name="reportSequence">Number that indicates the report sequence.</param>
            <param name="resultType">Value that specifies the type of the result.</param>
            <returns>A populated test result file to be added to the result collection.</returns>
            <exception cref="T:System.InvalidOperationException">If context object is not set</exception>
            <exception cref="T:System.ArgumentException">If tableName is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If tableName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.AddGraphicalResult(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,System.Int32)">
            <summary>
            Creates a graphical result descriptor associated with given result file. The object will be null in case the parent result is located on server.
            </summary>
            <param name="resultFile">Result file.</param>
            <param name="chartType">Type of the chart. </param>
            <returns>A graphical result descriptor object.</returns>
            <exception cref="T:System.InvalidOperationException">If context object is not set</exception>
            <exception cref="T:System.ArgumentNullException">If tableName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FileExists(System.String,System.String)">
            <summary>
            Checks existance of IDEA table
            </summary>
            <param name="fileName">name ot the table</param>
            <param name="subFolder">table's subfolder</param>
            <returns>true if file exists</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FileExistsAt(System.String,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Checks existance of IDEA table at specified location
            </summary>
            <param name="fileName">name ot the table</param>
            <param name="subFolder">table's subfolder</param>
            <param name="location">Location of a table</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FileIsValid(System.String)">
            <summary>
            Test if a file is valid(exists and has records).
            </summary>
            <param name="tableName">Name of Idea table without extension or path information.</param>
            <returns>true if table is valid</returns>
            <exception cref="T:System.InvalidOperationException">If context object is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FileIsValidAt(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Test if a file is valid at specified location (exists and has records)
            </summary>
            <param name="tableName">Name of Idea table without extension or path information</param>
            <param name="location">Location of a table</param>
            <returns>true if table is valid</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetRidOf(System.String)">
            <summary>
            Delete a file. If file doesn't exist, nothing happens
            </summary>
            <param name="filePath">Path to the file to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">If path is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteDatabase(System.String)">
            <summary>
            Deletes an IMD file. For local files, depending on IDEA configuration the method deletes the file permanently or moves it to Recycle Bin
            </summary>
            <param name="filePath">Path of the IMD file to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">If path is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.Scramble(System.String)">
            <summary>
            Scrambles a text.
            </summary>
            <param name="message">String to be scrambled.</param>
            <returns>A scrambled text.</returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
            <exception cref="T:System.ArgumentException">If message is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreateHashtable(System.Boolean)">
            <summary>
            Creates a new hashtable object having case sensitive or insensitive keys according to the input parameter (default case insensitive).
            </summary>
            <param name="caseSensitive">Type of equality comparer for keys.</param>
            <returns>New hastable object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetFieldsCount(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Returns the number of DB's fileds
            </summary>
            <param name="database">DB</param>
            <returns>number of fields</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.AddField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Int32,System.Object[])">
            <summary>
            Adds a field to an Idea database.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="name">Name of the new field</param>
            <param name="fieldType">The type of field that will be created.</param>
            <param name="optionalArguments">Optional parameters in the following order:Length(int, 8); Decimals(int,0);Equation(string,"");Description(string,"").</param>
            <exception cref="T:System.ArgumentNullException">If database or name, is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If resultType is not in range.</exception>
            <exception cref="T:System.ArgumentException">If optianal argument are in a wrong format/order.</exception>
            <exception cref="T:System.ArgumentException">If optianal name is null or empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ChangeFieldType(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Changes a field type froman Idea database.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="name">Name of the new field for which the type will be changed.</param>
            <param name="description">Description of the new field for which the type will be changed.</param>
            <param name="newfieldType">New field type.</param>
            <param name="equation">Equation of the new field.</param>
            <param name="length">Length of the new field.</param>
            <param name="decimals">Decimals number of the new field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RenameField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Object[])">
            <summary>
            Rename an Idea Field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="oldFieldName">Name of the field that neads to be renamed.</param>
            <param name="newFieldName">Name of the new field.</param>
            <param name="optionalArguments">Only one optional argument: Description</param>
            <exception cref="T:System.ArgumentNullException">If database, oldFieldName or newFieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If oldFieldName, newFieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RenField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Object[])">
            <summary>
            Rename an Idea Field and return new name of renamed field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="oldFieldName">Name of the field that neads to be renamed.</param>
            <param name="newFieldName">Name of the new field.</param>
            <param name="optionalArguments">Only one optional argument: Description</param>
            <returns>Actual new name of renamed field</returns>
            <exception cref="T:System.ArgumentNullException">If database, oldFieldName or newFieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If oldFieldName, newFieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RenameFieldAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32,System.String,System.Object[])">
            <summary>
            Rename an Idea Field at a specific position.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="position">Position of the field that neads to be renamed.</param>
            <param name="newFieldName">Name of the new field.</param>
            <param name="optionalArguments">Only one optional argument: Description</param>
            <exception cref="T:System.ArgumentNullException">If database or newFieldName, is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position smaller than 0.</exception>
            <exception cref="T:System.ArgumentException">If newFieldName is  empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RenFieldAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32,System.String,System.Object[])">
            <summary>
            Rename an Idea Field at a specific position and return new name of renamed field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="position">Position of the field that neads to be renamed.</param>
            <param name="newFieldName">Name of the new field.</param>
            <param name="optionalArguments">Only one optional argument: Description</param>
            <returns>Actual new name of renamed field</returns>
            <exception cref="T:System.ArgumentNullException">If database or newFieldName, is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position smaller than 0.</exception>
            <exception cref="T:System.ArgumentException">If newFieldName is  empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Delete an Idea field by name.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field that neads to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFieldAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32)">
            <summary>
            Delete an Idea field by position.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="position">Position of the field that neads to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If position smaller than 0.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RemoveActionField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Removes the action field for an Idea column.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field for which the action field will be removed.</param>
            <remarks>In case of an error or the field is not detected, no error will be thrown</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RemoveActionFieldAt(COMMONIDEACONTROLSLib.IIdeaDatabase,System.Int32)">
            <summary>
            Removes the action field for an Idea column at a given position.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="position">Position of the field for which the action field will be removed.</param>
            <remarks>In case of an error or the field is not detected, no error will be thrown</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreateActionField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.String,System.Object[])">
            <summary>
            Adds an action field for an Idea field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field for which the action field will be created.</param>
            <param name="lookupTable">Name of the look up table for the action field.</param>
            <param name="lookupField">Name of the field used for the lookup.</param>
            <param name="additionalFields">Name of additional field used for the lookup.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FieldExists(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Search for a field inside an Idea database.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>True if field is found.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FieldType(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Return the type of a field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>An int representing the idea field type. (-1) If field does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">If database or FieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IsNumericField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Test if a field is numeric.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>True if field is numeric.</returns>
            <exception cref="T:System.ArgumentNullException">If database or FieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IsCharacterField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Test if a field is character.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>True if field is character.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is  empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IsDateField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Test if a field is date.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>True if field is date.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName, isnull.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IsTimeField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Test if a field is time.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>True if field is time.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldname, is null.</exception>
            <exception cref="T:System.ArgumentException">If fieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FieldHasActionField(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Test if a field has action field
            </summary>
            <param name="database">Database to check for</param>
            <param name="fieldName">field name</param>
            <returns>true if action field is present; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.TagExists(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Search for a tag inside an Idea database.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="tagName">Name of the tag to search for.</param>
            <returns>true if tag is found</returns>
            <exception cref="T:System.ArgumentNullException">If database or tagName, is null.</exception>
            <exception cref="T:System.ArgumentException">If tagName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.UpdateServerIMDFile(System.String)">
            <summary>
            Updates IMD file entity with server database information
            </summary>
            <param name="imdFileName">Server IMD file name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ShowIdeaMainWindow(System.Boolean,System.Object[])">
            <summary>
            Shows/hides the main window of IDEA
            </summary>
            <param name="show">Show/hide value</param>
            <param name="args">Specifies how to act in automation scenario. Empty: always; first arg is true: only in automation; first arg is false: not in automation</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetFileName(System.String)">
            <summary>
            Get filename and extension from a given path.
            </summary>
            <param name="path">Path including filename and extension.</param>
            <returns>Filename and extension.</returns>
            <exception cref="T:System.ArgumentException">If path is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If path is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetDirName(System.String)">
            <summary>
            Get directory name from a given path.
            </summary>
            <param name="path">Path including filename and extension.</param>
            <returns>Directory name.</returns>
            <exception cref="T:System.ArgumentException">If path is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If path is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetFullFileName(System.String)">
            <summary>
            Get full path of an Idea file.
            </summary>
            <param name="fileName">Name of Idea table with/without extension or path information.</param>
            <returns>Full path for an Idea file if it can be retrieved else string.empty .</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetUncFileName(System.String)">
            <summary>
            Get full UNC path of an Idea file.
            </summary>
            <param name="fileName">Name of Idea table with/without extension or path information.</param>
            <returns>Full UNC path for an Idea file if it can be retrieved else string.empty .</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.MinMaxValue(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String)">
            <summary>
            Calculate the Min and Max value of a field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="fieldName">Name of the field to search for.</param>
            <returns>an object containing min and max values depending on fieldname type.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetFilePathRelativeToProject(System.String,System.Boolean)">
            <summary>
            Gets the relative path of a project based on the full path of the file.
            </summary>
            <param name="fullPath">Full path of the file.</param>
            <param name="isLocal">True if file is local, else false.</param>
            <returns>The relative path of the file.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetLibraryFullPath(COMMONIDEACONTROLSLib.LibraryLocation,System.Object[])">
            <summary>
            Returns the physical path of IDEA project library folder of the specified type
            </summary>
            <param name="libraryGroup">Library folder type</param>
            <param name="args">Optional parameters. Should be specified like this:
            a. args[0]: library location (enum Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation)
            b. args[1]: isGlobalLibrary (Boolean). If TRUE, global library folder path is returned.
            </param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetKnownLocationPath(Audicon.SmartAnalyzer.Common.Types.KnownLocation)">
            <summary>
            Returns full path of well-know location 
            </summary>
            <param name="type">Well-known location type</param>
            <returns>Path of well-know location</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.LocalFileExists(System.String)">
            <summary>
            Chwck if local file with specified path exists
            </summary>
            <param name="filePath">File path</param>
            <returns>True if specified file exists; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.Replace(System.String,System.String,System.String)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            </summary>
            <param name="source">The source string.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <returns>Returns source string in which oldValue is replaced with newValue </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ReplaceByListSep(System.String,System.Object[])">
            <summary>
            Replace given string with system's list separator.
            </summary>
            <param name="source">The source string.</param>
            <param name="listSeparator">The string to be replaced.</param>
            <returns>Returns source string in which listsep is replaced with systems list separator.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FormatString(System.String,System.Object[])">
            <summary>
            Replaces values in a given string.
            </summary>
            <param name="inputString">The string in which the replace will occur.</param>
            <param name="values">The values that will be replaced.</param>
            <returns>A string in which {0}, {1} ... wil be replaced with the values given</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FormatStringInvariant(System.String,System.Object[])">
            <summary>
            Replaces values in a given string according to invaria nt culture.
            </summary>
            <param name="inputString">The string in which the replace will occur.</param>
            <param name="values">The values that will be replaced.</param>
            <returns>A string in which {0}, {1} ... wil be replaced with the values given</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.Split(System.String,System.String)">
            <summary>
            Split a given string.
            </summary>
            <param name="inputString">The string in which will be split.</param>
            <param name="delimiter">The values that will be replaced.</param>
            <returns>A string array</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.Str2Dbl(System.String)">
            <summary>
            Str2Dbl converts a string to double. 
            </summary>
            <param name="inputString">The string to be converted. Note: it should contain only the decimal 
            separator, no thousand separator is allowed.</param>
            <returns>A double value</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.Dbl2IdeaStr(System.Double,System.Int16)">
            <summary>
            Dbl2IdeaStr converts a double to a string. 
            </summary>
            <param name="inputValue">The double value to be converted.</param>
            <param name="deciamls">Number of decimals to consider</param>
            <returns>A string value</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.HtmlEncode(System.String)">
            <summary>
            HtmlEncode encodes a string to a html string. 
            </summary>
            <param name="inputString">The string to be encoded.</param>
            <returns>A string value</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.StringList2Array(System.String,System.String,System.String)">
            <summary>
            StringList2Array transforms a string into an array of array of strings, 
            using rows and columns delimiters.
            The delimiters are optional, they have a default value and 
            also can be set using the parameters.
            </summary>
            <param name="inputString">The string to parsed</param>
            <param name="columnDelimiter">Column delimiter</param>
            <param name="rowDelimiter">Row delimiter</param>
            <returns>An array of array of strings</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ColognePhonetics(System.String)">
            <summary>
            Implements the Cologne Phonetics algorithm according to https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik.
            </summary>
            <param name="value">A string containing the value to convert or null.</param>
            <returns>A string containing the result of the conversion or null if value is null.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DatabaseExtension">
            <summary>
            Get the extension of Idea tables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DecimalSymbol">
            <summary>
            Get the decimal separator of the system.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ListSeparator">
            <summary>
            Get the list separator of the system.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GroupingSymbol">
            <summary>
            Get the thousand separator of the system.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ShortDateFormat">
            <summary>
            Get the short date format of the system.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ShortTimeFormat">
            <summary>
            Get the short time format of the system.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DateMask">
            <summary>
            Get the default Idea date mask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.YearSymbol">
            <summary>
            Get the default Idea year symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.MonthSymbol">
            <summary>
            Get the default Idea month symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DaySymbol">
            <summary>
            Get the default Idea day symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.HourSymbol">
            <summary>
            Get the default Idea hour symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.MinuteSymbol">
            <summary>
            Get the default Idea minute symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SecondSymbol">
            <summary>
            Get the default Idea second symbol.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.UniqueString">
            <summary>
            Gets new Guid as string
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SmartAnalyzerVersion">
            <summary>
            Returns SA version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IDEAVersion">
            <summary>
            Returns IDEA version
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.TryCompareVersions(System.String,System.String,System.Int32@)">
            <summary>
            Compares 2 strings that represent versions
            </summary>
            <param name="version1">First version</param>
            <param name="version2">Second version</param>
            <param name="result">Result of comparison if the 2 string could be converted to versions. 
            Possible values are -1 (if first version is lower than the second), 0 (if the versions are equal) and 1 (if first version is greater than the second)</param>
            <returns>True if the 2 string are not null and could be converted to a version, false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.InvokePerformTask(System.Object)">
            <summary>
            Invokes PerformTask on a TableManagement object using a workaround
            for issue 37906 if the TableManagement object is in mixed mode and
            the regular way otherwise.
            </summary>
            <param name="tableManagement">The TableManagement object whose PerformTask method
            will be invoked.</param>
            <exception cref="T:System.ArgumentNullException">If tableManagement is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.InvokePerformTaskFromWithinScript(System.Object)">
            <summary>
            Invokes PerformTask on the specified IDEA object from within an IDEA script.
            </summary>
            <param name="target">The object whose PerformTask method will be invoked.</param>
            <exception cref="T:System.ArgumentNullException">If target is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.RenameField2(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.String,System.Object[])">
            <summary>
            Rename an Idea Field.
            </summary>
            <param name="database">Object containing the opened database.</param>
            <param name="oldFieldName">Name of the field that neads to be renamed.</param>
            <param name="newFieldName">Name of the new field.</param>
            <param name="optionalArguments">Only one optional argument: Description</param>
            <exception cref="T:System.ArgumentNullException">If database, oldFieldName or newFieldName, is null.</exception>
            <exception cref="T:System.ArgumentException">If oldFieldName, newFieldName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ReplaceByDecimalSep(System.String,System.Object[])">
            <summary>
            Replace given string with system's decimal separator.
            </summary>
            <param name="source">The source string.</param>
            <param name="decimalSeparator">The string to be replaced.</param>
            <returns>Returns source string in which listsep is replaced with systems decimal separator.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ReplaceStringByString(System.String,System.String,System.String)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            </summary>
            <param name="source">The source string.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <returns>Returns source string in which oldValue is replaced with newValue </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.BaseUniqueFileName(System.String,System.Boolean)">
            <summary>
            The method tries to relate the base name for unique file name to the subfolder of primary input file
            </summary>
            <param name="baseName"></param>
            <param name="ignorePrimaryFile">if false, the subfolder of the test's primary input file is taken into account: if true, primary file is ignored</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.PublishSharedResult(Audicon.SmartAnalyzer.Common.Types.SharedActionType,System.Object)">
            <summary> 
            Command used to publish shared results
            </summary>
            <param name="actionType"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DefaultEntityLocation">
            <summary>
            Returns the default location of entities like imds and folders
            based on the information in the current execution context.
            If no execution context was set, the
            property returns ExecutionLocation.Client.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.IsClientDefaultEntityLocation">
            <summary>
            Gets a boolean that specifies whether the default location
            of entities like imds and folders is ExecutionLocation.Client.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFileParameter(System.String,System.String,System.Object)">
            <summary>
            Set file's global parameter
            </summary>
            <param name="fileName">File's name</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFolderParameter(System.String,System.String,System.Object)">
            <summary>
            Set folder's global parameter
            </summary>
            <param name="folderName">Folder's name</param>
            <param name="key">Parameter's key</param>
            <param name="value">Parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFileParameter(System.String,System.String)">
            <summary>
            Deletes global parameter for the file
            </summary>
            <param name="name">File's name</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFolderParameter(System.String,System.String)">
            <summary>
            Deletes global parameter for the folder
            </summary>
            <param name="name">Folder's name</param>
            <param name="key">Parameter's key</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFileParameters(System.String)">
            <summary>
            Deletes all global parameter for the file
            </summary>
            <param name="name">File's name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFolderParameters(System.String)">
            <summary>
            Deletes all global parameters for the folder
            </summary>
            <param name="name">Folder's name</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.PeriodParameterName">
            <summary>
            Gets the name of the period global parameter.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreatePeriod(System.DateTime,System.DateTime)">
            <summary>
            Creates a new ITestPeriods object with the specified start and end dates.
            </summary>
            <param name="from">The start date of the period.</param>
            <param name="to">The end date of the period.</param>
            <returns>An ITestPeriods object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFilePeriod(System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets a file's period global parameter.
            </summary>
            <param name="fileName">The name of the file. If null or empty,
            the method targets the PrimaryInputFile.</param>
            <param name="from">The start date of the period.</param>
            <param name="to">The end date of the period.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFilePeriod2(System.String,Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods)">
            <summary>
            Sets a file's period global parameter.
            </summary>
            <param name="fileName">The name of the file. If null or empty,
            the method targets the PrimaryInputFile.</param>
            <param name="value">An ITestPeriods object that specifies the
            start and end dates.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFilePeriod(System.String)">
            <summary>
            Deletes a file's period global parameter.
            </summary>
            <param name="fileName">The name of the file. If null or empty,
            the method targets the PrimaryInputFile.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFolderPeriod(System.String,System.DateTime,System.DateTime)">
            <summary>
            Sets a folder's period global parameter.
            </summary>
            <param name="folderName">The name of the folder.
            Null is equivalent to string.Empty.</param>
            <param name="from">The start date of the period.</param>
            <param name="to">The end date of the period.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.SetFolderPeriod2(System.String,Audicon.SmartAnalyzer.Common.Interfaces.Periods.ITestPeriods)">
            <summary>
            Sets a file's period global parameter.
            </summary>
            <param name="folderName">The name of the folder.
            Null is equivalent to string.Empty.</param>
            <param name="value">An ITestPeriods object that specifies the
            start and end dates.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DeleteFolderPeriod(System.String)">
            <summary>
            Deletes a folder's period global parameter.
            </summary>
            <param name="folderName">The name of the folder.
            Null is equivalent to string.Empty.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetAuditFolders(Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType)">
            <summary>
            Enumerates audit folders within current IDEA working folder. Result is the list of audit folder metadata objects
            </summary>
            <param name="dataType">Type of data details to retrieve</param>
            <returns>Audit folders as the list of audit folder metadata objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetTableCount(System.String)">
            <summary>
            Returns tables records count
            </summary>
            <param name="tableName">Table name</param>
            <returns>Record count</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.TestIdeaClientAdapter(System.String,System.String)">
            <summary>
            Command used to publish shared results
            </summary>
            <param name="table">test table's name</param>
            <param name="table2">test table's #2 name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.CreateActionFieldForScript(System.Object,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Creates the action field  for executing an IDEA Script.
            </summary>
            <param name="database">The IDEA database.
            This parameter can be of type COMMONIDEACONTROLSLib.IIdeaDatabase (an IDEA database Object),
            or of type string (in case you want to pass idea database file path, can be fullpath or relative to project,
            in this case is used Client.OpenDatabase(database))
            </param>
            <param name="fieldName">Name of the field.</param>
            <param name="scriptPath">The script path. In case if macro is located on server a UNC path as to be provided.
            For local you can provide full path or relative to project</param>
            <param name="paramType1">The parameter type1.</param>
            <param name="param1">The param1.</param>
            <param name="paramType2">The parameter type2.</param>
            <param name="param2">The param2.</param>
            <param name="paramType3">The parameter type3.</param>
            <param name="param3">The param3.</param>
            <param name="paramType4">The parameter type4.</param>
            <param name="param4">The param4.</param>
            <exception cref="T:System.ArgumentNullException">database</exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks>
            Possible values for paramType are:
            0 - in case want to obtain RecordNumber for the action field executed by the user, in this case param has to be empty or null
            1 - in case want to pass to macro a UserDefinedText, in this case param has to be a user defined text
            2 - in case to pass to macro the value of a field, in this case param has to be the name of field for which want to have the value in macro
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.DateAdd(System.String,System.Int32,System.DateTime)">
            <summary>
            Adds a number of intervals of a given size to a date/time value.
            </summary>
            <param name="interval">A string that specifies the interval to add. 
            <para>The list of valid values:
            <list type="table">
            <item>
            <term>yyyy</term>
            <description>Year</description>
            </item>
            <item>
            <term>q</term>
            <description>Quarter</description>
            </item>
            <item>
            <term>m</term>
            <description>Month</description>
            </item>
            <item>
            <term>y</term>
            <description>Day of year - same as d</description>
            </item>
            <item>
            <term>d</term>
            <description>Day</description>
            </item>
            <item>
            <term>w</term>
            <description>Weekday - same as d</description>
            </item>
            <item>
            <term>ww</term>
            <description>Week</description>
            </item>
            <item>
            <term>h</term>
            <description>Hour</description>
            </item>
            <item>
            <term>n</term>
            <description>Minute</description>
            </item>
            <item>
            <term>s</term>
            <description>Second</description>
            </item>
            </list>
            </para>
            </param>
            <param name="number">An Int32 that specifies the number of intervals to add. 
            It can be positive or negative.</param>
            <param name="date">A DateTime value to which the method adds the interval.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentNullException">If interval is null.</exception>
            <exception cref="T:System.ArgumentException">If interval is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the calculated date is before 
            00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.</exception>
            <remarks>
            See also: https://msdn.microsoft.com/en-us/library/aa227550(v=vs.60).aspx
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxValue(System.Object,System.String)">
            <summary>
            Delivers the maximum value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            Alternatively the current database object (IIdeaDatabase or IComDatabase) can be provided.</param>
            <param name="fieldName">Name of the field from where to extract the max value from.
            An exception is thrown if the field does not exist or it is not of type numeric, date or time.</param>
            <returns>Maximum value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is not a string or an IIdeaDatabase.</exception>
            <exception cref="T:System.ArgumentException">If database is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If database is a string and the file does not exist.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinValue(System.Object,System.String)">
            <summary>
            Delivers the minimum value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            Alternatively the current database object (IIdeaDatabase or IComDatabase) can be provided.</param>
            <param name="fieldName">Name of the field from where to extract the max value from.
            An exception is thrown if the field does not exist or it is not of type numeric, date or time.</param>
            <returns>Minimum value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is not a string or an IIdeaDatabase.</exception>
            <exception cref="T:System.ArgumentException">If database is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If database is a string and the file does not exist.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(System.Object,System.String,System.Int32)">
            <summary>
            Computes the maximum of a field's max length and a specified min length value.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            Alternatively the current database object (IIdeaDatabase or IComDatabase) can be provided.
            <para>For time or numeric fields of non-fixed length, the method
            uses field statistics; therefore, the field statistics of the specified field must either be
            already computed or the database reference must allow their computation.</para></param>
            <param name="fieldName">A string containing the name of the field whose max length is requested.</param>
            <param name="minLength">An Int32 that specifies the min value of the result.</param>
            <returns>An Int32 value that is the maximum of minLength and the specified field's max length.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <remarks>The max length of a field is computed as follows:
            <para>
            If the database is empty or if all values of the field are in error, the max length of the field is zero.
            </para>
            <para>
            If the field is alphanumeric, the max length is the length of the longest value with trailing spaces removed.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(System.String,System.String,System.Int32)">
            <summary>
            Computes the maximum of a field's max length and a specified min length value.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            <para>For time or numeric fields of non-fixed length, the method
            uses field statistics; therefore, the field statistics of the specified field must either be
            already computed or the database reference must allow their computation.</para></param>
            <param name="fieldName">A string containing the name of the field whose max length is requested.</param>
            <param name="minLength">An Int32 that specifies the min value of the result.</param>
            <returns>An Int32 value that is the maximum of minLength and the specified field's max length.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <remarks>The max length of a field is computed as follows:
            <para>
            If the database is empty or if all values of the field are in error, the max length of the field is zero.
            </para>
            <para>
            If the field is alphanumeric, the max length is the length of the longest value with trailing spaces removed.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.Int32)">
            <summary>
            Computes the maximum of a field's max length and a specified min length value.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            <para>For time or numeric fields of non-fixed length, the method
            uses field statistics; therefore, the field statistics of the specified field must either be
            already computed or the database reference must allow their computation.</para></param>
            <param name="databaseLocation">An ExecutionLocation value that specifies whether the
            database is located on the client or on the server.</param>
            <param name="fieldName">A string containing the name of the field whose max length is requested.</param>
            <param name="minLength">An optional Int32 that specifies the min value of the result.
            Default value: 0.</param>
            <returns>An Int32 value that is the maximum of minLength and the specified field's max length.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is empty.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <remarks>The max length of a field is computed as follows:
            <para>
            If the database is empty or if all values of the field are in error, the max length of the field is zero.
            </para>
            <para>
            If the field is alphanumeric, the max length is the length of the longest value with trailing spaces removed.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Int32)">
            <summary>
            Computes the maximum of a field's max length and a specified min length value.
            </summary>
            <param name="database">An IIdeaDatabase reference to the database that contains
            the field whose max length is requested. <para>For time or numeric fields of non-fixed length, the method
            uses field statistics; therefore, the field statistics of the specified field must either be
            already computed or the database reference must allow their computation.</para></param>
            <param name="fieldName">A string containing the name of the field whose max length is requested.</param>
            <param name="minLength">An optional Int32 that specifies the min value of the result.
            Default value: 0.</param>
            <returns>An Int32 value that is the maximum of minLength and the specified field's max length.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <remarks>The max length of a field is computed as follows:
            <para>
            If the database is empty or if all values of the field are in error, the max length of the field is zero.
            </para>
            <para>
            If the field is alphanumeric, the max length is the length of the longest value with trailing spaces removed.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(COMDBLib.IComDatabase,System.String,System.Int32)">
            <summary>
            Computes the maximum of a field's max length and a specified min length value.
            </summary>
            <param name="database">A COMDBLib.IComDatabase reference to the database that contains
            the field whose max length is requested. <para>For time or numeric fields of non-fixed length, the method
            uses field statistics; therefore, the field statistics of the specified field must either be
            already computed or the database reference must allow their computation.</para></param>
            <param name="fieldName">A string containing the name of the field whose max length is requested.</param>
            <param name="minLength">An optional Int32 that specifies the min value of the result.
            Default value: 0.</param>
            <returns>An Int32 value that is the maximum of minLength and the specified field's max length.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <remarks>The max length of the field is computed as follows:
            <para>
            If the database is empty or if all values of the field are in error, the max length of the field is zero.
            </para>
            <para>
            If the field is alphanumeric, the max length is the length of the longest value with trailing spaces removed.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetLengthOfLongestTextFieldValue(COMDBLib.IComDatabase,System.Int32,System.Int32)">
            <summary>
            Computes the length of the longest value of a text field.
            </summary>
            <param name="database">A COMDBLib.IComDatabase reference to the database that contains
            the field whose max length is requested.</param>
            <param name="fieldIndex">An Int32 that specifies the one-based index of the field 
            whose max length is requested.</param>
            <param name="maxFieldLength">An Int32 that specifies the declared length of the field
            at the specified index.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <remarks>The method uses a RecordSet object to enumerate the database rows.
            <para>To be compatible with IDEA's @len function, the method ignores leading and trailing spaces.</para></remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.EnumerateDatabaseColumnValues(COMDBLib.IComDatabase,System.Int32)">
            <summary>
            Enumerates the values of a database column.
            </summary>
            <param name="database">An IComDatabase reference.</param>
            <param name="columnIndex">An int containing the column index.</param>
            <returns>An enumerator of the specified column's values.</returns>
            <exception cref="T:System.ArgumentNullException">If database is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ThrowIfCancellationRequested">
            <summary>
            Throws a System.OperationCanceledException if cancellation has been requested for the task running
            in the current context.
            </summary>
            <exception cref="T:System.OperationCanceledException">If cancellation has been requested for the task
            running in current context.</exception>
            <remarks>If the current context was not set, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(System.Object,System.String,System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">Database name including path if needed. The file extension is not necessary.
            Alternatively the current database object (IIdeaDatabase or IComDatabase) can be provided.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or it is not of type numeric, date or time.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is not a string or an IIdeaDatabase.</exception>
            <exception cref="T:System.ArgumentException">If database is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If database is a string and the file does not exist.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(System.String,System.String,System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">An IIdeaDatabase reference.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or if it is not of type numeric, date or time.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If database is a string and the file does not exist.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">An IIdeaDatabase reference.</param>
            <param name="databaseLocation">An ExecutionLocation value that specifies whether the
            database is located on the client or on the server.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or if it is not of type numeric, date or time.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.ArgumentException">If database is an empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If database is a string and the file does not exist.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(COMMONIDEACONTROLSLib.IIdeaDatabase,System.String,System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">An IIdeaDatabase reference.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or if it is not of type numeric, date or time.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.NotSupportedException">If type type of the field is not supported.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(COMDBLib.IComDatabase,System.String,System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">A COMDBLib.IComDatabase reference.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or if it is not of type numeric, date or time.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database or fieldName is null.</exception>
            <exception cref="T:System.NotSupportedException">If the field is of a not supported type.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(COMDBLib.IComDatabase,System.String,System.Func{COMDBLib.IField,System.Boolean},System.Boolean)">
            <summary>
            Delivers the min/max value of a numeric, date, or time field.
            If the function is used for a text, boolean, or multistate field an exception will be thrown.
            </summary>
            <param name="database">A COMDBLib.IComDatabase reference.</param>
            <param name="fieldName">Name of the field from where to extract the min/max value from.
            An exception is thrown if the field does not exist or if it is not of type numeric, date or time.</param>
            <param name="fieldSupportsMinMax">A function that takes an IField reference and returns true if the field
            supports min/max.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>Min/max value of the given numeric, date, or time field.</returns>
            <exception cref="T:System.ArgumentNullException">If database, fieldName or fieldSupportsMinMax is null.</exception>
            <exception cref="T:System.NotSupportedException">If the field is of a not supported type.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.ObjectNotFoundException">If the specified field was not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMinOrMaxValue(COMDBLib.IFieldStats,COMDBLib.IField,System.Boolean)">
            <summary>
            Returns the min / max value of the specified field from a field stats provider.
            </summary>
            <param name="valueProvider">A COMDBLib.IFieldStats reference to an object
            that contains statistical data for the specified field.
            The method assumes that the statistical data was already computed.</param>
            <param name="field">A COMDBLib.IField reference to an object that
            contains metadata for the field.</param>
            <param name="getMin">A Boolean that specifies whether the method returns the min or max value.
            If true, the method returns the min value; otherwise, the max value.
            Default value: false</param>
            <returns>An object. The method returns a 'zero' value if all the values of the fields
            are in error. For a date field, the method returns null if its min/max value is the null IDEA date. 
            For a time field the method returns a double containing the time in seconds.</returns>
            <exception cref="T:System.ArgumentNullException">If valueProvider or field is null.</exception>
            <exception cref="T:System.NotSupportedException">If the field's type is not in {Numeric, Time, Date}.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.GetMaxLength(COMDBLib.IFieldStats,COMDBLib.IField)">
            <summary>
            Calculates the max length of the specified field using a field stats provider.
            </summary>
            <param name="valueProvider">A COMDBLib.IFieldStats reference to an object
            that contains statistical data for the specified field.
            The method assumes that the statistical data was already computed.</param>
            <param name="field">A COMDBLib.IField reference to an object that
            contains metadata for the field.</param>
            <returns>An int. The method returns a 'zero' value if all the values of the fields
            are in error or if the database is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If valueProvider or field is null.</exception>
            <exception cref="T:System.NotSupportedException">If the field's type is not in {Numeric, Time, Date, Boolean}.</exception>
            <remarks>The max length of the field is computed as follows:
            <para>
            If all values of the field are in error, the max length of the field is zero.
            </para>
            <para>If the field type is Date, max length is 8.</para>
            <para>If the field type is Boolean, max length is 1.</para>
            <para>If the field type is Time, max length is the length of the latest time formatted using IDEA's time format.</para>
            <para>If the field type is Numeric, max length is the length of the longest string representation 
            using the following format: [-]dddd[.ddddd], where the dot appears only
            if the field's decimal count is not zero and the number of fractional decimal digits is equal to the field's declared
            number of decimals.</para>
            <para>Other field types are not supported.</para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.FieldTypeSupportsMinMax(COMDBLib.VBFieldType)">
            <summary>
            Determines whether the specified IDEA field supports min/max values in the
            sense of our GetMin/MaxValue.
            </summary>
            <param name="fieldType">The IDEA field type to check.
            An exception is thrown if this reference is null.</param>
            <returns>True if the specified field supports stats, otherwise false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ZeroValueOf(COMDBLib.IField)">
            <summary>
            Returns a value that represents 'zero' for the specified field type.
            </summary>
            <param name="field">A COMDBLib.IField reference.</param>
            <returns>An object.</returns>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.ZeroDateValue">
            <summary>
            Returns an object that represents a null date value for COM clients.
            </summary>
            <returns>Null</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.s_ideaStatisticsDateFormatInfo">
            <summary>
            Provides IDEA-statistics-specific information about the format of date values.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.GeneralCommands.SimpleCommands.s_ideaNumberFormatInfo">
            <summary>
            Provides information for formatting numbers to methods like GetMaxLength.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper">
            <summary>
            Contains helpers for building IDEA equations.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MaxEquationLength">
            <summary>
            Returns the max length of an IDEA equation.
            </summary>
            <returns>An int containing the max length of an IDEA equation.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MaxCharColumnLength">
            <summary>
            Returns the max length of an IDEA alphanumeric column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IdeaListSeparatorLength">
            <summary>
            Gets the length of IDEA's list separator.
            </summary>
            <returns>An Int32.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetRandomIdeaColumnName">
            <summary>
            Creates a random IDEA column name of length 13.
            </summary>
            <returns>A string.</returns>
            <remarks>The method returns a string of the form TPath.GetRandomFileName() with
            the dot sign replaced with an underscore.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.String,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructs a call to IDEA's @Match function for the specified column name and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="values">A non-null and non-empty sequence of DateTime values that will be matched against the column.
            The result will use IDEA's @Ctod to cast the compact IDEA string rep. of a date to an IDEA date.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetNoMatchCall(System.String,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructs a call to IDEA's @NoMatch function for the specified column name and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="values">A non-null and non-empty sequence of DateTime values that will be matched against the column.
            The result will use IDEA's @Ctod to cast the compact IDEA string rep. of a date to an IDEA date.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.String,System.String,System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Constructs a call to IDEA's @Match/@NoMatch function for the specified column name and values.
            </summary>
            <param name="functionName">The name of the IDEA matching funtion.</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="values">A non-null and non-empty sequence of DateTime values that will be matched against the column.
            The result will use IDEA's @Ctod to cast the compact IDEA string rep. of a date to an IDEA date.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitResult`1">
            <summary>
            Contains the results of splitting a range collection
            in a collection of single values and a collection of non-trivial ranges.
            </summary>
            <typeparam name="T">The type of the range element.</typeparam>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitResult`1.firstExpressionIsSingleValue">
            <summary>
            Specifies whether the first element in the range collection is a trivial range or null,
            if the collection was empty.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitResult`1.singleValues">
            <summary>
            Contains the list of values from the trivial ranges in the range
            collection. Null, if the collection does not contain trivial ranges.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitResult`1.ranges">
            <summary>
            Contains the list of non-trivial ranges in the range
            collection. Null, if the collection does not contain non-trivial ranges.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitSearchStringCollectionResult">
            <summary>
            Contains the results of splitting a collection of search strings
            in a collection of literals and a collection of regular expressions.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitSearchStringCollectionResult.firstExpressionIsLiteral">
            <summary>
            Specifies whether the first element in the collection is a literal.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitSearchStringCollectionResult.literalList">
            <summary>
            Contains the list of values that do not contain unescaped SA wildcards.
            Null, if the collection does not contain this kind of strings.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitSearchStringCollectionResult.regExprList">
            <summary>
            Contains the list of regular expressions.
            Null, if the collection does not contain this kind of strings.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitRangeCollection(System.Collections.Generic.IEnumerable{System.Tuple{System.TimeSpan,System.Nullable{System.TimeSpan}}})">
            <summary>
            Splits a range collection in a collection of single values and a collection of non-trivial ranges.
            </summary>
            <param name="values">A non-null sequence of ranges.</param>
            <returns>A SplitResult.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitRangeCollection(System.Collections.Generic.IEnumerable{System.Tuple{System.DateTime,System.Nullable{System.DateTime}}})">
            <summary>
            Splits a range collection in a collection of single values and a collection of non-trivial ranges.
            </summary>
            <param name="values">A non-null sequence of ranges.</param>
            <returns>A SplitResult.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.DateTime,System.Nullable{System.DateTime}}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="values">A non-null and non-empty sequence of DateTime range values that will be matched against the column.
            <para>The method uses @BetweenDate for non-trivial ranges and @Match/@NoMatch for single date values.</para>
            </param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.DateTime,System.DateTime}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="values">A non-null and non-empty sequence of DateTime range values that will be matched against the column.
            The result will use IDEA's @BetweenDate test the column against a range column.</param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLengthForDateRanges(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Computes the length of the expression that calls an IDEA matching function for the specified 
            column name length and range count.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">An Int32 that specifies the length of the colum name.</param>
            <param name="rangeCount">An Int32 that specifies the number of DateTime ranges that will be matched
            against the column.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength or rangeCount is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMaxDateRangesInMatchCall(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Computes the number of date ranges in an IDEA matching function call that does not exceed
            the specified equation length.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">An Int32 that specifies the length of the colum name.</param>
            <param name="maxEquationLength">An Int32 that specifies the max. length of the equation.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMaxDateValuesInMatchCall(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Computes the number of date values in an IDEA matching function call that does not exceed
            the specified equation length.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">An Int32 that specifies the length of the colum name.</param>
            <param name="maxEquationLength">An Int32 that specifies the max. length of the equation.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenDateCall(System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Constructs a call to [.NOT.]@BetweenDate for the specified column and date range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Date.</param>
            <param name="from">A DateTime value that represents the start of the range.</param>
            <param name="to">A A DateTime value that represents the end of the range.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenDateCallLength(System.Boolean,System.Int32)">
            <summary>
            Computes the length of a call to [.NOT.]@BetweenDate for the specified column length.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">An Int32 that specifies the length of the colum name.</param>
            <returns>An Int32.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForNumericColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Numeric.</param>
            <param name="values">A non-null and non-empty sequence of Decimal range values properly formatted for an IDEA equation 
            that will be matched against the column.
            <para>The method uses @Between for non-trivial ranges and @Match/@NoMatch for single Decimal values.</para>
            </param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitNumericRangeCollection(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Splits a range collection in a collection of single values and a collection of non-trivial ranges.
            </summary>
            <param name="values">A non-null sequence of Decimal range values properly formatted for an IDEA equation.</param>
            <returns>A SplitResult.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForNumericColumnAndNontrivialRanges(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Numeric.</param>
            <param name="values">A non-null and non-empty sequence of non-trivial Decimal range values properly formatted for an IDEA equation 
            that will be matched against the column.
            The result will use IDEA's @Between to test the column against a range.</param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLengthForNumericColumnAndNontrivialRanges(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Computes the length of a call to an IDEA matching function for the specified column name length and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type Numeric.</param>
            <param name="values">A non-null and non-empty sequence of non-trivial Decimal range values properly formatted for an IDEA equation 
            that will be matched against the column.
            The result will use IDEA's @Between to test the column against a range.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges">
            <summary>
            Calculates the length of a call to an IDEA matching function for a column of type string.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.#ctor(System.Boolean,System.Int32,System.Boolean,System.Tuple{System.String,System.String},System.Int32)">
            <summary>
            Initializes a new MatchCallCalculatorForStringColumn instance.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <param name="initialValue">A string pair containing the initial range against which the column will be matched.</param>
            <param name="maxEquationLength">An int containing the maximum allowed equation length.</param>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
            <exception cref="T:System.ArgumentNullException">If initialValue is null.</exception>
            <exception cref="T:System.ArgumentNullException">If initialValue.Item1 or initialValue.Item2 is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the length of the initial equation exceeds maxEquationLength.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.#ctor(System.Boolean,System.Int32,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new MatchCallCalculatorForStringColumn instance.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <param name="initialFromValue">A string containing the initial from-value against which the column will be matched.</param>
            <param name="initialToValue">A string containing the initial to-value against which the column will be matched.</param>
            <param name="maxEquationLength">An int containing the maximum allowed equation length.</param>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
            <exception cref="T:System.ArgumentNullException">If initialFromValue or initialToValue is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the length of the initial equation exceeds maxEquationLength.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.Init(System.Boolean,System.Int32,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new MatchCallCalculatorForStringColumn instance.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <param name="initialFromValue">A string containing the initial from-value against which the column will be matched.</param>
            <param name="initialToValue">A string containing the initial to-value against which the column will be matched.</param>
            <param name="maxEquationLength">An int containing the maximum allowed equation length.</param>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
            <exception cref="T:System.ArgumentNullException">If initialFromValue or initialToValue is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the length of the initial equation exceeds maxEquationLength.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.MatchValues">
            <summary>
            Gets a Boolean that specifies whether the match is case insensitive or not.
            </summary>
            <returns>True, if the equation selects the records
            that match the values; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.ColumnNameLength">
            <summary>
            Gets the length of the column name.
            </summary>
            <returns>An int that contains the length of the column name.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.IgnoreCase">
            <summary>
            Gets a Boolean that that specifies whether the match is case insensitive or not.
            </summary>
            <returns>If true, a case insensitive match is requested; otherwise, a case sensitive match.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.MaxEquationLength">
            <summary>
            Gets the max. allowed equation length.
            </summary>
            <returns>An int that specifies the max. allowed equation length.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.EquationLength">
            <summary>
            Gets the current length of the equation.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.ValueCount">
            <summary>
            Gets the number of ranges that were added to the calculator.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.AddValue(System.Tuple{System.String,System.String})">
            <summary>
            Adds a new range to the equation and updates EquationLength.
            </summary>
            <param name="value">A string pair containing the range.</param>
            <returns>True, if the value was added; false, if the new equation would exceed the max. allowed length.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumnAndNontrivialRanges.AddValue(System.String,System.String)">
            <summary>
            Adds a new range to the equation and updates EquationLength.
            </summary>
            <param name="fromValue">A string containing the from-value of the range.</param>
            <param name="toValue">A string containing the to-value of the range.</param>
            <returns>True, if the value was added; false, if the new equation would exceed the max. allowed length.</returns>
            <exception cref="T:System.ArgumentNullException">If fromValue or toValue is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenCallForNumericColumn(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructs a call to [.NOT.]@Between for the specified column and Decimal range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Numeric.</param>
            <param name="from">A Decimal value that represents the start of the range properly formatted for an IDEA equation.</param>
            <param name="to">A A Decimal value that represents the end of the range properly formatted for an IDEA equation.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenCallLengthForNumericColumn(System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Computes the length of a call to [.NOT.]@Betweene for the specified column and Decimal range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length name of the column name to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="from">A Decimal value that represents the start of the range properly formatted for an IDEA equation.</param>
            <param name="to">A A Decimal value that represents the end of the range properly formatted for an IDEA equation.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If from or to is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameLength is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallCostForAdditionalNumericRange(System.Int32,System.String,System.String)">
            <summary>
            Computes the cost of adding a time range to an IDEA matching function for a numeric
            column and collection of numeric ranges.
            </summary>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="from">A properly formatted numeric value that represents the start of the range.</param>
            <param name="to">A properly formatted numeric value that represents the end of the range.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @Match function for the specified column name and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <param name="quoteValues">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the values; otherwise, the method inserts the values in the equation as they are.
            <para>Default value: true</para></param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetNoMatchCall(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @NoMatch function for the specified column name and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <param name="quoteValues">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the values; otherwise, the method inserts the values in the equation as they are.
            <para>Default value: true</para></param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @Match / @NoMatch function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <param name="quoteValues">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the values; otherwise, the method inserts the values in the equation as they are.
            <para>Default value: true</para></param>
            <returns>A string containing the @Match / @NoMatch call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForNumericColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a call to IDEA's @Match / @NoMatch function for the specified numeric column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            The method assumes that the values are properly formatted for an IDEA equation.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <returns>A string containing the @Match / @NoMatch call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCall(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @Match/@NoMatch function for the specified column name and values.
            </summary>
            <param name="functionName">The name of the IDEA matching funtion.</param>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <param name="quoteValues">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the values; otherwise, the method inserts the values in the equation as they are.
            </param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLength(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Computes the length of a call to IDEA's @Match/@NoMatch function for the specified column name length and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <param name="quoteValues">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the values; otherwise, the method inserts the values in the equation as they are.
            </param>
            <returns>An Int32.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLengthForNumericColumn(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Computes the length of a call to IDEA's @Match/@NoMatch function for the specified column name length and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.</param>
            <param name="values">A non-null and non-empty sequence of values that will be matched against the column.
            The method assumes that the values are properly formatted for an IDEA equation.
            <para>The method throws and exception if the sequence contains nulls.</para>
            </param>
            <returns>An Int32.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallArgCostForNumericColumn(System.String)">
            <summary>
            Computes the length of the string rep. of an IDEA arg in a matching function call incl. the list separator.
            </summary>
            <param name="value">A string containing the argument.
            An exception is thrown if this value is null.
            <para>The method assumes that the value is properly formatted for an IDEA equation.</para></param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallArgCost(System.String,System.Boolean)">
            <summary>
            Computes the length of the string rep. of an IDEA arg in a matching function call incl. the list separator.
            </summary>
            <param name="value">A string containing the argument.
            An exception is thrown if this value is null.</param>
            <param name="quoteValue">A Boolean that specifies whether the method should transform
            the values to valid IDEA literal expressions. If quoteValues is true, the method uses MakeIdeaStringLiteral
            to transform the value; otherwise, the method uses the value as it is.
            </param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForTimeColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructs a call to IDEA's @Match / @NoMatch function for the specified column of type Time and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan values containing 
            the number of seconds that will be matched against the column.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForTimeColumn(System.String,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructs a call to IDEA's @Match function for the specified column of type Time and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan values containing 
            the number of seconds that will be matched against the column.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetNoMatchCallForTimeColumn(System.String,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructs a call to IDEA's @NoMatch function for the specified column of type Time and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan containing 
            the number of seconds that will be matched against the column.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForTimeColumn(System.String,System.String,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructs a call to IDEA's @Match/@NoMatch function for the specified column of type Time and values.
            </summary>
            <param name="functionName">The name of the IDEA matching funtion.</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan containing 
            the number of seconds that will be matched against the column.</param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLengthForTimeColumn(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Computes the length of a call to IDEA's @Match / @NoMatch function for the specified column of type Time and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan values containing 
            the number of seconds that will be matched against the column.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallArgCostForTimeColumn(System.TimeSpan)">
            <summary>
            Computes the length of the string rep. of an IDEA time value arg in a matching function call incl. the list separator.
            </summary>
            <param name="value">The TimeSpan value containing 
            the number of seconds that will be matched against the column.</param>
            <returns>An Int32</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallArgLengthForTimeColumn(System.TimeSpan)">
            <summary>
            Computes the length of the string rep. of an IDEA time value arg in a matching function call.
            </summary>
            <param name="value">The TimeSpan value containing 
            the number of seconds that will be matched against the column.</param>
            <returns>An Int32</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenTimeCallLength(System.Boolean,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Computes the length of a call to [.NOT.]@BetweenTime for the specified column and TimeSpan range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length name of the column name to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="from">A TimeSpan value that represents the start of the range.</param>
            <param name="to">A TimeSpan value that represents the end of the range.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallCostForAdditionalTimeRange(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Computes the cost of adding a time range to an IDEA matching function for a time
            column and collection of time ranges.
            </summary>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="from">A TimeSpan value that represents the start of the range.</param>
            <param name="to">A TimeSpan value that represents the end of the range.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallLengthForTimeColumn(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.TimeSpan,System.TimeSpan}})">
            <summary>
            Computes the length of a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpam range values that will be matched against the column.
            The result will use IDEA's @BetweenTime to test the column against a range.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
            <exception cref="T:System.ArgumentException">If columnNameLength or the value count is negative or zero.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForTimeColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.TimeSpan,System.Nullable{System.TimeSpan}}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan range values that will be matched against the column.
            <para>The method uses @BetweenTime for non-trivial ranges and @Match/@NoMatch for single TimeSpan values.</para>
            </param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForTimeColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.TimeSpan,System.TimeSpan}})">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="values">A non-null and non-empty sequence of TimeSpan range values that will be matched against the column.
            The result will use IDEA's @BetweenTime to test the column against a range.</param>
            <returns>A string containing the IDEA matching call.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenTimeCall(System.Boolean,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs a call to [.NOT.]@BetweenTime for the specified column and Int32 range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type Time.</param>
            <param name="from">A TimeSpan value that represents the start of the range.</param>
            <param name="to">A TimeSpan value that represents the end of the range.</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForStringColumn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @Match function for the specified column of type String and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String values
            that will be matched against the column.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para></param>
            <returns>A string containing the @Match call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetNoMatchCallForStringColumn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @NoMatch function for the specified column of type String and values.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String values
            that will be matched against the column.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para></param>
            <returns>A string containing the @NoMatch call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForStringColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to an IDEA matching function for the specified column of type String and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String values
            that will be matched against the column.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para>
            </param>
            <returns>A string containing the specified call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForStringColumn(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to an IDEA matching function for the specified column of type String and values.
            </summary>
            <param name="functionName">The name of the IDEA matching function.</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String values
            that will be matched against the column.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            </param>
            <returns>A string containing the specified call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn">
            <summary>
            Calculates the length of a call to an IDEA matching function for a column of type string.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.#ctor(System.Boolean,System.Int32,System.Boolean,System.String,System.Int32)">
            <summary>
            Initializes a new MatchCallCalculatorForStringColumn instance.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <param name="initialValue">A string containing the initial value against which the column will be matched.</param>
            <param name="maxEquationLength">An int containing the maximum allowed equation length.</param>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
            <exception cref="T:System.ArgumentNullException">If initialValue is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the length of the initial equation exceeds maxEquationLength.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.MatchValues">
            <summary>
            Gets a Boolean that specifies whether the match is case insensitive or not.
            </summary>
            <returns>True, if the equation selects the records
            that match the values; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.ColumnNameLength">
            <summary>
            Gets the length of the column name.
            </summary>
            <returns>An int that contains the length of the column name.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.IgnoreCase">
            <summary>
            Gets a Boolean that that specifies whether the match is case insensitive or not.
            </summary>
            <returns>If true, a case insensitive match is requested; otherwise, a case sensitive match.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.MaxEquationLength">
            <summary>
            Gets the max. allowed equation length.
            </summary>
            <returns>An int that specifies the max. allowed equation length.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.ConvertColumnToLower">
            <summary>
            Gets / sets a value that specifies whether the column will be converted to lower.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.EquationLength">
            <summary>
            Gets the current length of the equation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForStringColumn.AddValue(System.String)">
            <summary>
            Adds a new value to the equation and updates EquationLength.
            </summary>
            <param name="value">A string containing the value to add.</param>
            <returns>True, if the value was added; false, if the new equation would exceed the max. allowed length.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForStringColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String range values that will be matched against the column.
            <para>The method uses GetBetweenStringCall for non-trivial ranges and @Match/@NoMatch for single String values.</para>
            </param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para></param>
            <returns>A string containing the IDEA filter expression surrounded by parentheses if it consists of multiple terms.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitStringRangeCollection(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
            <summary>
            Splits a range collection in a collection of single values and a collection of non-trivial ranges.
            </summary>
            <param name="values">A non-null sequence of string range values.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <returns>A SplitResult.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForStringColumnAndNontrivialRanges(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Boolean)">
            <summary>
            Constructs a call to an IDEA matching function for the specified column name and values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String range values that will be matched against the column.
            <para>The method uses GetBetweenStringCall to generate the expression for a range value.</para>
            </param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para></param>
            <returns>A string containing the IDEA filter expression surrounded by parentheses if it consists of multiple terms.</returns>
            <exception cref="T:System.ArgumentNullException">If columName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenStringCall(System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructs an IDEA filter expression that tests whether a string column is in a given string range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="ignoreCase">A Boolean that specifies whether the comparison is case insensitive (if true) or not (if false).</param>
            <param name="columnName">The name of the column to be evaluated.</param>
            <param name="from">A non-null from-value.</param>
            <param name="to">A non-null to-value.</param>
            <returns>A string surrounded by parentheses.</returns>
            <exception cref="T:System.ArgumentNullException">If columnName, from or to is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.
            <para>
            If ignoreCase is true, the method uses IDEA's @CompareNoCase to compare the column against a value 
            unless the value does not change by converting it to lower, in which case the standard operator will be used.
            </para></remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetBetweenStringCallLength(System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Computes the length of an IDEA filter expression that tests whether a string column is in a given string range.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="ignoreCase">A Boolean that specifies whether the comparison is case insensitive (if true) or not (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.</param>
            <param name="from">A non-null from-value.</param>
            <param name="to">A non-null to-value.</param>
            <returns>An Int32.</returns>
            <exception cref="T:System.ArgumentNullException">If from or to is null.</exception>
            <exception cref="T:System.ArgumentException">If columnNameLength is negative or zero.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.
            <para>
            If ignoreCase is true, the method uses IDEA's @CompareNoCase to compare the column against a value 
            unless the value does not change by converting it to lower, in which case the standard operator will be used.
            </para></remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForSearchStringColumn(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs an IDEA filter expression for the specified column of type String and search values.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="values">A non-null and non-empty sequence of String values
            that will be matched against the column.
            <para>SA search patterns can use the wildcards * and ?.
            If a wildcard should be interpreted literally, the caller must escape it using the escape sequence \&lt;wildcard&gt;.
            The symbol \ must also be escaped using \\.
            The symbol \ escapes the character that follows it in the string.</para></param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Values that contain do not contain non-escaped wildcards will be matched against the column using
            the function @Match/@NoMatch. For the other values, @RegExpr will be used.</para></param>
            <returns>A string containing the IDEA equation.</returns>
            <exception cref="T:System.ArgumentNullException">If columnName or values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is empty.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetMatchCallForRegExpressions(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs an IDEA filter for the specified column of type String and reg. expressions.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="regExpressions">A non-null and non-empty sequence of reg. expressions
            that will be matched against the column.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <returns>A string containing the IDEA boolean match expression for regular expressiuons.</returns>
            <exception cref="T:System.ArgumentNullException">If columnName or regExpressions is null.</exception>
            <exception cref="T:System.ArgumentException">If regExpressions is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.SplitSearchStringCollection(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Splits a search string collection in a collection of literals and a collection of regular expressions.
            </summary>
            <param name="values">A non-null sequence of strings.</param>
            <returns>A SplitSearchStringCollectionResult.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetRegExprCallForStringColumn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Constructs a call to IDEA's @RegExpr function for the specified column of type String and IDEA regular expressions.
            </summary>
            <param name="columnName">The name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="regExpressions">A non-null and non-empty sequence of String values
            containing IDEA regular expressions.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.
            <para>Default value: false.</para></param>
            <returns>A string containing the @RegExpr call.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
            <exception cref="T:System.ArgumentNullException">If columName or regExpressions is null.</exception>
            <exception cref="T:System.ArgumentException">If regExpressions is empty.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn">
            <summary>
            Calculates the length of a Boolean expression that contains a call to IDEA's RegExpr function for a column of type string.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.#ctor(System.Boolean,System.Int32,System.Boolean,System.String,System.Int32)">
            <summary>
            Initializes a new MatchCallCalculatorForRegExprStringColumn instance.
            </summary>
            <param name="matchValues">A Boolean that specifies whether the equation selects the records
            that match the values (if true) or the records that do not match the values (if false).</param>
            <param name="columnNameLength">The length of the name of the column to be evaluated.
            The method assumes that the column is of type String.</param>
            <param name="ignoreCase">A Boolean that specifies whether the match is case insensitive or not.
            If true, a case insensitive match is requested; otherwise, a case sensitive match.</param>
            <param name="initialValue">A string containing the initial regular expression against which the column will be matched.</param>
            <param name="maxEquationLength">An int containing the maximum allowed equation length.</param>
            <exception cref="T:System.ArgumentException">If columnNameLength or maxEquationLength is negative or zero.</exception>
            <exception cref="T:System.ArgumentNullException">If initialValue is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the length of the initial equation exceeds maxEquationLength.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.MatchValues">
            <summary>
            Gets a Boolean that specifies whether the match is case insensitive or not.
            </summary>
            <returns>True, if the equation selects the records
            that match the values; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.ColumnNameLength">
            <summary>
            Gets the length of the column name.
            </summary>
            <returns>An int that contains the length of the column name.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.IgnoreCase">
            <summary>
            Gets a Boolean that that specifies whether the match is case insensitive or not.
            </summary>
            <returns>If true, a case insensitive match is requested; otherwise, a case sensitive match.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.MaxEquationLength">
            <summary>
            Gets the max. allowed equation length.
            </summary>
            <returns>An int that specifies the max. allowed equation length.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.ConvertColumnToLower">
            <summary>
            Gets / sets a value that specifies whether the column will be converted to lower.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.EquationLength">
            <summary>
            Gets the current length of the equation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MatchCallCalculatorForRegExprStringColumn.AddValue(System.String)">
            <summary>
            Adds a new value to the equation and updates EquationLength.
            </summary>
            <param name="value">A string containing the reg. expression to add.</param>
            <returns>True, if the value was added; false, if the new equation would exceed the max. allowed length.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetCtodCall(System.DateTime)">
            <summary>
            Constructs a call to IDEA's @Ctod function using the specified DateTime value.
            </summary>
            <param name="value">A DateTime value.</param>
            <returns>A string containing a @Ctod call that requests the conversion of 
            the compact IDEA string representation (format: yyyyMMdd) of the given DateTime value.</returns>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.ToIdeaDateString(System.DateTime)">
            <summary>
            Returns the IDEA compact string representation of a date value.
            </summary>
            <param name="value">The DateTime value to convert.</param>
            <returns>A string containing the IDEA compact string representation (format yyyyMMdd)
            of the specified date value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.ToIdeaDateString(System.Nullable{System.DateTime})">
            <summary>
            Returns the IDEA compact string representation of a date value.
            </summary>
            <param name="value">The DateTime? value to convert.</param>
            <returns>A string containing the IDEA compact string representation (format yyyyMMdd)
            of the specified date value or IdeaNullDate, if value is null.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IdeaNullDate">
            <summary>
            Returns the string representation of the IDEA 'null' date value.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.MakeIdeaStringLiteral(System.String)">
            <summary>
            Creates an IDEA expression that can represent a string constant.
            </summary>
            <param name="value">The value for which an IDEA expression is created.
            An exception is thrown if this reference is null.</param>
            <returns>A string containining an IDEA expression that escapes
            the special chars of the given literal.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <remarks>The method will not include white spaces that are not syntactically required.</remarks>
            <example>If the input is ab"cd, the method returns "ab" + @Chr(34) + "cd".
            If the input is abc, the method returns "abc".</example>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.GetIdeaStringLiteralLength(System.String)">
            <summary>
            Computes the length of the IDEA expression that can represent a string constant.
            </summary>
            <param name="value">The value for which the IDEA expression's length is computed.
            An exception is thrown if this reference is null.</param>
            <returns>An Int32</returns>
            <remarks>For details about the way the IDEA expression is constructed, refer to MakeIdeaStringLiteral.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.ToIdeaRegExprPattern(System.String)">
            <summary>
            Converts an SA search pattern (i.e., a string containing the wildcards * and ?) to an IDEA @RegExpr-pattern.
            </summary>
            <param name="value">A string containing an SA search pattern. SA search patterns can use the wildcards * and ?.
            If a wildcard should be interpreted literally, the caller must escape it using the escape sequence \&lt;wildcard&gt;.
            The symbol \ must also be escaped using \\.
            The symbol \ escapes the character that follows it in the string.</param>
            <returns>A string containing the @RegExpr-equivalent of the specified SA pattern.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.FormatException">If value cannot be converted to a @RegExpr pattern (i.e., the last \ was not escaped properly).</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IsIdeaRegExprMetacharacter(System.Char)">
            <summary>
            Determines whether a character is an IDEA @RegExpr metacharacter.
            </summary>
            <param name="ch">The character to test.</param>
            <returns>True, if ch is a metacharacter; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.TryToReduceSAPatternToLiterals(System.String,System.String@)">
            <summary>
            Tries to 'reduce' an SA search pattern to a string containing only literals.
            </summary>
            <param name="value">A string containing an SA search pattern. SA search patterns can use the wildcards * and ?.
            If a wildcard should be interpreted literally, the caller must escape it using the escape sequence \&lt;wildcard&gt;.
            The symbol \ must also be escaped using \\.
            The symbol \ escapes the character that follows it in the string.</param>
            <param name="result">A string that receives the 'reduced' pattern if the method succeeds.</param>
            <returns>True, if value does not contain any unescaped * or ?; otherwise, false.</returns>
            <exception cref="T:System.FormatException">If the last \ was not escaped properly.</exception>
            <remarks>If value does not contain any of the chars '\', '*' or '.', the method sets result to value
            and returns true.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IsSAPatternMetacharacter(System.Char)">
            <summary>
            Determines whether a character is an SA search pattern metacharacter.
            </summary>
            <param name="ch">The character to test.</param>
            <returns>True, if ch is a metacharacter; otherwise, false.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.TextEncapsulators">
            <summary>
            Defines IDEA's text encapsulator as an array with one element.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IdeaMatchFunctionName">
            <summary>
            Holds the name of the IDEA equation matching function.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.IdeaEquationBuilderHelper.IdeaNoMatchFunctionName">
            <summary>
            Holds the name of the IDEA equation no-matching function.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator">
            <summary>
            Implements a calendar week calculator that uses a given Calendar, default week rule and first day of week 
            in its computations.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.#ctor(System.Globalization.Calendar,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Initializes a new DefaultCalendarWeekCalculator instance with the
            specified calendar, default week rule and first day of week.
            </summary>
            <param name="calendar">A Calendar reference.</param>
            <param name="calendarWeekRule">A CalendarWeekRule that the object will use to 
            determine the first week of the year.</param>
            <param name="firstDayOfWeek">A DayOfWeek that defines the first day of a week.</param>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">If calendarWeekRule 
            or firstDauOfWeek is not defined.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.m_calendar">
            <summary>
            Holds a reference to the Calendar object.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.m_calendarWeekRule">
            <summary>
            Holds the CalendarWeekRule that the object uses to determine the first week of the year.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.m_firstDayOfWeek">
            <summary>
            Holds the DayOfWeek that defines the first day of a week.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.GetWeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Determines the week of year that includes the specified date.
            </summary>
            <param name="date">The Gregorian calendar date and time value.</param>
            <param name="year">A reference to an int that receives the calendar-specific year of the value's week number.</param>
            <returns>A positive int that contains the calendar-specific week of year that includes the specified date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If date is not in the valid range of the 
            calendar used by the calculator.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.DefaultCalendarWeekCalculator.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year.
            </summary>
            <param name="week">An int representing the calendar-specific week of year.</param>
            <param name="year">An int representing the calendar-specific year.</param>
            <param name="era">An int representing the era of the calendar-specific year. Zero means the calendar's current era.</param>
            <param name="end">A reference to a DateTime value that receives the
            end date of the specified week of year.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.ICalendarWeekCalculator">
            <summary>
            Defines an interface to a calendar week calculator.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.ICalendarWeekCalculator.GetWeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Determines the week of year that includes the specified date.
            </summary>
            <param name="date">The Gregorian calendar date and time value.</param>
            <param name="year">A reference to an int that receives the calendar-specific year of the value's week number.</param>
            <returns>A positive int that contains the calendar-specific week of year that includes the specified date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If date is not in the valid range of the 
            calendar used by the calculator.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.ICalendarWeekCalculator.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year.
            </summary>
            <param name="week">An int representing the calendar-specific week of year.</param>
            <param name="year">An int representing the calendar-specific year.</param>
            <param name="era">An int representing the era of the calendar-specific year. Zero means the calendar's current era.</param>
            <param name="end">A reference to a DateTime value that receives the
            end date of the specified week of year.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata">
            <summary>
            The class IdeaColumnMetadata holds the metadata of an IDEA column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.#ctor">
            <summary>
            Initializes a new empty IdeaColumnMetadata.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.#ctor(Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata)">
            <summary>
            Initializes a new IdeaColumnMetadata instance with the values
            of another instance.
            </summary>
            <param name="other">The instance to copy.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.Name">
            <summary>
            Gets / sets the name of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.ColumnType">
            <summary>
            Gets / sets the type of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.Length">
            <summary>
            Gets / sets the length of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.Decimals">
            <summary>
            Gets / sets the number of decimals.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.Equation">
            <summary>
            Gets / sets the equation of the column.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.EquationProvider">
            <summary>
            Gets / sets a function that can resolve the Equation of this object
            in case it was not specified explicitly.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.Description">
            <summary>
            Gets / sets the description of the column.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.ToString">
            <summary>
            Gets a string representation of the current object.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsCharacter">
            <summary>
            Gets a Boolean indicating wether the column is alphanumeric.
            </summary>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsDate">
            <summary>
            Gets a Boolean indicating whether to column is of type Date.
            </summary>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsNumeric">
            <summary>
            Gets a Boolean indicating whether to column is of type Numeric.
            </summary>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsTime">
            <summary>
            Gets a Boolean indicating whether to column is of type Time.
            </summary>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsTristate">
            <summary>
            Gets a Boolean indicating whether to column is of type Tristate.
            </summary>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsBoolean">
            <summary>
            Gets a Boolean indicating whether to column is of type Boolean.
            </summary>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsVirtual">
            <summary>
            Gets a Boolean indicating whether to column is virtual / computed.
            </summary>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsCharacterType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type alphanumeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is alphanumeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsDateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Date.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Date; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsNumericType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Numeric.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Numeric; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsTimeType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Time.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Time; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsTristateType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Tristate.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Tristate; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsBooleanType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is of type Boolean.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is of type Boolean; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata.IsVirtualType(COMMONIDEACONTROLSLib.VBFieldType)">
            <summary>
            Gets a Boolean indicating wether a column is virtual / computed.
            </summary>
            <param name="columnType">A VBFieldType value.</param>
            <returns>True if the column is virtual; otherwise, false.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorOptions.GenerateUniqueTableName">
            <summary>
            If set, the generator tries to create a unique database name starting from the suggested name.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorOptions.OverwriteExistingDatabase">
            <summary>
            If set and the database already exists, the generator overwrites it.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.GenerateIdeaDatabase``1(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String,``0[],System.Action{COMDBLib.RecordSet,``0[],COMDBLib.TableDef},Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorOptions)">
            <summary>
            Creates a new IDEA database and optionally appends data to it.
            </summary>
            <param name="context">An IExecutionContext reference to the execution context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database.
            An exception is thrown if databaseName is null or empty.
            If options includes GenerateUniqueDatabaseName, the method tries to create a unique
            database name starting from databaseName.</param>
            <param name="columnsData">An IdeaColumnMetadata array containing the meta data of the
            new table's columns.
            An exception is throw if this array is null or empty.</param>
            <param name="rowAppender">An optional function that adds rows to the database.
            This reference can be null.</param>
            <param name="options">An IdeaTableCreatorOptions value that specifies whether
            the method creates a unique table name or not.</param>
            <returns>The name of the table.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty or if it consists only
            of white spaces.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsData is null.</exception>
            <exception cref="T:System.ArgumentException">If columnsData is empty.</exception>
            <exception cref="T:System.InvalidOperationException">If the database already exists and the option
            OverwriteExistingDatabase was not set.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.DeleteDatabaseNoError(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.String)">
            <summary>
            Deletes a database ignoring any non-critical exceptions.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="databaseName">The name of the database to delete.
            An exception is thrown if this reference is null.
            If the name is empty, the method does nothing.</param>
            <returns>True, if the operation succeeded; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.AddColumnsToIdeaDatabaseDefinition(COMDBLib.ITableDef,Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata[])">
            <summary>
            Appends a set of columns to an IDEA COMDBLib.TableDef object.
            </summary>
            <param name="tableDef">The COMDBLib.TableDef to which the method appends new columns.
            An exception is thrown if this reference is null.</param>
            <param name="columns">An IdeaColumnMetadata array that contains the metadata of the columns
            to add.
            An exception is thrown if this reference is null.
            In case the array is empty, the method does nothing.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.InitializeIdeaField(COMDBLib.IField,Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata)">
            <summary>
            Initializes a new COMDBLib.IField object.
            </summary>
            <param name="newField">The COMDBLib.Field to initialize.
            An exception is thrown if this reference is null.</param>
            <param name="columnData">The IdeaColumnMetadata object that supplies
            the property values for the new field.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If newField is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.AppendRecord(COMDBLib.IRecordSet,Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata[],System.String[])">
            <summary>
            Appends a new row to a record set.
            </summary>
            <param name="recordSet">A COMDBLib.IRecordSet object to which the method appends a row.
            An exception is thrown if this reference is null.</param>
            <param name="columnsData">An IdeaColumnMetadata array that contains the metadata of the columns to
            set.
            An exception is thrown if this reference is null.</param>
            <param name="values">A string array containing the values of the columns in columnsData.
            Conversions will be done using the Invariant culture.
            An exception  is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If recordSet is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnsData is null.</exception>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaDbCreatorHelper.SetColumnValue(COMDBLib.IRecord,System.Int32,Audicon.SmartAnalyzer.Common.MacroCommands.Internal.IdeaColumnMetadata,System.String)">
            <summary>
            Sets the value of a column.
            </summary>
            <param name="newRecord">The IRecord object to modify.
            An exception is thrown if this reference is null.</param>
            <param name="columnIndex">The one-base index of the column to update.</param>
            <param name="columnData">The metadata object of the column.
            An exception is thrown if this reference is null.</param>
            <param name="value">The value to set. Conversions will be done using the Invariant culture.</param>
            <exception cref="T:System.ArgumentNullException">If newRecord is null.</exception>
            <exception cref="T:System.ArgumentNullException">If columnData is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.Iso8601CalendarWeekCalculator">
            <summary>
            Implements a calendar week calculator that uses the ISO-8601 rules.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.Iso8601CalendarWeekCalculator.GetWeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Determines the week of year that includes the specified date.
            </summary>
            <param name="date">The Gregorian calendar date and time value.</param>
            <param name="year">A reference to an int that receives the Gregorian calendar year of the value's week number.</param>
            <returns>A positive int that contains the Gregorian calendar week of year that includes the specified date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If date is not in the valid range of the 
            calendar used by the calculator.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.Iso8601CalendarWeekCalculator.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year.
            </summary>
            <param name="week">An int representing the Gregorian calendar week of year.</param>
            <param name="year">An int representing the Gregorian calendar year.</param>
            <param name="era">The method ignores this value.</param>
            <param name="end">A reference to a DateTime value that receives the
            end date of the specified week of year.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.UKTaxCalendarWeekCalculator">
            <summary>
            Implements a calendar week calculator that uses the UKTax rules.
            </summary>
            <remarks>Based on "HM Revenue and Customs Tax Weeks" at http://www.merlyn.demon.co.uk/weekcalc.htm </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.UKTaxCalendarWeekCalculator.GetWeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Determines the week of year that includes the specified date.
            </summary>
            <param name="date">The Gregorian calendar date and time value.</param>
            <param name="year">A reference to an int that receives the Gregorian calendar year of the value's week number.</param>
            <returns>A positive int that contains the Gregorian calendar week of year that includes the specified date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If date is not in the valid range of the 
            calendar used by the calculator.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Internal.UKTaxCalendarWeekCalculator.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year.
            </summary>
            <param name="week">An int representing the Gregorian calendar week of year.</param>
            <param name="year">An int representing the Gregorian calendar year.</param>
            <param name="end">A reference to a DateTime value that receives the
            end date of the specified week of year.</param>
            <param name="era">The method ignores this value.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.NamedSpecialDayFilter">
            <summary>
            Represents a special day filter for named special days (e.g., public holidays or school vacations).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.NamedSpecialDayFilter.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData})">
            <summary>
            Initializes from the specified collection of SpecialDayData values.
            </summary>
            <param name="values">An IEnumerable&lt;SpecialDayData&gt; that provides 
            access to the collection of SpecialDayData values.
            <para>
            If the collection contains items having the same date but different names, then 
            a) it is noy determined which day name will be returned by IsSpecialDay for such a date and
            b) the object uses all day names to calculate the value of the property SpecialDayNameMaxLength.
            </para></param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.NamedSpecialDayFilter.SpecialDayNameMaxLength">
            <summary>
            Gets the max length of a special day name in the filter.
            </summary>
            <returns>Always zero.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.NamedSpecialDayFilter.IsSpecialDay(System.DateTime,System.String@)">
            <summary>
            Checks whether a date value is a special day.
            </summary>
            <param name="value">A DateTime value to be checked.</param>
            <param name="specialDayName">A reference to a string that the method will always set to null.</param>
            <returns>True, if value is a special day; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.NamedSpecialDayFilter.Compare(Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData,Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData)">
            <summary>
            Compares the date parts of two SpecialDayData instances and returns an integer
            that indicates the relative order of the specified values.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The second value to compare.</param>
            <returns>The result of DateTime.Compare(x.Date, y.Date).
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer">
            <summary>
            Implements varios functionalities related to Smart Analyzer Extended Parameters Administration (a.k.a. Global Parameters)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.#ctor(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            ctor
            </summary>
            <param name="location">Execution location</param>
            <param name="context">Execution context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.#ctor(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Nullable{System.Guid})">
            <summary>
            ctor
            </summary>
            <param name="location">Execution location</param>
            <param name="workflowId">Optional Id of currently active workflow</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Set4File(System.String,System.String,System.Object)">
            <summary>
            Save extended parameter at file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Set4AuditFolder(System.String,System.String,System.Object)">
            <summary>
            Save extended parameter at audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Set4Project(System.String,System.Object)">
            <summary>
            Save extended parameter at project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Set4App(System.String,System.Object)">
            <summary>
            Save extended parameter at App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Set4Machine(System.String,System.Object)">
            <summary>
            Save extended parameter at machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Get4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Parameter value as string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Get4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Parameter value as string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Get4Project(System.String,System.Object[])">
            <summary>
            Retrieve exteneded parameter from project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Parameter value as string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Get4App(System.String,System.Object[])">
            <summary>
            Retrieve exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Parameter value as string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Get4Machine(System.String,System.Object[])">
            <summary>
            Retrieve exteneded parameter from machine level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Parameter value as string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.CompareStrings(System.String,System.String)">
            <summary>
            For test purposes
            </summary>
            <param name="expected"></param>
            <param name="actiual"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.CompareParameters(System.Object,System.Object,Audicon.SmartAnalyzer.Common.Types.ParameterValueType)">
            <summary>
            For test purposes
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="valueType">Type of parameter's value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetString4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve string type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of string type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetString4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve string type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of string type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetString4Project(System.String,System.Object[])">
            <summary>
            Retrieve string type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of string type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetString4App(System.String,System.Object[])">
            <summary>
            Retrieve string type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of string type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetString4Machine(System.String,System.Object[])">
            <summary>
            Retrieve string type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of string type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetBoolean4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve boolean type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of boolean type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetBoolean4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve boolean type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of boolean type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetBoolean4Project(System.String,System.Object[])">
            <summary>
            Retrieve boolean type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of boolean type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetBoolean4App(System.String,System.Object[])">
            <summary>
            Retrieve boolean type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of boolean type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetBoolean4Machine(System.String,System.Object[])">
            <summary>
            Retrieve boolean type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of boolean type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetDateTime4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve DateTime type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of DateTime type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetDateTime4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve DateTime type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of DateTime type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetDateTime4Project(System.String,System.Object[])">
            <summary>
            Retrieve DateTime type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of DateTime type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetDateTime4App(System.String,System.Object[])">
            <summary>
            Retrieve DateTime type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of DateTime type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetDateTime4Machine(System.String,System.Object[])">
            <summary>
            Retrieve DateTime type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of DateTime type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetInteger4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve integer type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of integer type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetInteger4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve integer type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of integer type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetInteger4Project(System.String,System.Object[])">
            <summary>
            Retrieve integer-typed exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of integer type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetInteger4App(System.String,System.Object[])">
            <summary>
            Retrieve integer-typed exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of integer type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetInteger4Machine(System.String,System.Object[])">
            <summary>
            Retrieve integer-typed exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of integer type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetFloat4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve float type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of float type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetFloat4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve float type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of float type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetFloat4Project(System.String,System.Object[])">
            <summary>
            Retrieve float type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of float type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetFloat4App(System.String,System.Object[])">
            <summary>
            Retrieve float type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of float type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetFloat4Machine(System.String,System.Object[])">
            <summary>
            Retrieve float type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of float type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetObject4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve object type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of object type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetObject4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve object type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of object type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetObject4Project(System.String,System.Object[])">
            <summary>
            Retrieve object type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of object type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetObject4App(System.String,System.Object[])">
            <summary>
            Retrieve object type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of object type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetObject4Machine(System.String,System.Object[])">
            <summary>
            Retrieve object type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of object type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetPeriod4File(System.String,System.String,System.Object[])">
            <summary>
            Retrieve period type exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of period type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetPeriod4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Retrieve period type exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of period type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetPeriod4Project(System.String,System.Object[])">
            <summary>
            Retrieve period type exteneded parameter from current project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of period type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetPeriod4App(System.String,System.Object[])">
            <summary>
            Retrieve period type exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of period type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.GetPeriod4Machine(System.String,System.Object[])">
            <summary>
            Retrieve period type exteneded parameter from machine/company level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Value of period type parameter</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Delete4File(System.String,System.String,System.Object[])">
            <summary>
            Delete exteneded parameter from file level
            </summary>
            <param name="fileName">File name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Number of deleted parameters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Delete4AuditFolder(System.String,System.String,System.Object[])">
            <summary>
            Delete exteneded parameter from audit folder level
            </summary>
            <param name="folderName">Audit folder name</param>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Number of deleted parameters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Delete4Project(System.String,System.Object[])">
            <summary>
            Delete exteneded parameter from project level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Number of deleted parameters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Delete4App(System.String,System.Object[])">
            <summary>
            Delete exteneded parameter from App workflow level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Number of deleted parameters</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Parameterization.ExtendedParameterizer.Delete4Machine(System.String,System.Object[])">
            <summary>
            Delete exteneded parameter from machine level
            </summary>
            <param name="paramName">Parameter name</param>
            <param name="options">If not empty, first element is recursive flag</param>
            <returns>Number of deleted parameters</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.SAParameterValuesHelper">
            <summary>
            Contains helpers for dealing with SA.Parameters and SA.CustomControls parameter values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.SAParameterValuesHelper.DateTimeFromString(System.String)">
            <summary>
            Converts a string containing the SA.Parameters representation of a date value to a DateTime value.
            </summary>
            <param name="value">A string containing the SA.Parameters representation of a date value.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.FormatException">If value cannot be converted to DateTime.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.SAParameterValuesHelper.TimeSpanFromIdeaTimeString(System.String)">
            <summary>
            Converts a string containing the SA.Parameters representation of an IDEA Time value (nr. of seconds formatted
            as HHHH:MM:SS) to a TimeSpan value.
            </summary>
            <param name="value">A string containing the SA.Parameters representation of an IDEA Time value.</param>
            <returns>A TimeSpan value.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.FormatException">If value cannot be converted to the destination type.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands">
            <summary>
            Creator for all Idea Operations.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.SAContext">
            <summary>
            Get or set the Execution Context.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.ProtectIP">
            <summary>
            Functionality for protecting the intelectual property for Idea Macros.
            </summary>
            <returns>An instance of ProtectIp class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.EquationBuilder">
            <summary>
            Functionality for generation Idea equations based on dialog lists.
            </summary>
            <returns>An instance of EquationBuilder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.TagManagement">
            <summary>
            Functionality for managing SA tags.
            </summary>
            <returns>An instance of EquationBuilder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.IndexCleaner">
            <summary>
            Get an instance of IndexCleaner.
            </summary>
            <returns>an istance of IndexCleaner boud to the current execution context.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.CreateDatabase">
            <summary>
            Get an instance of CreateDatabase.
            </summary>
            <returns>an istance of CreateDatabase boud to the current execution context.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.FieldManagement(System.Object)">
            <summary>
            Get an instance of field manager for IDEA database name or IDEA database reference
            </summary>
            <param name="dbNameOrRef">Name of IDEA database or reference of opened IDEA database</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.ContentEquationBuilder">
            <summary>
            Get an instance of ContentEquationBuilder
            </summary>
            <returns>An instance of ContentEquationBuilder</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.SimpleCommands">
            <summary>
            Create an instance of Audicon.SmartAnalyzer.MacroCommands.GeneralCommands
            </summary>
            <returns>Returns an instance of SimpleCommands</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.ProjectAdministration">
            <summary>
            Script support for Project Administration.
            </summary>
            <returns>An instance of Case Administrator</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.NewColumnFilterBuilder">
            <summary>
            Constructs a new ColumnFilterBuilder that can be used to create IDEA column filter expressions.
            </summary>
            <returns>An IColumnFilterBuilder reference.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.NewVatRegNoChecker">
            <summary>
            Constructs a new VatRegNoChecker that can be used to check the wellformedness of EU VAT registration numbers.
            </summary>
            <returns>An IVatRegNoChecker.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.GlobalParameters(System.Object[])">
            <summary>
            Script support for Extended parameters (a.k.a. Global prameters)
            </summary>
            <returns>An instance of ExtendedParameterizer class</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.GetFileSystem">
            <summary>
            Returns a class that searches for files/folders using a pattern
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.NewCalendarTableCreator">
            <summary>
            Constructs a new CalendarTableCreator that can be used to create an IDEA calendar table.
            </summary>
            <returns>An ICalendarTableCreator.</returns>
            <exception cref="T:System.InvalidOperationException">If SAContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.NewSpecialDayFilter(System.Object)">
            <summary>
            Constructs a new special day filter from the specified data or data provider object.
            </summary>
            <param name="values">An object that specifies the data or data provider object for the filter object.
            <para>Accepted types:</para>
            <para>1) IContentOfListReader with the list element of type Date.</para>
            <para>2) IEnumerable&lt;DateTime&gt;.</para>
            <para>3) IEnumerable for a collection of boxed DateTime values.</para>
            <para>4) IEnumerable for a collection whose elements are of type a) DateTime, b) object array of min length two, having 
            at index 0 the IDEA string rep. (format yyyyMMdd) of 
            a valid Gregorian calendar date and at index 1 the name of the special day, c) String containing the 
            IDEA string rep. of a valid Gregorian calendar date or d) SpecialDayData.
            </para>
            <para>5) IEnumerable&lt;SpecialDayData&gt;.</para></param>
            <returns>An ISpecialDayFilter reference to the filter object.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values is of an unsupported type or if it contains items of an unknown 
            format or nulls.</exception>
            <remarks>If values is an empty collection of a supported type, the method returns an empty filter.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.EnumerateStandardSADateDayNamePairArray(System.Collections.IEnumerable)">
            <summary>
            Converts an object array to an equivalent sequence of SpecialDayData items.
            </summary>
            <param name="values">The sequence to convert.
            <para>Accepted element types:
            1) DateTime.
            2) Object array of min length two, having at index 0 the IDEA string rep. (format yyyyMMdd) of 
            a valid Gregorian calendar date and at index 1 the name of the special day.
            3) String containing the IDEA string rep. of a valid Gregorian calendar date.
            4) SpecialDayData.</para></param>
            <returns>An IEnumerable&lt;SpecialDayData&gt;.</returns>
            <remarks>If the array is empty, an empty sequence will be returned.</remarks>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values contains items of an unknown format or nulls.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.TryConvertSpecialDayData(System.Object)">
            <summary>
            Tries to convert an object to a SpecialDayData.
            </summary>
            <param name="value">The object to convert.
            <para>Accepted types:
            1) DateTime.
            2) Object array of min length two, having at index 0 the IDEA string rep. (format yyyyMMdd) of 
            a valid Gregorian calendar date and at index 1 the name of the special day.
            3) String containing the IDEA string rep. of a valid Gregorian calendar date.
            4) SpecialDayData.</para></param>
            <returns>A SpecialDayData instance, if the conversion succeeded; otherwise, null.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.NewAnonymousSpecialDayFilter(Audicon.SmartAnalyzer.Common.Interfaces.Parameters.IContentOfListReader)">
            <summary>
            Constructs a new anonymous special day (e.g., day off) filter from the specified list of date or date range values.
            </summary>
            <param name="values">An IContentOfListReader reference to a list of date or date range values.</param>
            <returns>An ISpecialDayFilter reference to the filter object.</returns>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:System.ArgumentException">If values's element type is not Date.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.ScriptCommands.ExternalFilters(System.Object[])">
            <summary>
            Constructs an instance of External filters' administrator.
            </summary>
            <param name="args">Optional paramaters.</param>
            <returns>Instance of External filters' administrator.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType">
            <summary>
            Type of prefixes and sufixes associated to a file.
            This enum is compliant with Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType.None">
            <summary>
            No result.(none)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType.SourceTable">
            <summary>
            Mark as source table.(^)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType.IntermediateResult">
            <summary>
            Mark as intermediary result.(°)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType.FinalResult">
            <summary>
            Mark as final result.(@)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.UniqueFileNameType.NoRegistration">
            <summary>
            Mark as not to be registered.(-)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.EnumDeleteFileResult">
            <summary>
            Possible responces when a file deletion is requested.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.EnumDeleteFileResult.DeleteNotPossible">
            <summary>
            Not Possible.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.EnumDeleteFileResult.DeleteSuccessful">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.EnumDeleteFileResult.DeleteNotAllowed">
            <summary>
            No permition to delete.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData">
            <summary>
            Holds the data of a special day.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new SpecialDayData instance with the
            specified date and day name.
            </summary>
            <param name="date">A DateTime value that contains the date of the special day.</param>
            <param name="dayName">A string containing the name of the special day or null for an anonymous special day.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData.Date">
            <summary>
            Gets the date of the special day.
            </summary>
            <returns>A DateTime value.</returns>
            <remarks>The property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.SpecialDayData.DayName">
            <summary>
            Gets the name of the special day.
            </summary>
            <returns>A string.</returns>
            <remarks>The property is read-only.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil">
            <summary>
            Implements the Cologne Phonetics algorithm.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.StringBuilderPool">
            <summary>
            Based on Microsoft.MetadataReader.StringBuilderPool
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedAHKLOQRUX">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to A, H, K, L, O, Q, R, U, and X.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedAHKOQUX">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to A, H, K, O, Q, U, and X.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedSZ">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to S and Z.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedDT">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to D and T.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedCSZ">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to C, S and Z.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedCKQ">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to C, K and Q.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedC">
            <summary>
            Holds a reference to the sorted array of all chars (upper and lowercase) that are equivalent
            to C.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.SortedContextIndependentCharsExceptH">
            <summary>
            Holds a reference to the sorted Char2Code array for all chars - except H - (upper and lowercase) that have a 
            context independent translation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedAHKLOQRUX">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to A, H, K, L, O, Q, R, U, and X.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedAHKOQUX">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to A, H, K, O, Q, U, and X.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedCKQ">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to C, K and Q.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedSZ">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to S and Z.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedCSZ">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to C, S and Z.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedDT">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to D and T.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedC">
            <summary>
            Constructs the sorted array of all chars (upper and lowercase) that are equivalent
            to C.
            </summary>
            <returns>A char array sorted in the increasing order of its elements.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.Char2Code">
            <summary>
            Holds information about a char and its translation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.Char2Code.CompareTo(Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.Char2Code)">
            <summary>
            Compares two Char2Code values using only their Value fields.
            </summary>
            <param name="other">The Char2Code value to compare with.</param>
            <returns>The result of comparing the Value fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.GetSortedContextIndependentCharsExceptH">
            <summary>
            Constructs the sorted Char2Code array for all chars - except H - (upper and lowercase) that have a 
            context independent translation.
            </summary>
            <returns>A Char2Code array sorted in the increasing order of the Value fields.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.CodeAppender">
            <summary>
            Appends CPH-codes to a StringBuilder according to the rules
            of the Cologne Phonetics algorithm:
            a) 0 is ignored unless it this the first code to be added.
            b) All other codes are added only if they are not equal to the 
            last added code.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.CodeAppender.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new appender with the specified builder.
            </summary>
            <param name="builder">The StringBuilder with which to initialize
            the current instance.</param>
            <exception cref="T:System.ArgumentNullException">If builder is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.CodeAppender.Append(System.Char)">
            <summary>
            Appends the specifies CPH-code (0, 1, 2, ..., 8) to the
            StringBuilder according to the rules
            of the Cologne Phonetics algorithm:
            a) 0 is ignored unless it this the first code to be added.
            b) All other codes are added only if they are not equal to the 
            last added code.
            </summary>
            <param name="ch">The code to be added. Must be a digit in [0, 8].
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ColognePhoneticsUtil.ComputeCode(System.String)">
            <summary>
            Implements the Cologne Phonetics algorithm according to https://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik.
            </summary>
            <param name="value">A string containing the value to convert or null.</param>
            <returns>A string containing the result of the conversion or null if value is null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag">
            <summary>
            Construction containing existing tag information.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.TagName">
            <summary>
            Name of the tag.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.FieldName">
            <summary>
            Name of the field associated with the tag.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.Type">
            <summary>
            Type the field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.IsNumeric">
            <summary>
            Test if field is numeric.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.IsDate">
            <summary>
            Test if field is date.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.IsTime">
            <summary>
            Test if field is time.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.ExistingTag.IsChar">
            <summary>
            Test if field is character.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations">
            <summary>
            Helper class used to submit file-related operations to server
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.DataType">
            <summary>
            Type of data to append to IMD file
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.AddField(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new field description 
            </summary>
            <param name="fieldName">Name of field</param>
            <param name="description">Descr of field</param>
            <param name="type">Type of field</param>
            <param name="length">Length of field</param>
            <param name="decimals">Decimals count of field</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.AppendEmptyValues">
            <summary>
            Append an empty value the new table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.AppendRecord(System.String)">
            <summary>
            Appends single record to the new table
            </summary>
            <param name="value">String cotaining values separated by ";"</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.AppendValues(System.String)">
            <summary>
            Append values the new table.
            </summary>
            <remarks>You can only add a whole line. Lines will be separated by "#" and values by ";". If values are empty, an empty line will be appended.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.PerformTask">
            <summary>
            Performs the table adding task specified previously by calling AddDatabase()/AddField()/AppendValues()
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.Name">
            <summary>
            Object's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.ProgressSink">
            <summary>
            External notifications sink
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.Run">
            <summary>
            Main execution method
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.IsCancelConfirmed">
            <summary>
            Some tasks suppress cancel even if it was issued by caller. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.FileOperations.Log">
            <summary>
            External logger
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper">
            <summary>
            Represents an IDEA script friendly wrapper over a
            collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new IdeaScriptCollectionWrapper with a
            reference to the collection to wrap.
            </summary>
            <param name="innerCollection">An ICollection reference.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If innerCollection is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.m_innerCollection">
            <summary>
            Holds a reference to the inner collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.ICollection. The System.Array must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- The number of elements 
            in the source System.Collections.ICollection is greater than the available space from index to 
            the end of the destination array.-or-The type of the source System.Collections.ICollection cannot be 
            cast automatically to the type of the destination array.</exception>
            <remarks>The method delegates the call to the inner collection.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.Count">
            <summary>
            Gets the number of elements contained in the System.Collections.ICollection.
            </summary>
            <returns>The number of elements contained in the System.Collections.ICollection.</returns>
            <remarks>The method delegates the call to the inner collection.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ICollection
            is synchronized (thread safe).
            </summary>
            <returns>true if access to the System.Collections.ICollection is synchronized (thread 
            safe); otherwise, false.</returns>
            <remarks>The method delegates the call to the inner collection.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the System.Collections.ICollection.
            </summary>
            <returns>An object that can be used to synchronize access to the System.Collections.ICollection.</returns>
            <remarks>The method delegates the call to the inner collection.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptCollectionWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through 
            the collection.</returns>
            <remarks>The method delegates the call to the inner collection.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEntryWrapper">
            <summary>
            Represents an IDEA script-friendly wrapper over a DictionaryEntry.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEntryWrapper.#ctor(System.Collections.DictionaryEntry)">
            <summary>
            Initializes a new IdeaScriptDictionaryEntryWrapper instance
            with a shallow copy of a dictionary entry.
            </summary>
            <param name="entry">The DictionaryEntry to wrap.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEntryWrapper.Key">
            <summary>
            Gets /sets the key in the key/value pair.
            </summary>
            <returns>The key in the key/value pair.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEntryWrapper.Value">
            <summary>
            Gets the value in the key/value pair.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper">
            <summary>
            Represents an IDEA script friendly wrapper over a
            dictionary enumerator.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.#ctor(System.Collections.IDictionaryEnumerator)">
            <summary>
            Initializes a new IdeaScriptDictionaryEnumeratorWrapper with
            a reference to the enumerator to wrap.
            </summary>
            <param name="enumerator">An IDictionaryEnumerator reference.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If enumerator is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.m_enumerator">
            <summary>
            Holds a reference to the inner enumerator.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <returns>A System.Collections.DictionaryEntry containing both the key and the value 
            of the current dictionary entry.</returns>
            <exception cref="T:System.InvalidOperationException">The System.Collections.IDictionaryEnumerator 
            is positioned before the first entry of the dictionary or after the last entry.</exception>
            <remarks>The method delegates the call to the inner enumerator.
            <para>This property cannot be used from within an IDEA script. IDEA does not seem
            to support structs.</para></remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <returns>The key of the current element of the enumeration.</returns>
            <exception cref="T:System.InvalidOperationException">The System.Collections.IDictionaryEnumerator 
            is positioned before the first entry of the dictionary or after the last entry.</exception>
            <remarks>The method delegates the call to the inner enumerator.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <returns>The value of the current element of the enumeration.</returns>
            <exception cref="T:System.InvalidOperationException">The System.Collections.IDictionaryEnumerator 
            is positioned before the first entry of the dictionary or after the last entry.</exception>
            <remarks>The method delegates the call to the inner enumerator.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>The current element in the collection.</returns>
            <remarks>The method returns an IDEA script-friendly wrapper over the
            current DictionaryEntry of type IdeaScriptDictionaryEntryWrapper.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false 
            if the enumerator has passed the end of the collection.</returns>
            <remarks>The method delegates the call to the inner enumerator.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptDictionaryEnumeratorWrapper.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element 
            in the collection.
            </summary>
            <remarks>The method delegates the call to the inner enumerator.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable">
            <summary>
            Represents an IDEA script-friendly wrapper over a Hashtable.
            It extends the COM support to the Keys and Values collections
            and to the enumerator of DictionaryEntries.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the default initial capacity, load factor, hash code provider, and 
            comparer.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the IdeaScriptHashtable class by copying 
            the elements from the specified dictionary to the new IdeaScriptHashtable
            object. The new IdeaScriptHashtable object has an initial capacity 
            equal to the number of elements copied, and uses the default load factor, 
            hash code provider, and comparer.
            </summary>
            <param name="d">The System.Collections.IDictionary object to copy to a new IdeaScriptHashtable 
            object.</param>
            <exception cref="T:System.ArgumentNullException">d is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the default initial capacity and load factor, and the specified System.Collections.IEqualityComparer 
            object.
            </summary>
            <param name="comparer">The System.Collections.IEqualityComparer object that defines the hash code 
            provider and the comparer to use with the IdeaScriptHashtable object.-or- 
            null to use the default hash code provider and the default comparer. The 
            default hash code provider is each key's implementation of System.Object.GetHashCode() 
            and the default comparer is each key's implementation of System.Object.Equals(System.Object).</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Int32)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the specified initial capacity, and the default load factor, hash code 
            provider, and comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the IdeaScriptHashtable 
            object can initially contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than zero</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Collections.IDictionary,System.Single)">
            <summary>
            Initializes a new instance of the IdeaScriptHashtable class by copying 
            the elements from the specified dictionary to the new IdeaScriptHashtable 
            object. The new IdeaScriptHashtable object has an initial capacity 
            equal to the number of elements copied, and uses the specified load factor, 
            and the default hash code provider and comparer.
            </summary>
            <param name="d">The System.Collections.IDictionary object to copy to a 
            new IdeaScriptHashtable object.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default 
            value which provides the best performance. The result is the maximum ratio 
            of elements to buckets.</param>
            <exception cref="T:System.ArgumentNullException">d is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">loadFactor is less than 0.1.-or- loadFactor is greater than 1.0.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the IdeaScriptHashtable class by copying 
            the elements from the specified dictionary to a new IdeaScriptHashtable 
            object. The new IdeaScriptHashtable object has an initial capacity 
            equal to the number of elements copied, and uses the default load factor 
            and the specified System.Collections.IEqualityComparer object.
            </summary>
            <param name="d">he System.Collections.IDictionary object to copy to a 
            new IdeaScriptHashtable object.</param>
            <param name="equalityComparer">The System.Collections.IEqualityComparer object that defines the hash code 
            provider and the comparer to use with the IdeaScriptHashtable object.-or- 
            null to use the default hash code provider and the default comparer. The 
            default hash code provider is each key's implementation of System.Object.GetHashCode() 
            and the default comparer is each key's implementation of System.Object.Equals(System.Object).</param>
            <exception cref="T:System.ArgumentNullException">d is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the specified initial capacity and load factor, and the default hash 
            code provider and comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the IdeaScriptHashtable 
            object can initially contain.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default 
            value which provides the best performance. The result is the maximum ratio 
            of elements to buckets.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">loadFactor is less than 0.1.-or- loadFactor is greater than 1.0.</exception>
            <exception cref="T:System.ArgumentException">capacity is causing an overflow</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the specified initial capacity and System.Collections.IEqualityComparer, 
            and the default load factor.
            </summary>
            <param name="capacity">The approximate number of elements that the IdeaScriptHashtable 
            object can initially contain.</param>
            <param name="equalityComparer">The System.Collections.IEqualityComparer object that defines the hash code 
            provider and the comparer to use with the IdeaScriptHashtable object.-or- 
            null to use the default hash code provider and the default comparer. The 
            default hash code provider is each key's implementation of System.Object.GetHashCode() 
            and the default comparer is each key's implementation of System.Object.Equals(System.Object).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than zero</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            that is serializable using the specified System.Runtime.Serialization.SerializationInfo 
            and System.Runtime.Serialization.StreamingContext objects.
            </summary>
            <param name="info">A System.Runtime.Serialization.SerializationInfo object containing the information 
            required to serialize the IdeaScriptHashtable object.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the source 
            and destination of the serialized stream associated with the IdeaScriptHashtable.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the IdeaScriptHashtable class by copying 
            the elements from the specified dictionary to the new IdeaScriptHashtable 
            object. The new IdeaScriptHashtable object has an initial capacity 
            equal to the number of elements copied, and uses the specified load factor 
            and System.Collections.IEqualityComparer object.
            </summary>
            <param name="d">The System.Collections.IDictionary object to copy to a new IdeaScriptHashtable
            object.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default 
            value which provides the best performance. The result is the maximum ratio 
            of elements to buckets.</param>
            <param name="equalityComparer">The System.Collections.IEqualityComparer object that defines the hash code 
            provider and the comparer to use with the IdeaScriptHashtable.-or- 
            null to use the default hash code provider and the default comparer. The 
            default hash code provider is each key's implementation of System.Object.GetHashCode() 
            and the default comparer is each key's implementation of System.Object.Equals(System.Object).</param>
            <exception cref="T:System.ArgumentNullException">d is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">loadFactor is less than 0.1.-or- loadFactor is greater than 1.0.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new, empty instance of the IdeaScriptHashtable class 
            using the specified initial capacity, load factor, and System.Collections.IEqualityComparer 
            object.
            </summary>
            <param name="capacity">The approximate number of elements that the IdeaScriptHashtable 
            object can initially contain.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0 that is multiplied by the default 
            value which provides the best performance. The result is the maximum ratio 
            of elements to buckets.</param>
            <param name="equalityComparer">The System.Collections.IEqualityComparer object that defines the hash code 
            provider and the comparer to use with the IdeaScriptHashtable.-or- 
            null to use the default hash code provider and the default comparer. The 
            default hash code provider is each key's implementation of System.Object.GetHashCode() 
            and the default comparer is each key's implementation of System.Object.Equals(System.Object).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than zero.-or- loadFactor is less 
            than 0.1.-or- loadFactor is greater than 1.0.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not 
            found, attempting to get it returns null, and attempting to set it creates 
            a new element using the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the 
            System.Collections.Hashtable is read-only.-or-
            The property is set, key does not exist in the collection, and the System.Collections.Hashtable
            has a fixed size.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface by delegating to the
            base class' GetObjectData.
            </summary>
            <param name="info">A System.Runtime.Serialization.SerializationInfo object containing the 
            information required to serialize the System.Collections.Hashtable.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the 
            source and destination of the serialized stream associated with the System.Collections.Hashtable.</param>
            <exception cref="T:System.ArgumentNullException">If info is null.</exception>
            <exception cref="T:System.InvalidOperationException">The collection was modified.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.Keys">
            <summary>
            Gets an System.Collections.ICollection containing the keys in the IdeaScriptHashtable.
            </summary>
            <returns>Returns a reference to an IDEA script-friendly wrapper over 
            the base class' Keys collection.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.m_keys">
            <summary>
            Holds a reference to an object that wraps Hashtable's
            collection of keys.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.Values">
            <summary>
            Gets an System.Collections.ICollection containing the values in the IdeaScriptHashtable.
            </summary>
            <returns>Returns a reference to an IDEA script-friendly wrapper over 
            the base class' Keys collection.</returns>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.m_values">
            <summary>
            Holds a reference to an object that wraps Hashtable's
            collection of values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.IdeaScriptHashtable.GetEnumeratorForCom">
            <summary>
            Returns an IDEA script-friendly enumerator that iterates through the collection 
            of DictionaryEntries. The enumerator's Current returns IdeaScriptDictionaryWrapper
            objects.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through 
            the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskParameters">
            <summary>
            Represents the parameters used to invoke a macro dialog.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskParameters.TableNames">
            <summary>
            Gets a reference to a case-insensitive dictionary that maps table aliases to table file names. 
            This collection can be used to specifiy the tables that
            the dialog expects.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskParameters.TablesAreOnServer">
            <summary>
            Gets / sets a boolean value indicating whether the tables in TableNames are located on the server.
            </summary>
            <returns>True if the tables are located on the server; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskParameters.Inputs">
            <summary>
            Gets a reference to a case-insensitive dictionary that maps control names to control content values. 
            This collection can be used to specify
            the actual parameters of the dialog.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskResult">
            <summary>
            Represents the result of a macro dialog invocation.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskResult.#ctor(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Initializes a new MacroDialogResult instance.
            </summary>
            <param name="allOK">A boolean value indicating whether 
            the dialog was processed and all parameters were OK.</param>
            <param name="outputs">A reference to a case-insensitive dictionary 
            containing the new values of the parameters.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If outputs is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskResult.AllOK">
            <summary>
            Gets a boolean value indicating whether the dialog was processed and all parameters were OK.
            </summary>
            <returns>True if the dialog was processed and all parameters were OK; otherwise, false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MacroDialogTaskResult.Outputs">
            <summary>
            Gets a reference to a dictionary containing the new values of the parameters.
            </summary>
            <returns>A case-insensitive dictionary that maps control names to control content values
            containing the actual values of the parameters that were set during the invocation.
            An empty collection is returned if the dialog was cancelled.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MissingTag">
            <summary>
            Construction containing missing tag information.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MissingTag.TagName">
            <summary>
            Name of the tag that is missing.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation">
            <summary>
            Represents an Idea equation to be used in EquationBuilder
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation.#ctor">
            <summary>
            Default constructor, sets values to a default state.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation.ColumnName">
            <summary>
            Name of the column the equation will be based on.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation.ListElement">
            <summary>
            Double or single list elements.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation.IsSingleList">
            <summary>
            Flags if we are dealing with a single list or double list.
            </summary>
            <remarks>Default value is 1</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.Equation.IgnoreLeadingZeros">
            <summary>
            Determine the procedure of ignoring leading zeros.(1 using "val", 2 using "regexpr").
            </summary>
            <remarks>Default value is 1</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MinMaxOfField">
            <summary>
            Stores the min and max values of field
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MinMaxOfField.MinNum">
            <summary>
            Min numeric value of a field as string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MinMaxOfField.MaxNum">
            <summary>
            Max numeric value of a field as string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MinMaxOfField.MinDate">
            <summary>
            Min date value of a field as string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.Types.MinMaxOfField.MaxDate">
            <summary>
            Max date value of a field as string.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.VatConstructionRulesValidationResult">
            <summary>
            Defines the result codes of the validation of an EU VAT registration number against the construction rules.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatConstructionRulesValidationResult.RulesFulfilled">
            <summary>
            The number fulfills all construction rules.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatConstructionRulesValidationResult.RulesNotFulfilled">
            <summary>
            The number does not fulfill the construction rules.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatConstructionRulesValidationResult.RulesNotAvailable">
            <summary>
            The construction rules of the registration number's country are not available.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker">
            <summary>
            Implements a task that checks the wellformedness of EU VAT registration numbers.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.#ctor">
            <summary>
            Initializes a new empty VatRegNoChecker.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.Value">
            <summary>
            Gets / sets a string containing the value to be checked.
            </summary>
            <returns>A string.</returns>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CountryCode">
            <summary>
            Gets the language-independent country code of Value.
            </summary>
            <returns>A string containing the language-independent country code of Value or null, if the country code is not available.</returns>
            <remarks>The default value is null. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.Country">
            <summary>
            Gets the language-dependent country name of Value.
            </summary>
            <returns>A string containing the language-dependent country name of Value or null, if the country name is not available.</returns>
            <remarks>The default value is null. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.StructureValidity">
            <summary>
            Gets a boolean that specified whether the structure of Value is valid.
            </summary>
            <returns>True, if Value's structure is valid; otherwise, false. </returns>
            <remarks>The default value is false. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.RuleValidity">
            <summary>
            Gets a VatConstructionRulesValidationResult value that specifies whether Value fulfills the VAT construction rules of its country.
            </summary>
            <returns>
            RulesFulfilled, if Value fulfills all construction rules, 
            RulesNotFulfilled, if Value does not fulfill the construction rules or 
            RulesNotAvailable, if the construction rules of Value's country are not available. </returns>
            <remarks>The default value is RulesNotFulfilled. Call the method Perform before getting the actual value of the property.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PerformTask">
            <summary>
            Executes the task and stores the results in CountryCode, Country, StructureValidity and RuleValidity.
            </summary>
            <remarks>The method resets CountryCode, Country, StructureValidity and RuleValidity to their default state before performing the check.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ResetOutputState">
            <summary>
            Resets the values of the output properties.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult">
            <summary>
            Holds the results of checking a VAT reg. no.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult.CountryCode">
            <summary>
            Gets / sets the country code.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult.Country">
            <summary>
            Gets / sets the country name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult.StructureValidity">
            <summary>
            Gets / sets a boolean that specifies whether the number has a valid structure.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult.RuleValidity">
            <summary>
            Gets / sets a VatConstructionRulesValidationResult that contains the
            validation result.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CheckVatRegNoResult.Empty">
            <summary>
            Holds the 'empty' result.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.RemoveSeparators(System.String)">
            <summary>
            Removes the separators from a VAT reg. no.
            </summary>
            <param name="value">A string containing the VAT reg. no. whose separators 
            will be removed.</param>
            <returns>A string without separators.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.Separators">
            <summary>
            Defines the case insensitive VAT reg. no. separators.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ATStructurePattern">
            <summary>
            Defines the pattern of an AT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ATCountryCode">
            <summary>
            Defines the AT country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BEStructurePattern">
            <summary>
            Defines the structure of a BE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BECountryCode">
            <summary>
            Defines the BE country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DEStructurePattern">
            <summary>
            Defines the structure of a DE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DECountryCode">
            <summary>
            Defines the BE country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DKStructurePattern">
            <summary>
            Defines the structure of a DK VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DKCountryCode">
            <summary>
            Defines the DK country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ELStructurePattern">
            <summary>
            Defines the structure of a EL VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ELCountryCode">
            <summary>
            Defines the EL country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ESStructurePattern">
            <summary>
            Defines the structure of a ES VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ESCountryCode">
            <summary>
            Defines the ES country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FIStructurePattern">
            <summary>
            Defines the structure of a FI VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FICountryCode">
            <summary>
            Defines the FI country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FRStructurePattern">
            <summary>
            Defines the structure of a FR VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FRCountryCode">
            <summary>
            Defines the FR country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBFormat1StructurePattern">
            <summary>
            Defines the structure of a GB VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBFormat2StructurePattern">
            <summary>
            Defines the structure of a GB VAT reg. no.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBFormat1Data">
            <summary>
            Holds metadata for GB Format1 reg. numbers.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.gbFormat1Data">
            <summary>
            Holds metadata for GB Format1 reg. numbers.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBMod97Range">
            <summary>
            Holds the start and end values of a GB MOD97 range.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBMod97R1ReservedRanges">
            <summary>
            Holds the reserved ranges for GB's MOD97(R1).
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBMod97R2ReservedRanges">
            <summary>
            Holds the reserved ranges for GB's MOD97(R2).
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBCountryCode">
            <summary>
            Defines the GB country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV1StructurePattern">
            <summary>
            Defines the structure of a IE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV2StructurePattern">
            <summary>
            Defines the structure of a IE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV3StructurePattern">
            <summary>
            Defines the structure of a IE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IECountryCode">
            <summary>
            Defines the IE country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEControlChars">
            <summary>
            Holds the IE's int to control char data.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ITStructurePattern">
            <summary>
            Defines the structure of a IT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ITCountryCode">
            <summary>
            Defines the IT country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LUStructurePattern">
            <summary>
            Defines the structure of a LU VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LUCountryCode">
            <summary>
            Defines the LU country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.NLStructurePattern">
            <summary>
            Defines the structure of a NL VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.NLCountryCode">
            <summary>
            Defines the NL country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PTStructurePattern">
            <summary>
            Defines the structure of a PT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PTCountryCode">
            <summary>
            Defines the PT country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SEStructurePattern">
            <summary>
            Defines the structure of a SE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SECountryCode">
            <summary>
            Defines the SE country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CYStructurePattern">
            <summary>
            Defines the structure of a CY VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CYCountryCode">
            <summary>
            Defines the CY country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CZStructurePattern">
            <summary>
            Defines the structure of a CZ VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CZCountryCode">
            <summary>
            Defines the CZ country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.EEStructurePattern">
            <summary>
            Defines the structure of a EE VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.EECountryCode">
            <summary>
            Defines the EE country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HUStructurePattern">
            <summary>
            Defines the structure of a HU VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HUCountryCode">
            <summary>
            Defines the HU country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LT1StructurePattern">
            <summary>
            Defines the structure of an LT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LT2StructurePattern">
            <summary>
            Defines the structure of an LT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LTCountryCode">
            <summary>
            Defines the LT country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LVStructurePattern">
            <summary>
            Defines the structure of an LV VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LVCountryCode">
            <summary>
            Defines the LV country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.MTStructurePattern">
            <summary>
            Defines the structure of an MT VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.MTCountryCode">
            <summary>
            Defines the MT country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PLStructurePattern">
            <summary>
            Defines the structure of a PL VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PLCountryCode">
            <summary>
            Defines the PL country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SIStructurePattern">
            <summary>
            Defines the structure of an SI VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SICountryCode">
            <summary>
            Defines the SI country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SKStructurePattern">
            <summary>
            Defines the structure of an SK VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SKCountryCode">
            <summary>
            Defines the SK country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BGStructurePattern">
            <summary>
            Defines the structure of a BG VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BGCountryCode">
            <summary>
            Defines the BG country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ROStructurePattern">
            <summary>
            Defines the structure of a RO VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ROCountryCode">
            <summary>
            Defines the RO country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HRStructurePattern">
            <summary>
            Defines the structure of an HR VAT reg. no.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HRCountryCode">
            <summary>
            Defines the HR country code.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.m_structureRegex">
            <summary>
            A case-insensitive dictionary that keeps track of the Regex objects per country code.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.StructureRegexOptions">
            <summary>
            Gets the RegexOptions for structural checks.
            </summary>
            <returns>A RegexOptions value.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ATStructure">
            <summary>
            Retrieves the AT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BEStructure">
            <summary>
            Retrieves the BE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DEStructure">
            <summary>
            Retrieves the DE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DKStructure">
            <summary>
            Retrieves the DK Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ELStructure">
            <summary>
            Retrieves the EL Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ESStructure">
            <summary>
            Retrieves the ES Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FIStructure">
            <summary>
            Retrieves the FI Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FRStructure">
            <summary>
            Retrieves the FR Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBFormat1Structure">
            <summary>
            Retrieves the GB Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBFormat2Structure">
            <summary>
            Retrieves the GB Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV1Structure">
            <summary>
            Retrieves the IE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV2Structure">
            <summary>
            Retrieves the IE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IEV3Structure">
            <summary>
            Retrieves the IE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ITStructure">
            <summary>
            Retrieves the IT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LUStructure">
            <summary>
            Retrieves the LU Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.NLStructure">
            <summary>
            Retrieves the NL Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PTStructure">
            <summary>
            Retrieves the PT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SEStructure">
            <summary>
            Retrieves the SE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CYStructure">
            <summary>
            Retrieves the CY Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CZStructure">
            <summary>
            Retrieves the CZ Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.EEStructure">
            <summary>
            Retrieves the EE Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HUStructure">
            <summary>
            Retrieves the HU Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LT1Structure">
            <summary>
            Retrieves the LT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LT2Structure">
            <summary>
            Retrieves the LT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LVStructure">
            <summary>
            Retrieves the LV Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.MTStructure">
            <summary>
            Retrieves the MT Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PLStructure">
            <summary>
            Retrieves the PL Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SIStructure">
            <summary>
            Retrieves the SI Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SKStructure">
            <summary>
            Retrieves the SK Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BGStructure">
            <summary>
            Retrieves the BG Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ROStructure">
            <summary>
            Retrieves the RO Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HRStructure">
            <summary>
            Retrieves the HR Regex object.
            </summary>
            <returns>A Regex object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GetStructure(System.String,System.String)">
            <summary>
            Retrieves the registered Regex for the specified country or creates and registers
            a new one with the specified pattern.
            </summary>
            <param name="countryCode">A string containing the country code.</param>
            <param name="structurePattern">A string containing the regex pattern
            to register in case a Regex for the country was not already registered.</param>
            <returns>A Regex object.</returns>
            <remarks>The method adds to m_structureRegex in case the pattern for the
            specified country was not already registered.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ATCheck(System.String)">
            <summary>
            Implements the checker for AT.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BECheck(System.String)">
            <summary>
            Implements the checker for BE.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DECheck(System.String)">
            <summary>
            Implements the checker for DE.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.DKCheck(System.String)">
            <summary>
            Implements the checker for DK.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ELCheck(System.String)">
            <summary>
            Implements the checker for EL.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ESCheck(System.String)">
            <summary>
            Implements the checker for ES.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FICheck(System.String)">
            <summary>
            Implements the checker for FI.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.FRCheck(System.String)">
            <summary>
            Implements the checker for FR.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.GBCheck(System.String)">
            <summary>
            Implements the checker for GB.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.IECheck(System.String)">
            <summary>
            Implements the checker for IE.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ITCheck(System.String)">
            <summary>
            Implements the checker for IT.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LUCheck(System.String)">
            <summary>
            Implements the checker for LU.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.NLCheck(System.String)">
            <summary>
            Implements the checker for NL.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PTCheck(System.String)">
            <summary>
            Implements the checker for PT.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SECheck(System.String)">
            <summary>
            Implements the checker for SE.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CYCheck(System.String)">
            <summary>
            Implements the checker for CY.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.CZCheck(System.String)">
            <summary>
            Implements the checker for CZ.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.EECheck(System.String)">
            <summary>
            Implements the checker for EE.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HUCheck(System.String)">
            <summary>
            Implements the checker for HU.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LTCheck(System.String)">
            <summary>
            Implements the checker for LT.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.LVCheck(System.String)">
            <summary>
            Implements the checker for LV.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.MTCheck(System.String)">
            <summary>
            Implements the checker for MT.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.PLCheck(System.String)">
            <summary>
            Implements the checker for PL.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SICheck(System.String)">
            <summary>
            Implements the checker for SI.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.SKCheck(System.String)">
            <summary>
            Implements the checker for SK.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.BGCheck(System.String)">
            <summary>
            Implements the checker for BG.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.ROCheck(System.String)">
            <summary>
            Implements the checker for RO.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.MacroCommands.VatRegNoChecker.HRCheck(System.String)">
            <summary>
            Implements the checker for HR.
            </summary>
            <param name="value">A string containing the number to check without separators.</param>
            <returns>A CheckVatRegNoResult instance.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper">
            <summary>
            COM-visible collection wrapper
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Types.Automation.CollectionItemWrapper})">
            <summary>
            ctor
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper.Item(System.Int32)">
            <summary>
            Gets the collection item specified by index within the list.
            </summary>
            <param name="index">The index of the item whose data is requested.</param>
            <returns>The item with the index specified.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper.Count">
            <summary>
            Retrieves the length of collection.
            </summary>
            <returns>Length of collection.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionItemWrapper">
            <summary>
            COM-visible collection item wrapper
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.CollectionItemWrapper.#ctor(System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase">
            <summary>
            Container for parameters used when launching SA modules via Automation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.ClientFileName">
            <summary>
            Automation client name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.AuditYear">
            <summary>
            Automation audit year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.AuditMonth">
            <summary>
            Automation audit month
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.IdeaProjectPath">
            <summary>
            Returns IDEA project associated with given Automation parameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.IdeaServerProjectId">
            <summary>
            Returns IDEA Server project ID associated with given Automation parameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.RawRequest">
            <summary>
            Original XML request containing Automation parameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.Items">
            <summary>
            Original Automation arguments as COM-visible collection
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor.
            </summary>
            <param name="automationArguments">External arguments.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="clientFileName">Client file name</param>
            <param name="auditYear">Audit year</param>
            <param name="auditMonth">Audit month</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Automation.AutomationParametersBase.GetParameterizer(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Returns an instance of extended parameterizer
            </summary>
            <param name="location">Exteneded parameterization location</param>
            <returns>Instance of extended parameterizer</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AliasedEntity">
            <summary>
            Simple class representing named ID with alias and flag
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.Alias">
            <summary>
            Entity's alias
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.IsFlagged">
            <summary>
            Entity's flag
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.#ctor(System.Guid,System.String)">
            <summary>
            ctor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="name">Name</param>
            <param name="alias">Alias</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.#ctor(System.Guid,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="alias">Alias</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AliasedEntity.#ctor(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="alias">Alias</param>
            <param name="flagged">Flagged state</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext">
            <summary>
            Execution context for App Start Workflow engine
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow)">
            <summary>
            ctor
            </summary>
            <param name="sink">Notification sink</param>
            <param name="packageDef">App definition</param>
            <param name="workflowDef">App Workflow definition</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.IScriptProgress,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction)">
            <summary>
            ctor
            </summary>
            <param name="sink">Notification sink</param>
            <param name="packageDef">App definition</param>
            <param name="workflowDef">App Workflow definition</param>
            <param name="customActionDef">Currently executed action</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.AppDefinition">
            <summary>
            Current App in whose context App workflow is executed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.AppWorkflowDefinition">
            <summary>
            Currently executed App Workflow
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.CustomActionDefinition">
            <summary>
            Currently executed custom action
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.ParentHwnd">
            <summary>
            Handle of IDEA parent window
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.CancellationToken">
            <summary>
            Token to check action cancel request with
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.DomainContext">
             <summary>
            Initial IDEA's domain context
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.MacroDialogInvoker">
            <summary>
            Entry point for invoking the embedded dialogs from macros
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.IsCancellationRequested">
            <summary>
            Overrides base class implementation. If action cancellation was requested, returns true
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.NotifySink">
            <summary>
            Returns current notification sink
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.Progress(System.Int16)">
            <summary>
            Transfers progress notifications at notification sink. Supposed to be used from within custom actions' code
            </summary>
            <param name="percent">Progress percentage</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.GetServiceById(System.String)">
            <summary>
            Detects the macro request for execution of embedded dialog. Overrides base class implementation.
            </summary>
            <param name="serviceId">Name of required service</param>
            <returns>Required service</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object
            of type serviceType.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceType is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.AppStartWorkflowExecutionContext.IsAppWorkflowExecution">
            <summary>
            Determines if the current task is running in context of App Workflow.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker">
            <summary>
            Invokes App Workflow custom .NET based action on server
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.#ctor(System.Byte[],System.String,System.String,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction)">
            <summary>
            ctor
            </summary>
            <param name="module">Image of the module to invoke method for as byte array</param>
            <param name="className">Name of the class to invoke method for</param>
            <param name="cmdLine">Command Line of invoked method</param>
            <param name="appDef">Current App</param>
            <param name="appWorkflowDef">Current App Workflow</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
            <param name="info">serialized stream</param>
            <param name="context">context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Iserializable implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.IsResultPresent">
            <summary>
            Specifies whether Run() creates execution result. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionInvoker.Invoke(System.Reflection.MethodInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Invoke workin horse
            </summary>
            <param name="mi">Method to invoke</param>
            <param name="instance">Instance on which to invoke method</param>
            <param name="args">Invoke arguments</param>
            <returns>Invoke result</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionLoggingHelper">
            <summary>
            Logger used by execution Context execution of App Workflow custom action (server)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionLoggingHelper.#ctor(Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogger,COMMONIDEACONTROLSLib.IScriptLog)">
            <summary>
            ctor 
            </summary>
            <param name="logger">A reference to the logger. An exception is thrown if this reference is null.</param>
            <param name="log">A reference to the script logger.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor">
            <summary>
            Invokes App Workflow custom script based action on server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.Name">
            <summary>
            Name of runnable instance
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.ProgressSink">
            <summary>
            External notifications' sink
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.Log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.Run">
            <summary>
            Implements the interface method. Working horse method of runnable class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.IsCancelConfirmed">
            <summary>
            Invoker may suppress cancel even if it was issued by caller. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.ServerActionScriptExecutor.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow,Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction)">
            <summary>
            ctor
            </summary>
            <param name="appDef">Current App</param>
            <param name="appWorkflowDef">Current App Workflow</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition">
            <summary>
            Transport class to convey app definition to server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.Alias">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.DescriptionType">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.Description">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.ExternalDescriptions">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.IconType">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.Icon">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.Timestamp">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.CompositeAreas">
            <summary>
            List of areas specifying compatibility with other potential composite parts
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.IdInComposite">
            <summary>
            Unique identifier within a composite
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.GetCombineState(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage)">
            <summary>
            Determines whether building a composite with another entity is allowed or not
            </summary>
            <param name="part">Entity to build a composite with</param>
            <returns>Result of possible combine</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage,System.Boolean@)">
            <summary>
            Builds a composite with another entity
            </summary>
            <param name="part">Entity to build a composite with</param>
            <param name="isNew">TRue if new composite instance was created; false if another part was added to existing composite</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage)">
            <summary>
            ctor
            </summary>
            <param name="appDef">Full App Definition</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppDefinition.SupportsServer">
            <summary>
            Not required; will throw NotImplementedException
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition">
            <summary>
            Transport class to convey app workflow definition to server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.StandardLinksMask">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.Actions">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.ResourcesType">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.Resources">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.DescriptionType">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.Description">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.BaseFilter">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.Filter">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow)">
            <summary>
            ctor
            </summary>
            <param name="appWorkflowDef">Full App Workflow Definition</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.CompositeAreas">
            <summary>
            List of areas specifying compatibility with other potential composite parts
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.IdInComposite">
            <summary>
            Unique identifier within a composite
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.GetCombineState(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow)">
            <summary>
            Determines whether building a composite with another entity is allowed or not
            </summary>
            <param name="part">Entity to build a composite with</param>
            <returns>Result of possible combine</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportAppWorkflowDefinition.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflow,System.Boolean@)">
            <summary>
            Builds a composite with another entity
            </summary>
            <param name="part">Entity to build a composite with</param>
            <param name="isNew">TRue if new composite instance was created; false if another part was added to existing composite</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject">
            <summary>
            Transport class to convey content object definition to server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Id">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.LogicalId">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.LanguageCode">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Name">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Version">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.BuildTimestamp">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.OwnerName">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.CreatorName">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.MinIDEAVersion">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Packages">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Properties">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.ContentFlags">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.Type">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportContentObject.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IContentObject)">
            <summary>
            ctor
            </summary>
            <param name="coDef">Full CO Definition</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction">
            <summary>
            Transport class to convey app definition to server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.ExecutableType">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.ExecutionLocation">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.EntryPoint">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Code">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.BaseCode">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.RelatedTo">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Id">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Index">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Name">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Description">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.AppWorkflow">
            <summary>
            Parent workflow reference
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Type">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.Flags">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.CommandLine">
            <summary>
            Interface implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.AppStartWorkflow.TransportCustomAction.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IAppWorkflowCustomAction)">
            <summary>
            ctor
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment">
            <summary>
            Stares basic path information about application
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.ReadFromFile(System.String)">
            <summary>
            Reads the needed data from give file
            </summary>
            <param name="filePath">Config file path</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.TestMode">
            <summary>
            Sets or gets test mode
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.ProfileFolder">
            <summary>
            Returns user profile folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.AllUsersProfileFolder">
            <summary>
            Returns profile path for all users
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.LogFolder">
            <summary>
            Returns path of log folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.SmartAnalyzerFolderName">
            <summary>
            Returns name of the folder SmartAnalyzer
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.SmartAnalyzerContentDatabaseName">
            <summary>
            Returns name of the SmartAnalyzer content database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.SmartAnalyzerCIRDatabaseName">
            <summary>
            Returns name of the SmartAnalyzer CIR database
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.DefaultEncodingAlgorithm">
            <summary>
            Returns name of the default algorithm used for encoding
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.EncodingAlgorithm">
            <summary>
            Returns name of the work algorithm used for encoding
            </summary>
            <remarks>Setting it to null will make it fall back to default</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.DefaultHashingAlgorithm">
            <summary>
            Returns name of the default algorithm used for hashing
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.HashingAlgorithm">
            <summary>
            Returns name of the work algorithm used for hashing
            </summary>
            <remarks>Setting it to null will make it fall back to default</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.LeaseTimeout">
            <summary>
            Lease timeout for connection pool (in minutes)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicApplicationEnvironment.KeepLargeObjectsInMemory">
            <summary>
            Persist large objects in memory
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1">
            <summary>
            Simple collection of configuration elements
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1.CreateNewElement">
            <summary>
            Creates a new System.Configuration.ConfigurationElement
            </summary>
            <returns>New extension folder's description</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1.Item(System.Int32)">
            <summary>
            Index method
            </summary>
            <param name="index">index to lookup</param>
            <returns>Folder</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1.Item(Audicon.SmartAnalyzer.Common.Types.KnownLocation)">
            <summary>
            Index method
            </summary>
            <param name="type">Folder's type to lookup</param>
            <returns>Folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1.Add(`0)">
            <summary>
            Adds folder to collection
            </summary>
            <param name="item">Folder to add</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BasicConfigCollection`1.Remove(System.String)">
            <summary>
            Removes folder with a given name from collection
            </summary>
            <param name="path">Name of folder to remove</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.BulkExecution.BulkSerializer`1">
            <summary>
            Splits large objects' list and serialize the chunks into files. If required, uploads the files to IDEA Server library
            </summary>
            <typeparam name="ObjectType">Type of objects to serialize</typeparam>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BulkExecution.BulkSerializer`1.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="chunkSize">Size of data chunk to be serialized into file</param>
            <param name="fileNameFormat">Output files' name format. If provided, should look like "XXX{0}.YYY", where {0} is index placeholder </param>
            <param name="outputFolder">Folder to store serialized files. If not provided, temp folder is used</param>
            <param name="libraryName">Name of IDEA Server's library to upload the result files to</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BulkExecution.BulkSerializer`1.Add(`0)">
            <summary>
            Adds object to internal buffer; in case the buffer's volume has reached the chunk size, the buffer gets serilized into file
            </summary>
            <param name="instance">Object to add</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BulkExecution.BulkSerializer`1.Flush(System.Func{System.Exception,System.Boolean})">
            <summary>
            Completes the serialization process. Has to be called after all instabces are added to bulk serializer using Add() method.
            </summary>
            <param name="onUploadError">In case upload to IS library is required and it fails, this callback method gets called. If
            this method returns false, the error is rethrown, otherwise ignored</param>
            <returns>List of result files containing serialized objects</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.BulkExecution.BulkSerializer`1.Consume(System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{`0,System.Boolean,System.Boolean})">
            <summary>
            Process instances serialized within the specified files
            </summary>
            <param name="dataFiles">List of files containing serialized instances</param>
            <param name="libraryName">IDEA Server library where the specified files are stored</param>
            <param name="cbProcess">Callback to be called on extracting and deserializing the instance</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor">
            <summary>
            Provides PI to access metadata of audit folders
            </summary>
            <summary>
            Provides PI to access metadata of server-side audit folders
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.IsLocalFolderLinkedToCir(System.String)">
            <summary>
            Informs whether a link to CIR exists for the specified folder
            </summary>
            <param name="folderPath">Path of the folder; relative path implies folder within current IDEA workin folder</param>
            <returns>True if folder contains link to CIR; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.SetLinkedCirLocally(System.String,System.Guid,System.String)">
            <summary>
            Sets id of CIR linked to the audit folder
            </summary>
            <param name="folderPath">Path of the folder; relative path implies folder within current IDEA workin folder</param>
            <param name="cirId">CIR id to link to; empty id clears the link</param>
            <param name="cirName">CIR name to link to</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.GetLinkedCirLocally(System.String)">
            <summary>
            Retrieves the id of CIR linked to audit folder
            </summary>
            <param name="folderPath">Path of the folder; relative path implies folder within current IDEA workin folder</param>
            <returns>Id of linked CIR; empty value implies no link exists</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.IsLocalAuditFolder(System.String)">
            <summary>
            Check whether the specified local path represents SA audit folder
            </summary>
            <param name="folderPath">Path of the folder; relative path implies folder within current IDEA workin folder</param>
            <returns>True if the specified local path represents SA audit folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.GetAuditFolderData(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType,IdeaServer.Core.Entities.Interfaces.IProject)">
            <summary>
            Get audit folder metadata
            </summary>
            <param name="location">Audit folder location</param>
            <param name="folderPath">Path of the folder; relative path implies folder within current IDEA workin folder</param>
            <param name="dataType">Type of folder data to retrieve</param>
            <param name="isProject">Optional IDEA Server project reference</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.EnumerateAuditFolders(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType,IdeaServer.Core.Entities.Interfaces.IProject)">
            <summary>
            Enumerates audit folders of the given audit project returning them as dictionary grouped by audit area names
            </summary>
            <param name="location">Project location</param>
            <param name="projectPath">Project path; empty value means current IDEA project</param>
            <param name="dataType">Type of metadata details to be retrieved</param>
            <param name="isProject">Optional IDEA Server project reference</param>
            <returns>Collection of metadata objects for project's audit folders</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.EnumerateAuditFoldersFlat(Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.String,Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType,IdeaServer.Core.Entities.Interfaces.IProject)">
            <summary>
            Enumerates audit folders of the given audit project returning them as collection of AuditFolderData objects
            </summary>
            <param name="location">Project location</param>
            <param name="projectPath">Project path; empty value means current IDEA project</param>
            <param name="dataType">Type of metadata details to be retrieved</param>
            <param name="isProject">Optional IDEA Server project reference</param>
            <returns>Collection of metadata objects for project's audit folders</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderAccessor.EnumerateServerAuditFolderEntities(IdeaServer.Core.Entities.Interfaces.IProject,NHibernate.Criterion.ICriterion)">
            <summary>
            Obtains audit folders entities for given IDEA server project
            </summary>
            <param name="project">IDEA server project</param>
            <param name="extraFilter">Additional filter</param>
            <returns>List of audit folders entities for given IDEA server project</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData">
            <summary>
            Holds the metadata of an audit folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.AuditType">
            <summary>
            Audid type.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when input value is not within the list of values of the type AuditType.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.AuditSubject">
            <summary>
            Sets and gets the audit area string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when input is null or empty (after trimming).</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when one character from the list of invalid file name characters is found inside the input.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.FolderType">
            <summary>
            Gets and sets the type of the folder.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when input value is not within the list of values of the type AuditFolderType.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.IsMultiPeriodFolder">
            <summary>
            Determines whether the audit folder represents multiperiod folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.IsVATFolder">
            <summary>
            Determines whether the audit folder represents VAT folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.HasPeriod">
            <summary>
            Returns true if audit folder has period, false otherwise
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Period">
            <summary>
            Retrieves the audit folder periods
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodStartDay">
            <summary>
            Period start day
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodStartMonth">
            <summary>
            Period start Month
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodStartYear">
            <summary>
            Period start Year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodEndDay">
            <summary>
            Period end day
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodEndMonth">
            <summary>
            Period end Month
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodEndYear">
            <summary>
            Period end Year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.HasBusinessYear">
            <summary>
            Returns true if audit folder has period, false otherwise
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYear">
            <summary>
            Retrieves the audit folder associated business year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearStartDay">
            <summary>
            Business year start day
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearStartMonth">
            <summary>
            Business year start Month
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearStartYear">
            <summary>
            Business year start Year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearEndDay">
            <summary>
            Business year end day
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearEndMonth">
            <summary>
            Business year end Month
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearEndYear">
            <summary>
            Business year end Year
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.RelatedFoldersList">
            <summary>
            Getter for related folders' list
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.LinkedCIRId">
            <summary>
            Gets the related CIR id.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.LinkedCIRName">
            <summary>
            Gets the related CIR name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodStart">
            <summary>
            Returns start of the period associated with the folder. Can be null if not set or folder is a multiperiod folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.PeriodEnd">
            <summary>
            Returns end of the period associated with the folder. Can be null if not set or folder is a multiperiod folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetPeriod(System.DateTime,System.DateTime)">
            <summary>
            Sets the period associated with the folder.
            </summary>
            <param name="periodStart">Start date of the period.</param>
            <param name="periodEnd">End date of the period.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when method is called for a multiperiod folder.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when start date is not between minimum allowed date defined in SA and maximum allowed date defined in SA.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when end year is not between start date and maximum allowed date defined in SA.</exception> 
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearStart">
            <summary>
            Returns start of the business year associated with the folder. Can be null if not set or folder is a multiperiod folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.BusinessYearEnd">
            <summary>
            Returns end of the business year associated with the folder. Can be null if not set or folder is a multiperiod folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetBusinessYear(System.DateTime,System.DateTime)">
            <summary>
            Sets the business year associated with the folder.
            </summary>
            <param name="businessYearStart">Start date of the business year.</param>
            <param name="businessYearEnd">End date of the business year.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when method is called for a multiperiod folder.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when start date is not between minimum allowed date defined in SA and maximum allowed date defined in SA.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when end year is not between start date and maximum allowed date defined in SA.</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetMultiPeriod(System.DateTime,System.DateTime)">
            <summary>
            Sets the period associated with the multi-period folder.
            </summary>
            <param name="periodStart">Start date of the period.</param>
            <param name="periodEnd">End date of the period.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when method is called for a multiperiod folder.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when start date is not between minimum allowed date defined in SA and maximum allowed date defined in SA.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when end year is not between start date and maximum allowed date defined in SA.</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetNullPeriod">
            <summary>
            Sets the period data to null.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetNullPeriod2">
            <summary>
            Sets the period data to null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.RelatedFolders">
            <summary>
            Returns the list of associated folders for the current folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.RelatedCIRId">
            <summary>
            Gets the related CIR id.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.RelatedCIRName">
            <summary>
            Gets the related CIR name.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.SetRelatedCIR(System.Nullable{System.Guid},System.String)">
            <summary>
            Sets the related CIR information
            </summary>
            <param name="id">Id of the CIR.</param>
            <param name="name">Name of the CIR</param>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or empty when id is not null or Guid.Empty.</exception>
            <remarks>Name will be set to null in case id is null and empty string when id is Guid.Empty no matter what is the value of the name parameter.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Save(System.String)">
            <summary>
            Saves the object into the given file
            </summary>
            <param name="filePath">Path to the storage file.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Save">
            <summary>
            Saves the object into an xml string.
            </summary>
            <returns>XML representation of the object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Save(System.Xml.Linq.XElement@)">
            <summary>
            Saves the object into an XElement node.
            </summary>
            <param name="node">XElement representation of the object.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Load(System.String,System.Boolean)">
            <summary>
            Loads the object from the given file or string.
            </summary>
            <param name="input">Path to the storage file or in memory xml (first character decides if the input can be trated as a path or as xml - "&lt;").</param>
            <param name="standAlone">If true the file contains only the representation of this object, otherwise the file contains more data (other objects).</param>
            <exception cref="T:System.ArgumentNullException">Thrown when input string is null or empty or filled with whitespaces.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the input file does not exist (in case input is a file path).</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the input file cannot be deserialized properly.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData.Load(System.Xml.Linq.XDocument)">
            <summary>
            Loads the object from the given file.
            </summary>
            <param name="input">XDocument object that stores the data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when input object is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase">
            <summary>
            Base class for audit disk entities
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.m_name">
            <summary>
            Folder's name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.m_location">
            <summary>
            Folder's location
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.m_path">
            <summary>
            Folder's path
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.m_isIdeaManagedRootBased">
            <summary>
            If true, folder is under IDEA managed projects root
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.Name">
            <summary>
            Sets and gets the name of the folder
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when input is null or empty (after trimming).</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when one character from the list of invalid file name characters is found inside the input.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when given length of the input after trimming is greater than 255 characters.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.Path">
            <summary>
            Gets the folder's path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.Location">
            <summary>
            Gets the folder's location
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditDataBase.IsIdeaManagedRootBased">
            <summary>
            If true, folder is under IDEA managed projects root
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor">
            <summary>
            The class AuditFolderDataAccessor implements COM-visible collection of audit folder metadata objects
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor.#ctor(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderData})">
            <summary>
            Public constructor.
            </summary>
            <param name="list">List of audit folder data.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor.Item(System.Int32)">
            <summary>
            Gets the data of the audit folder specified by index within the list.
            </summary>
            <param name="index">The index of the audit folder whose data is requested.</param>
            <returns>The data of the specified audit folder.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor.IndexOf(System.String)">
            <summary>
            Retrives the index of audit folder specified by its name.
            </summary>
            <param name="auditFolderName">The name of the audit folder whose index is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para>
            </param>
            <returns>Index of audit folder, if the list of folder metadata objects contains an audit folder with the specified name; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">If auditFolderName is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor.Count">
            <summary>
            Retrieves the length of the list of folder metadata objects.
            </summary>
            <returns>Length of the list of folder metadata objects.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.AuditFolderDataAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.PercentCompleteEventArgs">
            <summary>
            Represents the arguments passed by the event raised when a process reaches a percent complete marker.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.PercentCompleteEventArgs.Percent">
            <summary>
            Gets or sets the percent.
            </summary>
            <value>
            The percent.
            </value>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents">
            <summary>
            Class that dispatches events raised from CaseAdmin Backup and Restore
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents"/> class.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents.PercentComplete">
            <summary>
            Occurs when a backup or restore operation reaches a completion unit.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents.OnPercentComplete(System.Object,Audicon.SmartAnalyzer.Common.Types.CaseAdmin.PercentCompleteEventArgs)">
            <summary>
            Raises the PercentComplete event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.PercentCompleteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents.IsCancellationRequested">
            <summary>
            Gets whether cancellation has been requested for this token.
            </summary>
            <value>
            <c>true</c> if cancellation has been requested for this token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CaseAdmin.BackupRestoreEvents.ThrowIfCancellationRequested">
            
             <summary>
                 Throws a System.OperationCanceledException if this token has had cancellation
                 requested.
            </summary>
            <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
            <exception cref="T:System.ObjectDisposedException">The associated System.Threading.CancellationTokenSource has been disposed.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase">
            <summary>
            CirAliasAndDatabase holds a datababse name, its identifier and its alias.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.#ctor(System.String,System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes,System.Int64,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes)">
            <summary>
            Initializes a new instance of type CirAliasAndDatabase with the specified alias
            and its associated database name.
            </summary>
            <param name="alias">The alias.</param>
            <param name="databaseName">The fully-qualified name of the database associated to the specified alias.</param>
            <param name="databaseId">The id of the database.</param>
            <param name="databaseRecordCount">The number of records in the database associated
            to the specified alias.</param>
            <param name="databaseAttributes">An ImportedDatabaseAttributes value.</param>
            <param name="aliasAttributes">A DatabaseAliasAttributes value that
            specifies whether the alias has a matching input file and whether
            the item was selected to be imported.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.Alias">
            <summary>
            Gets the alias.
            Same as Item1.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.DatabaseName">
            <summary>
            Gets the fully-qualified name of the database that is associated to Alias.
            Null, if the alias does not have a database.
            Same as Item2.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.DatabaseId">
            <summary>
            Gets the id of the database that is associated to Alias.
            Same as Item3.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.DatabaseAttributes">
            <summary>
            Gets the DatabaseAttributes.
            Same as Item4.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.DatabaseRecordCount">
            <summary>
            Gets the number of records in the database that is associated to Alias.
            Same as Item5.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase.AliasAttributes">
            <summary>
            Gets the AliasAttributes.
            Same as Item6.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData">
            <summary>
            CirDataPreparationData holds the data that is necessary to execute a CIR or CIX.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.CirId">
            <summary>
            Gets / sets the identifier of the CIR.
            </summary>
            <remarks>The default value is Guid.Empty.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.LogicalId">
            <summary>
            Gets / sets the logical id of the CIR.
            </summary>
            <remarks>The default value is Guid.Empty.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.CirName">
            <summary>
            Gets / sets the name of the CIR.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.Version">
            <summary>
            Gets / sets the version of the CIR.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.LangCode">
            <summary>
            Gets / sets the culture name of the routine.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.IsExtension">
            <summary>
            Gets / sets a value that indicates whether the current routine is a CIR or and extension.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.ResourcesType">
            <summary>
            Gets / sets a value of type ResourcesType that specifies the format of Resources.
            </summary>
            <remarks>The default value is 0.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.Resources">
            <summary>
            Gets / sets the bytes of the local resources.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.RoutineImplementationType">
            <summary>
            Gets / sets a value of type RoutineImplementationType that identifies the format of the data preparation executable.
            </summary>
            <remarks>The default value is 0 ('Unspecified').</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.CommandLine">
            <summary>
            Gets / sets the command line to pass the task.
            The command line can use environment variables.
            The execution egine supports the expansion of environment variables.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.ExpandCommandLine">
            <summary>
            Gets / sets a value that specifies if the task requires that the caller expands the environment variables
            in the command line before executing the task.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.Executable">
            <summary>
            Gets / sets the bytes of the data preparation executable.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.ExecutableName">
            <summary>
            Gets / sets the name of the data preparation executable. This value depends on the ImplementationType.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.AliasAndDatabases">
            <summary>
            Gets / sets the array of CirAliasAndDatabases.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData.IsDebugLicenseAvailable">
            <summary>
            Gets / sets a value that specifies whether a debug license is available and valid for the currently running routine.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher">
            <summary>
            The class CirDataPreparationLauncher is used by a CIR data preparation helper macro to launch the actual CIR data preparation
            from within an IDEA Server execution context.
            An instance of this class is passed on to the server as a parameter for the CIR data preparation helper routine and 
            made available to the macro through SmartContext.Parameters.
            The CIR data preparation helper macro extracts this parameter from Smart
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.Execute(System.Object)">
            <summary>
            Executes the data preparation in the specified context.
            </summary>
            <param name="context">The object that specifies the data preparation to execute.
            An exception is thrown if this reference is null or it it is not a TaskExecutionContext.
            An exception is thrown also if the current task is not running on an IDEA Server (that is,
            the value of the property IsServerTask is false).
            </param>
            <returns>A MacroExecutionStatus value.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentException">If context is not a TaskExecutionContext.</exception>
            <exception cref="T:System.InvalidOperationException">If the current task is not running on an IDEA Server.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ExecuteCore(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Executes the data preparation in the specified context.
            </summary>
            <param name="taskExecutionContext">The current TaskExecutionContext.
            The method creates a new execution context on top of this context.
            An exception is thrown if this reference is null.</param>
            <returns>A MacroExecutionStatus value.</returns>
            <exception cref="T:System.ArgumentNullException">If taskExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.CreateContext(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
            Creates and initializes an execution context for the specified CIR.
            </summary>
            <param name="cir">The CIR for which the method creates a data preparation execution context.
            An exception is thrown if this reference is null.
            </param>
            <param name="taskExecutionContext">The current TaskExecutionContext.
            The method creates a new execution context on top of this context.
            An exception is thrown if this reference is null.</param>
            <param name="mainRoutineFiles">The import files collection of the main routine.
            This reference cannot be null.
            </param>
            <param name="disposableResources">A collection to which the method adds objects that must be disposed of when the 
            context is no longer needed. An exception is thrown if this reference is null.</param>
            <returns>A ServerDataPreparationContext object.</returns>
            <exception cref="T:System.ArgumentNullException">If cir is null.</exception>
            <exception cref="T:System.ArgumentNullException">If taskExecutionContext is null.</exception>
            <exception cref="T:System.ArgumentNullException">If mainRoutines is null.</exception>
            <remarks>The method returns a ServerDataPreparationContextForDebuggableRoutine object if 
            cir.IsDebugLicenseAvailable is true.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.InitializeServiceContainer(System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
            Creates a new ServiceContainer for an execution context and adds it to a collection of objects
            that must be disposed of when the execution context is no longer needed.
            </summary>
            <param name="disposableResources">A collection to which the method adds the ServiceContainer 
            to the other objects that must be disposed of when the 
            context is no longer needed. An exception is thrown if this reference is null.</param>
            <returns>A ServiceContainer.</returns>
            <exception cref="T:System.ArgumentNullException">If disposableResources is null.</exception>
            <remarks>The method returns an empty container.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.AddServicesToServiceContainer(System.ComponentModel.Design.ServiceContainer,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext)">
            <summary>
            Adds additional services to a service container of an execution context.
            </summary>
            <param name="target">A ServiceContainer to which the method adds the services.
            An exception is thrown if this reference is null.</param>
            <param name="currentCirDataPreparationData">A CirDataPreparationData reference to the current CIR or CIX.
            An exception is thrown if this reference is null.</param>
            <param name="currentCirExecutionContext">An ICirExecutionContext reference
            to the current CIR execution context.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If target, currentCirDataPreparationData or 
            currentCirExecutionContext are null.</exception>
            <remarks>The method does not add any services to the container.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.VerifyDataPreparationData(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData[])">
            <summary>
            Verifies an array of CirDataPreparationData elements.
            Throws InvalidOperation exception, if the data is not valid.
            </summary>
            <param name="dataPreparationData">The array to verify.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.DataPreparationData">
            <summary>
            Gets / sets the CirDataPreparationData.
            The first element in the array must refer to the main CIR, the rest to its extensions 
            (in the increasing order of their index).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.DataPreparationOnlyMode">
            <summary>
            Gets a value that indicates whether the CIR is being executed only to prepare data.
            </summary>
            <remarks>DataPreparationOnlyMode is true if and only if the CIR is being executed to prepare data that was 
            imported in another session.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.DataReturnMode">
            <summary>
            Gets a value that indicates whether the CIR's data import is based on the response to a data request.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.RequestedTableGroupIdentifiers">
            <summary>
            Gets or sets the set of requested table group identifiers.
            </summary>
            <remarks>
            <para>If not null, the set must be serializable.</para>
            <para>The default value is null.</para>
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable data for the current CIR execution.
            CirExecutor exposes this object to the CIR macros via the execution context.
            </summary>
            <remarks>
            <para>If not null, the dictionary must be serializable.</para>
            <para>The default value is a Hashtable that uses the comparer
            StringComparer.OrdinalIgnoreCase.</para>
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextUserData">
            <summary>
            A dictionary that can be used to store user-definable data for the current CIR execution.
            In case the caller does not supply a non-null value for this property, the getter creates
            a Hashtable that uses the following comparer: StringComparer.OrdinalIgnoreCase.
            The dictionary must be accessible from within IDEA's ScriptEngine.
            Default: null.
            Init: On demand (see ContextUserData).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextTempUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable non-persistent data for the current CIR execution.
            CirExecutor exposes this object to the CIR macros via the execution context.
            </summary>
            <remarks>
            <para>If not null, the dictionary must be serializable.</para>
            <para>The default value is a Hashtable that uses the comparer
            StringComparer.OrdinalIgnoreCase.</para>
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextTempUserData">
            <summary>
            A dictionary that can be used to store user-definable non-persistent data for the current CIR execution.
            In case the caller does not supply a non-null value for this property, the getter creates
            a Hashtable that uses the following comparer: StringComparer.OrdinalIgnoreCase.
            The dictionary must be accessible from within IDEA's ScriptEngine.
            Default: null.
            Init: On demand (see ContextTempUserData).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextSharedUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable persistent data for the execution of the current CIR and
            its active extensions.
            CirExecutor exposes this object to the CIR macros via the execution context's SharedUserData property.
            </summary>
            <remarks>
            <para>If not null, the dictionary must be serializable.</para>
            <para>The default value is an IdeaScriptHashtable that uses the comparer
            StringComparer.OrdinalIgnoreCase.</para>
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextSharedUserData">
            <summary>
            A dictionary that can be used to store user-definable persistent data for the execution of the current CIR and its
            active extensions.
            In case the caller does not supply a non-null value for this property, the getter creates
            an IdeaScriptHashtable that uses the following comparer: StringComparer.OrdinalIgnoreCase.
            The dictionary must be accessible from within IDEA's ScriptEngine.
            Default: null.
            Init: On demand (see ContextSharedUserData).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextSharedTempUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable non-persistent data for the execution of the current CIR and
            its active extensions.
            CirExecutor exposes this object to the CIR macros via the execution context's SharedTempUserData property.
            </summary>
            <remarks>
            <para>If not null, the dictionary must be serializable.</para>
            <para>The default value is an IdeaScriptHashtable that uses the comparer
            StringComparer.OrdinalIgnoreCase.</para>
            </remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextSharedTempUserData">
            <summary>
            A dictionary that can be used to store user-definable non-persistent data for the execution of the current CIR and its
            active extensions.
            In case the caller does not supply a non-null value for this property, the getter creates
            an IdeaScriptHashtable that uses the following comparer: StringComparer.OrdinalIgnoreCase.
            The dictionary must be accessible from within IDEA's ScriptEngine.
            Default: null.
            Init: On demand (see ContextSharedTempUserData).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextCixUserData(System.Guid)">
            <summary>
            Gets a reference to the specified CIX's dictionary that can be used to store private user-definable persistent data for the
            execution of the extension's subtasks.
            </summary>
            <param name="cixId">A Guid that holds the id of the CIX.
            If a dictionary is not already available for the specified CIX, the method creates a new one and adds it to m_contextSharedUserData.
            </param>
            <returns>An IdeaScriptHashtable that was initialized with StringComparer.OrdinalIgnoreCase.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextCixUserDataMap">
            <summary>
            Gets / sets a reference to a dictionary that maps CIX ids to the private persistent CIX UserData dictionaries.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextCixUserDataMap">
            <summary>
            A dictionary that maps CIX ids to the private persistent CIX UserData dictionaries.
            The hashtable use the following comparer: StringComparer.OrdinalIgnoreCase.
            Default: null.
            Init: On demand (see ContextCixUserDataMap).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextCixTempUserData(System.Guid)">
            <summary>
            Gets a reference to the specified CIX's dictionary that can be used to store private user-definable non-persistent data for the
            execution of the extension's subtasks.
            </summary>
            <param name="cixId">A Guid that holds the id of the CIX.
            If a dictionary is not already available for the specified CIX, the method creates a new one and adds it to m_contextSharedTempUserData.
            </param>
            <returns>An IdeaScriptHashtable that was initialized with StringComparer.OrdinalIgnoreCase.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ContextCixTempUserDataMap">
            <summary>
            Gets / sets a reference to a dictionary that maps CIX ids to the private non-persistent CIX UserData dictionaries.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_contextCixTempUserDataMap">
            <summary>
            A dictionary that maps CIX ids to the private non-persistent CIX UserData dictionaries.
            The hashtable use the following comparer: StringComparer.OrdinalIgnoreCase.
            Default: null.
            Init: On demand (see ContextCixTempUserDataMap).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.GetNewCaseInsensitiveContextUserData">
            <summary>
            Gets a new IdeaScriptHashtable for storing ContextUserData.
            </summary>
            <returns>A new IdeaScriptHashtable that uses the StringComparer.OrdinalIgnoreCase comparer.</returns>
            <remarks>The IdeaScriptHashtable must be accessible from within IDEA's ScriptEngine.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.MessagesCollector">
            <summary>
            Gets a reference to the collection of messages that are to be displayed in the message window.
            The collection is populated by the current data preparation subtask.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_messageGroupContainer">
            <summary>
            Holds a reference to a collector of messages.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.TestResultFiles">
            <summary>
            Gets a reference to the collection of test result files.
            The collection is populated by the current data preparation subtask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.AccountNumberLength">
            <summary>
            Gets / sets the account number length.
            The default value is 0.
            </summary>
            <remarks>The subtasks of a CIR share the value of this property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.CirOfficer">
            <summary>
            Gets the name of the person who should be contacted in case specific tables of a CIR have less or more columns as expected.
            The default value is null.
            </summary>
            <remarks>This value is part of the global SmartAnalyzer configuration file.
            The subtasks of a CIR share the value of this property.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.HelpFilesDirectory">
            <summary>
            Gets the path where CIR help files are stored.
            The path should have a backslash at the end.
            It will be used within dialog macros.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_testResultFiles">
            <summary>
            Holds a reference to the collection of test result files.
            Default: null
            Init. On demand (see TestResultFiles).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.Errors">
            <summary>
            Gets a reference to the collection of errors that were reported by the data preparation subtask.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_errors">
            <summary>
            Holds a reference to a list of CIR errors.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.AbortImport">
            <summary>
            Gets a value that indicates whether the subtask has aborted the import.
            </summary>
            <remarks>Default value: false</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ErrorMessage">
            <summary>
            Gets the message describing the error, in case the execution has failed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ErrorStackTrace">
            <summary>
            Gets the stack trace of the exception, in case the execution has failed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ExecutionStatus">
            <summary>
            Gets a value that specifies whether the task succeeded or not.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.IntellectualPropertyOptions">
            <summary>
            Gets / sets the IntellectualPropertyOptions.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_intellectualPropertyOptions">
            <summary>
            A new, optional field, that holds the IntellectualPropertyOptions value.
            Default value: None.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.ServiceArguments">
            <summary>
            Gets a reference to a dictionary that uses StringComparer.OrdinalIgnoreCase to compare keys
            and that can store arguments for the services provided by the server execution context.
            </summary>
            <returns>An IDictionary&lt;string, object&gt;.</returns>
            <remarks>The caller should store only serializable service arguments in this container.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.m_serviceArguments">
            <summary>
            A new, optional field, that holds a case-insensitive dictionary
            that contains arguments for the services provided by the server execution context.
            Default value: null.
            Init.: see property ServiceArguments.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.CreateResourceSetOverRoutineStrings(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData)">
            <summary>
            Creates a new ResourceSet over the stream that contains the string table in a given CirDataPreparationData object.
            </summary>
            <param name="value">The CirDataPreparationData object whose string table will be loaded.
            An exception is thrown if this reference is null.
            </param>
            <returns>A new ResourceSet instance that provides access to the string table.
            <para>If the object does not have a string table, the function returns an empty ResourceSet.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
            <exception cref="T:System.InvalidOperationException">If the object's string table cannot be loaded.</exception>
            <exception cref="T:System.FormatException">If the type of resources is unknown.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes of any non-null elements of the specified collection.
            </summary>
            <param name="items">The collection to process.
            The method does nothing if this reference is null.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.SimpleLoggerOverRoutineLogging">
            <summary>
            Implements a simple logger that forwards the calls to an IRoutineLogging object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.SimpleLoggerOverRoutineLogging.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Logging.IRoutineLogging)">
            <summary>
            Initializes a new SimpleLoggerOverRoutineLogging instance with a logger to which the object
            delegates the calls to Log.
            </summary>
            <param name="innerLogger">A reference to the logger to which the object delegates the calls to Log.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If innerLogger is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.SimpleLoggerOverRoutineLogging.m_innerLogger">
            <summary>
            A reference to the logger to which the object delegates the calls to Log.
            Init: .ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.SimpleLoggerOverRoutineLogging.Log(Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry)">
            <summary>
            Handles a log entry.
            </summary>
            <param name="logEntry">The log entry to handle. An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If logEntry is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.InitializeContext(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData,Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogger,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
            Initialize the specified context for the execution of a CIR.
            See the Remarks section for the list of context-related properties set by this method.
            </summary>
            <param name="context">The context to initialize. An exception is thrown if this reference is null.</param>
            <param name="cir">The CIR for which the context is being initialized.
            An exception is thrown if this reference is null.</param>
            <param name="logger">An optional logger to be used passed on to the logging methods of the context.
            If null, a SimpleLogEntriesCollector will be used.</param>
            <param name="disposableResources">A collection to which the method adds objects that must be disposed of (e.g., the 
            ResourceSet that the method creates for the logger and the Strings accessor) when the context is no longer needed.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If cir is null.</exception>
            <exception cref="T:System.ArgumentNullException">If disposableResources is null.</exception>
            <remarks>The method initializes the following properties:
            TestName (cir.Name), TestVersion (cir.Version), Strings, TestId (cir.CirId) and Log.
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.CreateImportFiles(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData)">
            <summary>
            Creates a SimpleImportFiles collection over the files of the specified CIR.
            </summary>
            <param name="cir">A CirDataPreparation object for which to create a SimpleImportFiles collection.
            An exception is thrown if this reference is null.
            </param>
            <returns>An ISimpleImportFiles object.</returns>
            <exception cref="T:System.ArgumentNullException">If cir is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationLauncher.RunDataPreparationRoutine(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirDataPreparationData,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Executes the data preparation routine of the specified CIR in the specified context.
            </summary>
            <param name="task">A task object that holds the macro to execute.
            An exception is thrown if this reference is null.</param>
            <param name="context">The context object that will pe passed on to the macro.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorData">
            <summary>
            CirErrorData contains data that describes an error.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorData.Description">
            <summary>
            Gets / sets the description of the error.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorData.Number">
            <summary>
            Gets / sets the error number.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorData.Source">
            <summary>
            Gets / sets the error source.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList">
            <summary>
            CirErrorList represents a list of errors that can be used by a CIR subtask to report errors.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.Errors">
            <summary>
            Gets a reference to the list of errors.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.m_errors">
            <summary>
            Holds a reference to the list of errors.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.GetEnumerator">
            <summary>
            Returns an enumerator for the list of values.
            </summary>
            <returns>An IEnumerator for the list of values.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.Count">
            <summary>
            Gets the number of errors in the list.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.Add(System.Int32,System.String,System.String)">
            <summary>
            Adds a new error at the end of the list.
            </summary>
            <param name="Number">The error number.</param>
            <param name="Description">The error description. Can be null.</param>
            <param name="Source">The error source. Can be null.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.Item(System.Int32)">
            <summary>
            Gets the value at the specified position.
            </summary>
            <param name="Index">The zero-based index to read.</param>
            <returns>The value at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If Index is outside the allowable range of values.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirErrorList.Clear">
            <summary>
            Removes all values from the list.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase">
            <summary>
            An abstract base class for all CIR server execution contexts.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor">
            <summary>
            Initializes an instance of type CirServerTaskExecutionContextBase with default values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor(System.IServiceProvider)">
            <summary>
            Initializes an instance of type CirServerTaskExecutionContextBase with an optional
            IServiceProvider reference.
            </summary>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes an instance of type CirServerTaskExecutionContextBase with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor(COMMONIDEACONTROLSLib.ITaskProgress,System.IServiceProvider)">
            <summary>
            Initializes an instance of type CirServerTaskExecutionContextBase with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Initializes a new instance of type CirServerTaskExecutionContextBase on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink, IsCancellationRequested and TestResultFiles implementations.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.IServiceProvider)">
            <summary>
            Initializes a new instance of type CirServerTaskExecutionContextBase on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink, IsCancellationRequested and TestResultFiles implementations.
            An exception is thrown if this reference is null.</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.Initialize">
            <summary>
            Initializes the new instance.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.InnerExecutionContext">
            <summary>
            Gets a reference to the optional inner execution context on top of which the current context is operating.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_innerExecutionContext">
            <summary>
            Holds a reference to the execution context on top of which the current context is operating.
            If not null, the current context uses the inner context's ScriptProgressSink and IsCancellationRequested 
            implementations.
            Init: see .ctor(TaskExecutionContext)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.VerifyNotNull(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.String)">
            <summary>
            Verifies that the specified TaskExecutionContext is not null.
            </summary>
            <param name="value">The TaskExecutionContext to verify.
            An exception is thrown if this reference is null.</param>
            <param name="parameterName">The name of the parameter to use in case value is null.
            If paramName is null, the method uses "value" as the name of the parameter.</param>
            <returns>The specified TaskExecutionContext object.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.IsCancellationRequested">
            <summary>
            Determines if the current routine is to be canceled.
            </summary>
            <remarks>The property uses the inner execution context to determine if the routine is to be cancelled, if one was specified, 
            otherwise the base class.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.TestResultFiles">
            <summary>
            Gets a reference to the object that manages a collection of test result files.
            </summary>
            <remarks>The property uses the caller-supplied object, if not null, otherwise it uses the inner execution context to get the collection, if one was specified, 
            otherwise the base class.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.UserCulture">
            <summary>
            Gets a reference to the current user's locale on the client machine.
            </summary>
            <remarks>The property uses the inner execution context to retrieve / set the value of the property, if one was specified, 
            otherwise the base class.</remarks>
            <returns>A CultureInfo object that represents the user's locale on the client machine, or null, if one was not specified.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.SetTestResultFiles(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFiles)">
            <summary>
            Allows the caller to provide its own ITestResultFiles object.
            </summary>
            <param name="testResultFiles">The ITestResultFiles object.
            If null, TestResultFiles returns either the object of the inner context or that of the base class.</param>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_testResultFiles">
            <summary>
            Holds a reference to a caller-supplied ITestResultFiles object.
            If not null, TestResultFiles returns this reference.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.AbortImport">
            <summary>
            Gets / sets a value that instructs the importer to abort the task.
            </summary>
            <remarks>Default value: false</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.ImportFiles">
            <summary>
            Gets a reference to the collection of import files of the current CIR or extension.
            </summary>
            <remarks>Default value: null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.Errors">
            <summary>
            Gets a reference to the collection of errors.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_errors">
            <summary>
            Holds a reference to the collection of errors.
            Default null.
            Init: On demand (see Errors' getter) or by setting Errors.
            If Errors' getter initializes m_errors, then it uses an instance of type CirErrorList.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.UserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable data for the current CIR execution. 
            </summary>
            <remarks>The IDictionary must be accessible from within IDEA's ScriptEngine.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_userData">
            <summary>
            An IDictionary that can be used to store user-definable data for the current CIR execution.
            Default: null.
            Init: On demand (see UserData's getter) or by setting UserData.
            If UserData's getter initializes m_userData, then it uses an IdeaScriptHashtable with the comparer StringComparer.OrdinalIgnoreCase.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.TempUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable non-persistent data for the current CIR's or 
            extension's subtasks. 
            </summary>
            <remarks>The IDictionary must be accessible from within IDEA's ScriptEngine.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_tempUserData">
            <summary>
            An IDictionary that can be used to store user-definable data for the current CIR's or 
            extension's subtasks. 
            Default: null.
            Init: On demand (see TempUserData's getter) or by setting UserData.
            If TempUserData's getter initializes m_tempUserData, then it uses an IdeaScriptHashtable with the comparer StringComparer.OrdinalIgnoreCase.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.SharedUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable persistent data for the current CIR and all its
            active extensions.
            </summary>
            <remarks>The IDictionary must be accessible from within IDEA's ScriptEngine.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_sharedUserData">
            <summary>
            An IDictioanry that can be used to store user-definable persistent data for the current CIR and all its
            active extensions.
            Init: On demand (see SharedUserData's getter) or by setting UserData.
            If SharedUserData's getter initializes m_sharedUserData, then it uses an IdeaScriptHashtable with the comparer StringComparer.OrdinalIgnoreCase.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.SharedTempUserData">
            <summary>
            Gets / sets a reference to a dictionary that can be used to store user-definable non-persistent data for the current CIR and all its
            active extensions.
            </summary>
            <remarks>The IDictionary must be accessible from within IDEA's ScriptEngine.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_sharedTempUserData">
            <summary>
            An IDictioanry that can be used to store user-definable non-persistent data for the current CIR and all its
            active extensions.
            Init: On demand (see SharedTempUserData's getter) or by setting UserData.
            If SharedTempUserData's getter initializes m_sharedUserTempData, then it uses an IdeaScriptHashtable with the comparer StringComparer.OrdinalIgnoreCase.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.NewCaseInsensitiveIdeaScriptHashtable">
            <summary>
            Creates a new IdeaScriptHashtable and initializes it with the StringComparer.OrdinalIgnoreCase
            comparer.
            </summary>
            <returns>A new IdeaScriptHashtable instance initialized with the StringComparer.OrdinalIgnoreCase
            comparer.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.Messages">
            <summary>
            Gets a reference to the collection of messages that are to be displayed in the message window.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.m_messagesCollector">
            <summary>
            Holds a reference to a messages collector.
            Default: null.
            Init: On demand (see Messages' getter) ot by setting Messages.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.AccountNumberLength">
            <summary>
            Gets or sets the length for account number columns. The default value is 0.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.CirOfficer">
            <summary>
            Gets the name of the person who should be contacted in case specific tables of a CIR have less or more columns as expected.
            The default value is null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.HelpFilesDirectory">
            <summary>
            Gets the path where CIR help files are stored.
            The path should have a backslash at the end.
            It will be used within dialog macros.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.IsServerImportTask">
            <summary>
            Gets a value that indicates whether the IDEA databases are located on the server.
            </summary>
            <remarks>This method always returns 'true'.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.ParentWindowHandle">
            <summary>
            Gets the handle of the parent window.
            </summary>
            <remarks>This method always returns Zero.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.ParentWindowHandle32">
            <summary>
            Gets the handle of the parent window.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.ParentWindowHandleAsString">
            <summary>
            Gets the handle of the parent window as a string formatted using the InvariantCulture.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.CommandLine">
            <summary>
            Gets the command line (expanded, if the task has requested the expansion of environment variables) that was assigned to the task.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.DataPreparationOnlyMode">
            <summary>
            Gets a value that indicates whether the CIR is being executed only to prepare data.
            </summary>
            <remarks>DataPreparationOnlyMode is true if and only if the CIR is being executed to prepare data that was 
            imported in another session.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.SubtaskType">
            <summary>
            Gets a value that specifies the type of the current CIR subtask.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.GetSubtaskType">
            <summary>
            Gets the type of the current CIR subtask.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.HostSynchronizationContext">
            <summary>
            Gets the SynchronizationContext of the host.
            </summary>
            <remarks>The HostSynchronizationContext is used by the executor or by a 
            CIR subtask to implement modal dialog boxes.
            <para>This reference can be null.
            For a server task this reference is always null.
            </para>
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.DataReturnMode">
            <summary>
            Gets a value that indicates whether the CIR's data import is based on the response to a data request.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.GetRequestedTableGroupIdentifiers">
            <summary>
            If DataReturnMode is true, the method gets an array with the identifiers of the requested table groups; otherwise
            the method returns an empty array.
            </summary>
            <returns>An array containing the identifiers of the requested table groups. 
            The method returns an empty array if DataReturnMode is false.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.RequestedTableGroupIdentifiers">
            <summary>
            Gets / sets a reference to the set containing the identifiers of the requested table groups.
            </summary>
            <remarks>The default value is null.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.GetServiceById(System.String)">
            <summary>
            Gets the service object with the specified id.
            </summary>
            <param name="serviceId">A string containing the id of the service to get.</param>
            <returns>If found, a reference to the service with the specified id; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirServerTaskExecutionContextBase.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object
            of type serviceType.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceType is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType">
            <summary>
            This enumeration lists all the subtasks of a CIR.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType.Unspecified">
            <summary>
            The type of the subtask was not specified.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType.PreliminaryTask">
            <summary>
            The subtask is a preliminary task (alias pre-macro).
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType.PartialImportTask">
            <summary>
            The subtask is a partial import task.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType.DialogTask">
            <summary>
            The subtask is a dialog task.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirSubtaskType.DataPreparationTask">
            <summary>
            The subtask is a data preparation task.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettings">
            <summary>
            Implements the ICirWizardPageSettings interface.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettings.#ctor(System.String)">
            <summary>
            Initializes a new CirWizardPageSettings instance for a 
            page with the specified id.
            </summary>
            <param name="pageId">A string containing the page id.
            An exception is thrown if this reference is null.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettings.Inputs">
            <summary>
            Gets a reference to a case-insensitive dictionary that can be used to store the actual parameter values
            of the page.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettings.PageId">
            <summary>
            Gets the identifier of the page.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettings.Enabled">
            <summary>
            Gets / sets a boolean that specifies whether the page is enabled or not.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService">
            <summary>
            Implements a case-insensitive (OrdinalIgnoreCase) ICirWizardPageSettingsService service.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService.#ctor">
            <summary>
            Initializes a CirWizardPageSettingsService that exposes no page settings objects.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirWizardPageSettings})">
            <summary>
            Initializes a new CirWizardPageSettingsService with a sequence that specifies
            the page settings objects to be exposed.
            </summary>
            <param name="pages">A reference to the sequence of page settings
            to be exposed.
            <para>
            An exception is thrown if this reference is null.
            </para>
            <para>
            An exception is thrown if the sequence contains objects with the same PageId.
            The object uses StringComparer.OrdinalIgnoreCase to compare page ids.
            </para></param>
            <exception cref="T:System.ArgumentNullException">If pages is null.</exception>
            <exception cref="T:System.ArgumentException">If the sequence contains nulls or
            if the sequence contains items with the same PageId.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService.DuplicateIdMessage(System.String)">
            <summary>
            Returns a string similar to 'The sequence cannot contain items with the same id (id).'.
            </summary>
            <param name="id">The duplicate id.</param>
            <returns>A string.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService.Pages">
            <summary>
            Gets a reference to the collection of pages.
            </summary>
            <remarks>If the collection of pages is empty, the value of this property may be null.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirWizardPageSettingsService.GetCirWizardPageSettings(System.String)">
            <summary>
            Gets the settings object of the CIR wizard page with the specified id.
            </summary>
            <param name="pageId">A string containing the id of the CIR wizard page
            whose settings object is requested.</param>
            <returns>If found, an ICirWizardPageSettings reference to the specified CIR wizard page settings object; 
            otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">If pageId is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAndFolderTuple">
            <summary>
            DatabaseAndFolderPair is a pair of database and folder names.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAndFolderTuple.TaskId">
            <summary>
            Gets / sets the id of the task.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAndFolderTuple.DatabaseName">
            <summary>
            Gets / sets the name of the database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAndFolderTuple.FolderName">
            <summary>
            Gets / sets the name of the folder.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject">
            <summary>
            ImportedDatabaseDataObject holds information about an imported database.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.#ctor(System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes,System.Int64)">
            <summary>
            Initializes a new ImportedDatabaseDataObject for the database.
            </summary>
            <param name="importedFileName">The fully-qualified name of the database.
            This value can be null.</param>
            <param name="importedDatabaseId">The id of the database.
            Guid.Empty if the alias does not have an associated database.</param>
            <param name="databaseAttributes">An ImportedDatabaseAttributes value that
            specifies whether the database has bad data.</param>
            <param name="importedDatabaseRecordCount">A value that specifies the number of records
            in the database at the time it was imported.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.#ctor(System.String,System.Guid,System.String,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes,System.Int64)">
            <summary>
            Initializes a new ImportedDatabaseDataObject for the database.
            </summary>
            <param name="importedFileName">The fully-qualified name of the database.
            This value can be null.</param>
            <param name="importedDatabaseId">The id of the database.
            Guid.Empty if the alias does not have an associated database.</param>
            <param name="badDataFileName">The fully-qualified name of the bad-data file
            that was generated during the import of the database or null.</param>
            <param name="databaseAttributes">An ImportedDatabaseAttributes value that
            specifies whether the database has bad data.</param>
            <param name="importedDatabaseRecordCount">A value that specifies the number of records
            in the database at the time it was imported.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DatabaseAttributes">
            <summary>
            Gets the database attributes.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.ImportedFileName">
            <summary>
            Gets the fully-qualified name of the imported database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.BadDataFileName">
            <summary>
            Gets the fully-qualified name of the bad-data file that
            was generated during the immport of the database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DatabaseId">
            <summary>
            Gets the identifier of the imported database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DatabaseIdAsString">
            <summary>
            Gets the string representation (32 digits separated by hyphens and enclosed in braces) of the 
            identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns the string representation of Guid.Empty.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DatabaseHasBadData">
            <summary>
            Gets a value that indicates whether bad data was found during the import of the database ImportedFileName.
            The default value is 'false'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DatabaseRecordCount">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            The default value is 0.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.SupportsMovingDatabaseToFolder">
            <summary>
            Gets a value that specifies whether the current execution context allows moving the database to another folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.MoveDatabaseToFolder(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Moves the database to the specified folder of the current project including
            the bad-data file that was generated during the import if available.
            </summary>
            <param name="context">A ICirExecutionContext reference to the current
            execution context.
            An exception is thrown if this reference is null.
            <para>An exception is thrown if the current execution context does
            not support moving the database, that is if SupportsMovingDatabaseToFolder is false.</para>
            <para>Currently only IPartialImportContext supports this operation.</para>
            </param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the method does nothing.
            If a database with the same name already exists in the destination folder,
            the method tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException">
            If the destination project subfolder already contained a database with the same name and 
            the method could not move the database after
            retrying the operation a predefined number of times.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the ImportedFileName is not null or empty
            and the file does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
            <remarks>If the current object's ImportedFileName is null or empty, the method does nothing.
            If the database is moved, the method updates ImportedFileName to reflect the changes.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.CheckTargetFolder(System.String)">
            <summary>
            Validates the target folder argument.
            </summary>
            <param name="folder">The target folder.</param>
            <returns>The trimmed target folder if valid.</returns>
            <exception cref="T:System.ArgumentNullException">If folder is not valid.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.MoveDatabaseToFolder(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Moves a database to a folder and returns the new fully-qualified name of the database.
            </summary>
            <param name="context">A ICirExecutionContext reference to the current
            execution context.
            An exception is thrown if this reference is null.
            <para>An exception is thrown if the current execution context does
            not support moving the database, that is if SupportsMovingDatabaseToFolder is false.</para>
            <para>Currently only IPartialImportContext supports this operation.</para></param>
            <param name="importedFileName">The database to move. If null or empty, the method does nothing.</param>
            <param name="importedFileId">The id of the imported file or null if not available. The method
            uses it only when throwing an exception.</param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the method does nothing.
            If a database with the same name already exists in the destination folder,
            the method tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para></param>
            <returns>The new fully-qualified name of the database or the initial importedFileName if null or empty.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException">
            If the destination project subfolder already contained a database with the same name and 
            the method could not move the database after
            retrying the operation a predefined number of times.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the ImportedFileName is not null or empty
            and the file does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.GetDatabaseAlreadyExistsException">
            <summary>
            Returns a new DuplicateEntityNameException object for the current
            database id and name.
            </summary>
            <returns>A DuplicateEntityNameException.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.GetDatabaseAlreadyExistsException(System.String,System.String)">
            <summary>
            Returns a new DuplicateEntityNameException object for the specified
            database id and name.
            </summary>
            <param name="databaseId">The id of the database</param>
            <param name="databaseName">The name of the database</param>
            <returns>A DuplicateEntityNameException.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.FormatServerDatabaseNotFoundMessage(System.String)">
            <summary>
            Returns a string similar to 'The IDEA database databaseName was not found in the current server project.'.
            </summary>
            <param name="databaseName">The name of the database that was not found.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.FormatLocalDatabaseNotFoundMessage(System.String)">
            <summary>
            Returns a string similar to 'The IDEA database databaseName was not found in the current project.'.
            </summary>
            <param name="databaseName">The name of the database that was not found.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.FormatDirectoryNotFoundMessage(System.String)">
            <summary>
            Returns a string similar to 'The directory folder does not exist.'.
            </summary>
            <param name="folder">The name of the directory that was not found.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.SubmitTaskAndWait(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,System.Object)">
            <summary>
            Submits a task to the server and waits until the task is completed.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="task">The task object to execute.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.OperationCanceledException">If the cancellation was requested.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.GetDomainContextOrThrow">
            <summary>
            Gets a reference to the current server context.
            </summary>
            <returns>An IDomainContext reference.</returns>
            <exception cref="T:System.InvalidOperationException">If a server context is not available.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.CreateFileOperationsCtrl">
            <summary>
            Creates a new FileOperationsCtrl object for the current server context.
            </summary>
            <returns>A FileOperationsCtrl.</returns>
            <exception cref="T:System.InvalidOperationException">If a server context is not available.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DoRenameDatabaseInternal(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,IdeaServer.Core.Entities.Interfaces.IIMDFile,System.String)">
            <summary>
            Renames a server database.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="imdFile">A reference to the database to be renamed.
            An exception is thrown if this reference is null.</param>
            <param name="newName"></param>
            <returns>An IIMDFile reference to the object that contains the new database name.</returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If imdFile is null.</exception>
            <exception cref="T:System.ArgumentNullException">If newName is null.</exception>
            <exception cref="T:System.ArgumentException">If newName is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.DoMoveDatabaseInternal(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext,IdeaServer.Core.Entities.Interfaces.IIMDFile,IdeaServer.Core.Entities.Interfaces.IIMDFolder)">
            <summary>
            Moves a server database to a folder inside the same project.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <param name="imdFile">A reference to the database to be moved.
            An exception is thrown if this reference is null.</param>
            <param name="folder">A reference to the destination folder.
            An exception is thrown if this reference is null.</param>
            <returns>An IIMDFile reference to the object that contains the new database name.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.ValidationHelper">
            <summary>
            A validation helper.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.ValidationHelper.VerifyDatabaseName(System.String,System.String)">
            <summary>
            Verifies that the specified name is neither null nor empty.
            </summary>
            <param name="databaseName">The name to verify.</param>
            <param name="parameterName">The name of the parameter.
            The method uses it as the name of the parameter in the exceptions it throws.</param>
            <exception cref="T:System.ArgumentNullException">If databaseName is null.</exception>
            <exception cref="T:System.ArgumentException">If databaseName is empty.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject.ValidationHelper.DatabaseNameCannotBeEmptyMessage">
            <summary>
            Gets a string similar to 'The name of the database cannot be empty.'.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.NonvalidatingFileOperationsCtrl">
            <summary>
            NonvalidatingFileOperationsCtrl derives from IDEA's FileOperationsCtrl and
            disables the validation of the task before submitting it to IDEA Server.
            Reason: Sometimes submitting the task to the server fails because Validate
            determines that one of the databases are currently in use.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.NonvalidatingFileOperationsCtrl.#ctor(Autofac.IContext)">
            <summary>
            Initializes a new NonvalidatingFileOperationsCtrl with a reference to the context
            object.
            </summary>
            <param name="container">An Autofac.IContext reference to the context.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.NonvalidatingFileOperationsCtrl.Validate">
            <summary>
            Validates the task before submitting it to IDEA Server.
            This method does nothing.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.CompileMoveServerDatabasesTaskProxyAssembly">
            <summary>
            A MarshalByRefObject that compiles MoveServerDatabasesTask.cs.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.CompileMoveServerDatabasesTaskProxyAssembly.CompileMoveServerDatabasesTask(System.String)">
            <summary>
            Compiles MoveServerDatabasesTaskProxy.cs into its own assembly.
            </summary>
            <param name="assemblyName">The fully-qualified name of the output file.
            An exception is thrown if this value is null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If assemblyName is null.</exception>
            <exception cref="T:System.ArgumentException">If assemblyName is empty.</exception>
            <remarks>The method assumes that the dependent SA and IDEA assemblies
            are located in AppDomain.CurrentDomain.BaseDirectory.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.CompileMoveServerDatabasesTaskProxyAssembly.FormatCompilerErrors(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Concatenates the string representations of all CompilerErrors (one item per line) in the specified collection
            </summary>
            <param name="errors">The CompilerErrorCollection to process.
            An exception is thrown if this reference is null.</param>
            <returns>A string.</returns>
            <exception cref="T:System.ArgumentNullException">If errors is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.InternalMoveServerDatabasesTask">
            <summary>
            InternalMoveServerDatabasesTask implements the task of moving server databases.
            It assumes that the caller uses it only from within a server task.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.InternalMoveServerDatabasesTask.#ctor">
            <summary>
            The mandatory default constructor.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.InternalMoveServerDatabasesTask.ClientSite">
            <summary>
            Gets / sets IDEA's client site object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.InternalMoveServerDatabasesTask.Execute(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesArgs,System.Func{System.Boolean,System.Boolean})">
            <summary>
            Executes the task.
            </summary>
            <param name="args">A MoveServerDatabasesArgs object.
            An exception is thrown if this reference is null.</param>
            <param name="cancelCheck">An optional callback that can be used by the task to check
            whether the cancellation was requested or to report to the caller that 
            the task was cancelled.</param>
            <returns>An object of type MoveServerDatabasesResponse.</returns>
            <exception cref="T:System.ArgumentNullException">If args is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.InternalMoveServerDatabasesTask.IsCancellationRequested(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Determines whether the cancellation of the task was requested.
            </summary>
            <param name="cancelCheck">An optional callback that can be used by the task to check
            whether the cancellation was requested or to report to the caller that 
            the task was cancelled.</param>
            <returns>False, if cancelCheck is null, or if cancelCheck returns false or throws an exception; 
            true, if cancellation was requested.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy">
            <summary>
            MoveServerDatabasesTaskProxy implements the task of moving server databases.
            It assumes that the caller uses it only from within a server task.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy.ParameterName">
            <summary>
            Specifies the name of the mandatory input parameter of type
            MoveServerDatabasesArgs.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy.EntryPointName">
            <summary>
            Specifies the name of the task's entry point.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy.#ctor">
            <summary>
            The mandatory default constructor.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy.ClientSite">
            <summary>
            Gets / sets IDEA's client site object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxy.Execute(System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Boolean,System.Boolean})">
            <summary>
            Executes the task.
            </summary>
            <param name="args">An IDictionary reference to the dictionary containing the actual arguments of
            the task.
            The dictionary must contain an entry with the key ParameterName and the value a non-null 
            reference to an object of type MoveServerDatabasesArgs.
            An exception is thrown if this reference is null.</param>
            <param name="cancelCheck">An optional callback that can be used by the task to check
            whether the cancellation was requested or to report to the caller that 
            the task was cancelled.</param>
            <returns>An object of type MoveServerDatabasesResponse.</returns>
            <exception cref="T:System.ArgumentNullException">If args is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxyHelper">
            <summary>
            MoveServerDatabasesTaskProxyHelper contains helpers for dealing with
            MoveServerDatabasesTaskProxies.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.MoveServerDatabasesTaskProxyHelper.GetMoveServerDatabasesTaskProxyAssembly">
            <summary>
            Returns the bytes of the assembly that contains the class MoveServerDatabaseTaskProxy.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.KeyedSimpleImportFileCollection">
            <summary>
            The KeyedSimpleImportFileCollection implements a case-insenstive alias-keyed collection of ISimpleImportFile objects.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.KeyedSimpleImportFileCollection.#ctor">
            <summary>
            Initializes a new instance of type KeyedSimpleImportFileCollection. 
            Instructs the base class to use an OrdinalIgnoreCase comparer.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.KeyedSimpleImportFileCollection.GetKeyForItem(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile)">
            <summary>
            Retrieves the key value for a specified ISimpleImportFile object.
            </summary>
            <param name="item">The ISimpleImportFile object whose key is requested.</param>
            <returns>Returns the Alias of the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.SimpleImportFilesHelper">
            <summary>
            The SimpleImportFilesHelper class provides helpers for creating objects that implement ISimpleImportFiles.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.SimpleImportFilesHelper.CreateImportFiles(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.CirAliasAndDatabase})">
            <summary>
            Creates an object that implements ISimpleImportFiles over the items of the 
            specified collection of CirAliasAndDatabases.
            </summary>
            <param name="aliases">
            An object that supplies the elements to add to the output collection.
            </param>
            <returns>
            An object that implements ISimpleImportFiles.
            </returns>
            <exception cref="T:System.ArgumentNullException">If aliases is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal.SimpleImportFilesHelper.MergeImportFiles(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MergeConflictResolver)">
            <summary>
            Combines all the elements of two collections into a new collection.
            </summary>
            <param name="olderItems">The collection of "older" items.
            An exception is thrown, if olderItems is null.
            </param>
            <param name="newerItems">The collection of "newer" items.
            An exception is thrown, if newerItems is null.
            </param>
            <param name="conflictResolver">Specifies how to handle aliases that exist in both collections.</param>
            <returns>A new collection that contains the elements of the input collections.
            </returns>
            <exception cref="T:System.ArgumentNullException">If olderItems is null.</exception>
            <exception cref="T:System.ArgumentNullException">If newerItems is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask">
            <summary>
            MoveImportedFilesToFolderTask provides access to the properties and methods of task that moves imported files to another folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.Object)">
            <summary>
            Initializes a new MoveImportedFilesToFolderTask with a reference to the
            current CIR execution context.
            </summary>
            <param name="executionContext">An ICirExecutionContext reference to the current
            CIR execution context.
            An exception is thrown if this reference is null or empty.</param>
            <param name="ideaClientSite">An optional reference to the current IDEA client site object.
            If specified, the object is passed on to IdeaServerTaskAdapter.</param>
            <exception cref="T:System.ArgumentNullException">If executionContext is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.m_ideaDomainContext">
            <summary>
            A reference to IDEA's domain context.
            Default value: null
            Init: ctor
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.m_ideaClientSite">
            <summary>
            A reference to IDEA's current client site.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.CirExecutionContext">
            <summary>
            Gets the CIR execution context.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.m_cirExecutionContext">
            <summary>
            A read-only reference to the current CIR execution context.
            Default value: null
            Init.: ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItems">
            <summary>
            Gets a reference to the list of tasks.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData">
            <summary>
            TaskItemData holds a task's data.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2,System.String)">
            <summary>
            Initializes a new TaskItemData instance.
            </summary>
            <param name="file">An ISimpleImportFile2 reference.</param>
            <param name="folder">A string containing the name of the destination folder.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData.File">
            <summary>
            Gets the ISimpleImportFile reference.
            Same as Item1.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData.Folder">
            <summary>
            Gets the destination folder.
            Same as Item2.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData.TaskId">
            <summary>
            Gets the id of the task.
            Same as Item3.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData.BadDataTaskId" -->
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.Add(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile2,System.String)">
            <summary>
            Adds a move operation to the task.
            </summary>
            <param name="importFile">An ISimpleImportFile2 reference to the imported database to be moved.
            An exception is thrown if this reference is null.
            An exception is thrown if the import file does not support moving to another folder (that
            is, import.SupportsMovingDatabaseToFolder is false).</param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the move operation does nothing.
            If a database with the same name already exists in the destination folder,
            the operation tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">If importFile is null.</exception>
            <exception cref="T:System.NotSupportedException">If the specified import file 
            does not support moving the database.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.PerformTask">
            <summary>
            Executes the task and resynchronizes the names of the imported databases.
            </summary>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
            <remarks>If the collection of move-operations is empty, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.DoMoveLocalDatabasesToServer">
            <summary>
            Implements PerformTask's scenario 'move local databases to server'.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.DoMoveLocalDatabasesToServerAlt">
            <summary>
            Implements PerformTask's scenario 'move local databases to server'
            using the slow method.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.SetIdeaDomainContextIfRequired">
            <summary>
            Sets the current IDEA domain context if required.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.ThrowIfCancellationRequested">
            <summary>
            Throws a System.OperationCanceledException if cancellation has been requested for the task running
            in the current context.
            </summary>
            <exception cref="T:System.OperationCanceledException">If cancellation has been requested for the task
            running in current context.</exception>
            <remarks>If the current context was not set, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.ThrowIfCancellationRequested(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Throws a System.OperationCanceledException if cancellation has been requested for the task running
            in the specified context.
            </summary>
            <param name="context">The context.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.OperationCanceledException">If cancellation has been requested for the task
            running in the specified context.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.GetMoveServerDatabasesArgs">
            <summary>
            Creates and initializes a new MoveServerDatabasesArgs for the current list of task
            steps. Trivial tasks will be excluded.
            </summary>
            <returns>A MoveServerDatabasesArgs object.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.GetServerTasks(Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.TaskItemData)">
            <summary>
            Creates an enumerator over the collection of server tasks for the specified
            TaskItemData.
            </summary>
            <param name="t">A TaskItemData.</param>
            <returns>An IEnumerable.</returns>
            <remarks>If the specifed task's file has bad-data and its bad-data file can be
            extracted, the method creates also a server task with id BadDataTaskId.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.GetMoveServerDatabasesTaskProxyAssembly">
            <summary>
            Returns the bytes of the assembly that contains the class MoveServerDatabaseTaskProxy.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveImportedFilesToFolderTask.ProcessResponseErrorMessage(System.String,System.String)">
            <summary>
            Processes the error message from a response object.
            </summary>
            <param name="errorMessage">The string containing the
            error message to integrate in the log. If null or empty,
            the method does nothing.</param>
            <param name="errorStackTrace">The optional string containing the 
            error stack trace of the exception.</param>
            <remarks>If errorMessage is null or empty, the method does nothing.
            Otherwise, the method appends the error message and the stack trace (if specified) 
            to the current log.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesArgs">
            <summary>
            MoveServerDatabasesArgs rep. the args of a MoveServerDatabasesTask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesArgs.TaskItems">
            <summary>
            Gets / sets the sequence of task items in the order of
            their processing.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesArgs.DebugMode">
            <summary>
            Gets / sets a value that specifies whether to run the task in debug mode.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse">
            <summary>
            MoveServerDatabasesResponse rep. the response of a MoveServerDatabasesTask.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.FinalDatabaseNames">
            <summary>
            Gets / sets a dictionary that contains the results for those task steps that succeeded.
            The dict. maps an internal task step id to the final fully-qualified name of the database after it 
            was moved to the destination folder.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.TaskSucceeded">
            <summary>
            Gets / sets a boolean that specifies whether all task steps succeeded.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.TaskCancelled">
            <summary>
            Gets / sets a boolean that specifies whether the task was cancelled.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.FailedTaskId">
            <summary>
            Gets / sets the identifier of the first task that failed.
            This value is relevant only if TaskSucceeded is false.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.ErrorMessage">
            <summary>
            Gets / sets the message describing the error in case the execution has failed.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesResponse.ErrorStackTrace">
            <summary>
            Gets / sets the stack trace of the exception in case the execution has failed.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesTaskFactory">
            <summary>
            MoveServerDatabasesTaskFactory creates IMoveServerDatabasesTask instances.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MoveServerDatabasesTaskFactory.CreateMoveServerDatabasesTask">
            <summary>
            Creates a new instance of an object that implements IMoveServerDatabasesTask.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirAuditFolderPageInputIds">
            <summary>
            Define the well known ids for inputs dictionary of ICirExecutor QueryAuditFolder event
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirAuditFolderPageInputIds.AuditFolderId">
            <summary>
            The audit folder Id
            The value (string) is the name of audit folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirAuditFolderPageInputIds.PeriodStartId">
            <summary>
            The period start Id
            The value can be a date or a string in the format defined in DateStringFormat member
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirAuditFolderPageInputIds.PeriodEndId">
            <summary>
            The period end Id
            The value can be a date or a string in the format defined in DateStringFormat member
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirAuditFolderPageInputIds.DateStringFormat">
            <summary>
            The date string format (IDEA Format)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext">
            <summary>
            ServerDataPreparationContext is an execution context that is passed on to the data preparation macros of CIRs.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor">
            <summary>
            Initializes an instance of type ServerDataPreparationContext with default values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor(System.IServiceProvider)">
            <summary>
            Initializes an instance of type ServerDataPreparationContext with an optional
            IServiceProvider reference.
            </summary>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes an instance of type ServerDataPreparationContext with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor(COMMONIDEACONTROLSLib.ITaskProgress,System.IServiceProvider)">
            <summary>
            Initializes an instance of type ServerDataPreparationContext with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Initializes a new instance of type ServerDataPreparationContext on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink and IsCancellationRequested implementations.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.IServiceProvider)">
            <summary>
            Initializes a new instance of type ServerDataPreparationContext on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink, IsCancellationRequested and TestResultFiles implementations.
            An exception is thrown if this reference is null.</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContext.GetSubtaskType">
            <summary>
            Gets the type of the current CIR subtask.
            </summary>
            <returns>CirSubtaskType.DataPreparationTask</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine">
            <summary>
            ServerDataPreparationContextForDebuggableRoutine is an execution context that is passed on to the data preparation macros of CIRs.
            It derives from ServerDataPreparationContext and provides the same functionality as its base class, with one exception: 
            Its implementation of the property IsDebugLicenseAvailable returns always true.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor">
            <summary>
            Initializes an instance of type ServerDataPreparationContextForDebuggableRoutine with default values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor(System.IServiceProvider)">
            <summary>
            Initializes an instance of type ServerDataPreparationContextForDebuggableRoutine with an optional
            IServiceProvider reference.
            </summary>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor(COMMONIDEACONTROLSLib.ITaskProgress)">
            <summary>
            Initializes an instance of type ServerDataPreparationContextForDebuggableRoutine with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor(COMMONIDEACONTROLSLib.ITaskProgress,System.IServiceProvider)">
            <summary>
            Initializes an instance of type ServerDataPreparationContextForDebuggableRoutine with default values and sets
            the object to forward progress notification to the specified ITaskProgress object.
            </summary>
            <param name="taskProgress">The optional ITaskProgress callback.
            If the caller does not want to receive progress notifications, this reference can be null.
            </param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Initializes a new instance of type ServerDataPreparationContextForDebuggableRoutine on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink and IsCancellationRequested implementations.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.#ctor(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.IServiceProvider)">
            <summary>
            Initializes a new instance of type ServerDataPreparationContextForDebuggableRoutine on top of the specified execution context.
            </summary>
            <param name="innerExecutionContext">The TaskExecutionContext on top of which the current context is operating.
            The new object uses the inner context's ScriptProgressSink, IsCancellationRequested and TestResultFiles implementations.
            An exception is thrown if this reference is null.</param>
            <param name="serviceProvider">An IServiceProvider reference to be used to lookup services.
            <para>
            This reference can be null if the context object is not supposed to provide
            any services.
            </para>
            <para>
            If the reference is not null, then the service provider should be able 
            to retrieve a reference to the IServiceTypeResolver service, which this class uses in its
            implementation of GetServiceById.
            </para></param>
            <exception cref="T:System.ArgumentNullException">If innerExecutionContext is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ServerDataPreparationContextForDebuggableRoutine.IsDebugLicenseAvailable">
            <summary>
            Gets a value that specifies whether a debug license is available and valid for the currently running routine.
            This implementation returns always true.
            </summary>
            
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper">
            <summary>
            The class DotNetTaskHelper provides helpers for running .NET-based CIR tasks.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.RunDotNetTask(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.Type)">
            <summary>
            Executes a task whose implementation type is 'DotNetAssembly'.
            </summary>
            <param name="task">The task object to execute.
            An exception is thrown if this reference is null.</param>
            <param name="context">The context object that will be passef on to the .NET method.
            An exception is thrown if this reference is null.</param>
            <param name="taskContextType">The type of the context object that the .NET method expects.
            An exception is thrown if this reference is null or if the specified context object cannot be assigned to an instance
            of taskContextType.</param>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.ArgumentException">If task's RoutineImplementationType is not 'DotNetAssembly'.</exception>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If taskContextType is null.</exception>
            <exception cref="T:System.ArgumentException">If an instance of type taskContextType cannot be assigned from context.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.RunAction``1(System.Action{``0},``0)">
            <summary>
            Executes an action in the specified TaskExecutionContext.
            </summary>
            <typeparam name="TContext">The type of the execution context.
            Must be a TaskExecutionContext or derived type.</typeparam>
            <param name="task">The action to execute.
            An exception is thrown if this reference is null.</param>
            <param name="context">The context object that will be passef on to the .NET method.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If task or context is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.InvokeSubtaskMethod(System.Reflection.MethodInfo,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Implements InvokeSubtaskMethod.
            </summary>
            <param name="methodInfo">A reference to the method to invoke.
            An exception is thrown if this reference is null.</param>
            <param name="context">The execution context.
            An exception is thrown if this reference is null.</param>
            <remarks>If context.IdeaClient is null, the method creates an IIdeaClient instance
            that is compatible with the execution context and assigns it to the execution
            context for the duration of the call.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.InvokeSubtaskMethodCore(System.Reflection.MethodInfo,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Implements InvokeSubtaskMethod.
            </summary>
            <param name="methodInfo">A reference to the method to invoke.
            An exception is thrown if this reference is null.</param>
            <param name="context">The execution context.
            An exception is thrown if this reference is null.</param>
            <remarks>If context.IdeaClient is null, the method creates an IIdeaClient instance
            that is compatible with the execution context and assigns it to the execution
            context for the duration of the call.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.InvokeAction``1(System.Action{``0},``0)">
            <summary>
            Implements InvokeAction.
            </summary>
            <typeparam name="T">The type of the execution context.
            Must be a TaskExecutionContext or derived type.</typeparam>
            <param name="task">The action to execute.
            An exception is thrown if this reference is null.</param>
            <param name="context">The execution context.
            An exception is thrown if this reference is null.</param>
            If context.IdeaClient is null, the method creates an IIdeaClient instance
            that is compatible with the execution context and assigns it to the execution
            context for the duration of the call.
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.InvokeActionCore``1(System.Action{``0},``0)">
            <summary>
            Implements InvokeAction.
            </summary>
            <typeparam name="T">The type of the execution context.
            Must be a TaskExecutionContext or derived type.</typeparam>
            <param name="task">The action to execute.
            An exception is thrown if this reference is null.</param>
            <param name="context">The execution context.
            An exception is thrown if this reference is null.</param>
            If context.IdeaClient is null, the method creates an IIdeaClient instance
            that is compatible with the execution context and assigns it to the execution
            context for the duration of the call.
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.CreateIdeaClient(System.Object,System.Boolean)">
            <summary>
            The method creates and initializes a new IIdeaClient instance
            that is compatible withe the specified location.
            </summary>
            <param name="clientSite">The optional client site object to pass to the new object's SetClientSite function.
            If specified, the object must implement at least the interfaces ITaskProgress and ITaskCompletion. 
            This is an IDEA 9 requirement. However, the function does not check if the object implements these interfaces.
            </param>
            <param name="isServerTask">Flag specifying server-side or client-side execution</param>
            <returns>A new instance of type IIdeaClient.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DotNetTaskHelper.DescrambleAssembly(System.Byte[])">
            <summary>
            Descrambles the specified bytes.
            </summary>
            <param name="message">The array of bytes to descramble. An exception is thrown if this reference is null.</param>
            <returns>A string containing the unscrambled text.</returns>
            <exception cref="T:System.ArgumentNullException">If bytes is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection">
            <summary>
            EmptyStepsCollection represents an empty collection of audit steps.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.#ctor">
            <summary>
            Initializes a new instance of type EmptyStepsCollection.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.TheInstance">
            <summary>
            Gets a reference to the EmptyStepsCollection singleton.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.m_instance">
            <summary>
            Holds a reference to the EmptyStepsCollection singleton.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified position.
            </summary>
            <param name="Index">The postion of the element to retrieve.</param>
            <returns>The element at the specified position.</returns>
            <remarks>Always throws ArgumentOutOfRangeException.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <remarks>Returns always zero.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.DummyEnumerator">
            <summary>
            DummyEnumerator implements the enumerator of EmptyStepsCollection.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.DummyEnumerator.Current">
            <summary>
            Gets the current element.
            </summary>
            <remarks>Always throws InvalidOperationException.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.DummyEnumerator.MoveNext">
            <summary>
            Advances the enumerator.
            </summary>
            <returns>Returns always false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Legacy.EmptyStepsCollection.DummyEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
            <remarks>The method does nothing.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ExceptionHelper">
            <summary>
            ExceptionHelper provides helper methods for working with exceptions.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ExceptionHelper.IsEquivalentToOperationCanceledException(System.Exception)">
             <summary>
             Determines if the specified exception is an OperationCancelledException or an equivalent IDEA COMException
             or if its InnerException satisifes these criteria.
             </summary>
             <param name="exception">The exception to check. If null, the function returns false.</param>
             <returns>True, if the specified exception is an OperationCanceledException or a COMException whose ErrorCode is
             TaskCancelCode or TaskCancelCode2, or if its InnerException satisfies these criteria; otherwise, false. 
             The method returns false also if the exception is null.
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.IdeaMacroTaskHelper">
            <summary>
            The class IdeaMacroTaskHelper provides helpers for running IDEA-based CIR tasks.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.IdeaMacroTaskHelper.RunMacro(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            Executes a task whose implementation type is 'Macro'.
            </summary>
            <param name="task">A task object that holds the macro to execute. 
            An exception is thrown, if the task is null or if its implementation type is not 'Macro'.</param>
            <param name="context">The context object that will pe passed on to the macro.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.ArgumentException">If task's implementation type is not 'Macro'.</exception>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.BadImageFormatException">If the task's executable is null, empty or it consists only of white-space characters.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.IdeaMacroTaskHelper.RunMacro(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Entities.ICirTaskExecutable,Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext,System.IntPtr)">
            <summary>
            Executes a task whose implementation type is 'Macro'.
            </summary>
            <param name="task">A task object that holds the macro to execute. 
            An exception is thrown, if the task is null or if its implementation type is not 'Macro'.</param>
            <param name="context">The context object that will pe passed on to the macro.
            An exception is thrown if this reference is null.</param>
            <param name="parentWindowHandle">An optional IntPtr that contains the handle of
            the parent or owning window.</param>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.ArgumentException">If task's implementation type is not 'Macro'.</exception>
            <exception cref="T:System.ArgumentNullException">If task is null.</exception>
            <exception cref="T:System.BadImageFormatException">If the task's executable is null, empty or it consists only of white-space characters.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.IdeaMacroTaskHelper.DescrambleText(System.Byte[])">
            <summary>
            Descrambles the specified bytes.
            </summary>
            <param name="message">The array of bytes to descramble. An exception is thrown if this reference is null.</param>
            <returns>A string containing the unscrambled text.</returns>
            <exception cref="T:System.ArgumentNullException">If bytes is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.IdeaMacroTaskHelper.Decompress(System.Byte[])">
            <summary>
            Decompresses a byte array with GZipStream.
            </summary>
            <param name="value">The byte array to decompress.
            An exception is thrown if this reference is null.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MergeConflictResolver">
            <summary>
            The MergeConflictResolver defines the merge conflict resolvers.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MergeConflictResolver.NewerVersionWins">
            <summary>
            The merge conflict is decided in favour of the newer version of an item.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MergeConflictResolver.OlderVersionWins">
            <summary>
            The merge conflict is decided in favour of the older version of an item.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup">
            <summary>
            The class MessageGroup holds a list of messages that have a common title.
            The MessageGroup has an optional name.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of type MessageGroup with a given name.
            </summary>
            <param name="name">The name of the group. If null or empty, the group is anonymous.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.Name">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.m_name">
            <summary>
            Holds the optional group identifier.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.Title">
            <summary>
            Gets / sets the title of the group.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.m_title">
            <summary>
            Holds the title of the group.
            Default value: null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.Items">
            <summary>
            Gets the list of messages.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroup.m_items">
            <summary>
            A reference to the list that holds the messages.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer">
            <summary>
            The class MessageGroupContainer collects and manages a list of MessageGroups.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.MessageGroups">
            <summary>
            Gets an enumerator for the list of message groups.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.List">
            <summary>
            Gets the list of messages.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.m_messageGroups">
            <summary>
            Holds a reference to the list of message groups.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.Name">
            <summary>
            Gets / sets the name of the collection of messages.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.Add(System.String,System.String,System.String)">
            <summary>
            Adds a message to a new anonymous group at the end of the list or to a group with the 
            specified name, or changes the title of a specified group.
            </summary>
            <param name="message">The message to be added.
            The message is ignored if it is null or empty.</param>
            <param name="groupTitle">An optional group title. The group title is ignored if
            it is null or empty.</param>
            <param name="groupName">An optional message group name.
            See also the comments for IMessagesCollector.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MessageGroupContainer.Clear">
            <summary>
            Removes all groups and messages from the collector.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ResourceSetLoader">
            <summary>
            A helper for loading resource sets.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ResourceSetLoader.CreateResourceSetOverRoutineStrings(System.Byte,System.Byte[])">
            <summary>
            Creates a new ResourceSet over the stream that contains the string table.
            </summary>
            <param name="resourcesType">The type of the resources in the specified array.</param>
            <param name="resources">The array that contains the bytes to load.
            If the array is null or empty, the method returns an empty ResourceSet.
            </param>
            <returns>A new ResourceSet instance that provides access to the string table.
            </returns>
            <exception cref="T:System.FormatException">If the type of resources is unknown.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.EmptyResourceSet">
            <summary>
            The class EmptyResourceSet represents an empty ResourceSet.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.EmptyResourceSet.#ctor">
            <summary>
            Initializes a new instance of the type EmptyResourceSet.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes">
            <summary>
            ImportedDatabaseAttributes specifies a set of database attributes (e.g., HasBadData).
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes.None">
            <summary>
            No attributes were set.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes.HasBadData">
            <summary>
            If set, the database has bad data.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes.SupportsMoving">
            <summary>
            If set, the current execution context
            allows moving the database to another folder.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes">
            <summary>
            DatabaseAliasAttributes specifies a set of alias attributes.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes.None">
            <summary>
            No attributes were set.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes.HasMatch">
            <summary>
            If set, the alias has a match in the set of input files.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes.IsSelected">
            <summary>
            If set, the alias was selected to be imported.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile">
            <summary>
            A simple com-visible class that exposes the name of a database and its alias.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.#ctor(System.String,System.String,System.Guid,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes,System.Int64,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes)">
            <summary>
            Initializes a new SimpleImportFile for the specified alias and its database.
            </summary>
            <param name="alias">The alias.
            An exception is thrown if the alias is null.</param>
            <param name="importedFileName">The fully-qualified name of the database.
            This value can be null.</param>
            <param name="importedDatabaseId">The id of the database.
            Guid.Empty if the alias does not have an associated database.</param>
            <param name="databaseAttributes">An ImportedDatabaseAttributes value that
            specifies whether the database has bad data.</param>
            <param name="importedDatabaseRecordCount">A value that specifies the number of records
            in the database at the time it was imported.</param>
            <param name="aliasAttributes">A DatabaseAliasAttributes value that
            specifies whether the alias has a matching input file and whether
            the item was selected to be imported.</param>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.#ctor(System.String,System.String,System.Guid,System.String,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseAttributes,System.Int64,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes)">
            <summary>
            Initializes a new SimpleImportFile for the specified alias and its database.
            </summary>
            <param name="alias">The alias.
            An exception is thrown if the alias is null.</param>
            <param name="importedFileName">The fully-qualified name of the database.
            This value can be null.</param>
            <param name="importedDatabaseId">The id of the database.
            Guid.Empty if the alias does not have an associated database.</param>
            <param name="badDataFileName">The fully-qualified name of the bad-data file
            that was generated during the import of the database or null.</param>
            <param name="databaseAttributes">An ImportedDatabaseAttributes value that
            specifies whether the database has bad data.</param>
            <param name="importedDatabaseRecordCount">A value that specifies the number of records
            in the database at the time it was imported.</param>
            <param name="aliasAttributes">A DatabaseAliasAttributes value that
            specifies whether the alias has a matching input file and whether
            the item was selected to be imported.</param>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.#ctor(System.String,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.DatabaseAliasAttributes,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.ImportedDatabaseDataObject)">
            <summary>
            Initializes a new SimpleImportFile for the specified alias and database object.
            </summary>
            <param name="alias">The alias.
            An exception is thrown if the alias is null.</param>
            <param name="aliasAttributes">A DatabaseAliasAttributes value that
            specifies whether the alias has a matching input file and whether
            the item was selected to be imported.</param>
            <param name="importedDatabaseObject">A reference to the associated database object.
            An exception is thrown if this reference is null.
            <para>The constructor does not make a copy of the object. The new instance 
            keeps a reference to the initial object. This ensures that changes like
            moving the database to another folder are reflected to all SimpleImportFiles
            that share the database object.</para></param>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
            <exception cref="T:System.ArgumentNullException">If importedDatabaseObject is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseAttributes">
            <summary>
            Gets the database attributes.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.ImportedDatabaseObject">
            <summary>
            Gets a reference to the ImportedDatabaseObject that holds
            info about the associated database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.AliasAttributes">
            <summary>
            Gets the alias attributes.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.Alias">
            <summary>
            Gets the alias of the database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.ImportedFileName">
            <summary>
            Gets the fully-qualified name of the database associated to the current alias.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.BadDataFileName">
            <summary>
            Gets the fully-qualified name of the bad-data file that
            was generated during the immport of the database.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseId">
            <summary>
            Gets the identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns Guid.Empty.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseIdAsString">
            <summary>
            Gets the string representation (32 digits separated by hyphens and enclosed in braces) of the 
            identifier of the database associated to the current alias.
            </summary>
            <remarks>If the current alias does not have an associated database,
            the property returns the string representation of Guid.Empty.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseHasBadData">
            <summary>
            Gets a value that indicates whether bad data was found during the import of the database ImportedFileName.
            The default value is 'false'.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseRecordCount">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            The default value is 0.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.DatabaseRecordCountAsDouble">
            <summary>
            Gets the number of records of the database ImportedFileName at the time the database was imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.AliasHasMatch">
            <summary>
            Gets a boolean that indicates whether the Alias has a match in the set of input files.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.IsSelected">
            <summary>
            Gets a boolean that indicates whether the current item was selected to be imported.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.SupportsMovingDatabaseToFolder">
            <summary>
            Gets a value that specifies whether the current execution context allows moving the database to another folder.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFile.MoveDatabaseToFolder(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ICirExecutionContext,System.String)">
            <summary>
            Moves the database to the specified folder of the current project.
            </summary>
            <param name="context">A ICirExecutionContext reference to the current
            execution context.
            An exception is thrown if this reference is null.
            <para>An exception is thrown if the current execution context does
            not support moving the database, that is if SupportsMovingDatabaseToFolder is false.</para>
            <para>Currently only IPartialImportContext supports this operation.</para>
            </param>
            <param name="folder">The name of the destination folder relative to the current
            project. The destination must be a subfolder of the current project.
            If the source and destination are the same, the method does nothing.
            If a database with the same name already exists in the destination folder,
            the method tries to move the database to the specified folder using a new
            name. The method does not overwrite databases in the destination folder.
            <para>
            An exception is thrown if this name is null or if it is not a relative path.
            An exception is thrown if the destination folder does not exist.
            </para>
            </param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
            <exception cref="T:System.ArgumentNullException">If folder is null.</exception>
            <exception cref="T:System.ArgumentException">If the path to the folder is absolute.</exception>
            <exception cref="T:System.NotSupportedException">If the current execution context
            does not support moving the database.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DuplicateEntityNameException">
            If the destination project subfolder already contained a database with the same name and 
            the method could not move the database after
            retrying the operation a predefined number of times.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the ImportedFileName is not null or empty
            and the file does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the destination folder does not exist.</exception>
            <remarks>If the current object's ImportedFileName is null or empty, the method does nothing.
            If the database is moved, the method updates ImportedFileName to reflect the changes.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection">
            <summary>
            The SimpleImportFileCollection class implements a read-only collection of ISimpleImportFile objects.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFile})">
            <summary>
            Initializes a new instance of type SimpleImportFileCollection with the objects 
            of the specified sequence.
            </summary>
            <param name="items">The collection whose members will be added to the current object.
            An exception is thrown if this reference is null.
            </param>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles)">
            <summary>
            Initializes a new instance of type SimpleImportFileCollection with the items of the specified collection.
            </summary>
            <param name="items">The input collection.
            An exception is thrown, if this reference is null.
            </param>
            <remarks>Only the references will be added to the result collection.</remarks>
            <exception cref="T:System.ArgumentNullException">If items is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.MergeImportFiles(Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,Audicon.SmartAnalyzer.Common.Interfaces.CustomImportRoutines.Runtime.ISimpleImportFiles,Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.MergeConflictResolver)">
            <summary>
            Combines all the elements of two collections into a new collection.
            </summary>
            <param name="olderItems">The collection of "older" items.
            An exception is thrown, if olderItems is null.
            </param>
            <param name="newerItems">The collection of "newer" items.
            An exception is thrown, if newerItems is null.
            </param>
            <param name="conflictResolver">Specifies how to handle aliases that exist in both collections.</param>
            <returns>A new collection that contains the elements of the input collections.
            </returns>
            <exception cref="T:System.ArgumentNullException">If olderItems is null.</exception>
            <exception cref="T:System.ArgumentNullException">If newerItems is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.Items">
            <summary>
            Gets a reference to the internal collection.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.Item(System.Object)">
            <summary>
            Gets the ISimpleImportFile object with the specified Alias or at the specified zero-based index.
            </summary>
            <param name="index">A value that specifies which object to return. 
            If Index is a string, the function retrieves the item whose Alias is equivalent to Index.
            If Index is an Int32, the function retrieves the item at the specified index.
            If Index is neither a string, nor an Int32, an InvalidCastException exception is thrown.
            </param>
            <returns>Returns the item with the specified Alias or ar the specified index. 
            If the item is not found, an exception is thrown.</returns>
            <exception cref="T:System.ArgumentNullException">If Index is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            If Index is a string and the collection does not have an item with an equivalent Alias.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If Index is an Int32 and it is less than 0 or Index is equal to or greater than Count.
            </exception>
            <exception cref="T:System.InvalidCastException">If Index is neither a string, nor an Int32.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified alias.
            </summary>
            <param name="alias">The alias whose existence is tested.
            <para>Aliases are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the alias is null.</para>
            </param>
            <returns>True, if the collection contains an element with the specified
            alias; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If alias is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.Item(System.Int32)">
            <summary>
            Gets the object at the specified zero-based index.
            </summary>
            <param name="index">The zero-based index of the item to retrieve.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If index is less than 0 or index is equal to or greater than Count.
            </exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>
            A System.Collections.IEnumerator object that can be used to iterate through 
            the collection.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.SimpleImportFileCollection.System#Collections#Generic#IEnumerable{Audicon#SmartAnalyzer#Common#Interfaces#CustomImportRoutines#Runtime#ISimpleImportFile}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An object that can be used to iterate through 
            the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.TableBasedServiceTypeResolver">
            <summary>
            Implements the IServiceTypeResover service using a simple
            lookup table.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.TableBasedServiceTypeResolver.#ctor(System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Initializes a new TableBasedServiceTypeResolver instance with the lookup
            table that maps service ids to service types.
            </summary>
            <param name="lookupTable">A dictionary that maps service ids to service types.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If lookupTable is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.TableBasedServiceTypeResolver.LookupTable">
            <summary>
            Gets a reference to the lookup table.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.TableBasedServiceTypeResolver.m_lookupTable">
            <summary>
            Holds a reference to the lookup table.
            Init: .ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.TableBasedServiceTypeResolver.LookupServiceType(System.String)">
            <summary>
            Maps a service id to its service type.
            </summary>
            <param name="serviceId">A string containing the id of the service to map.
            An exception is thrown if this reference is null.</param>
            <returns>If found, the Type object of the service with the specified id;
            otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">If serviceId is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds">
            <summary>
            The class WellKnownCirExecutorServiceIds lists the identifiers of the 
            services that the CIR executor offers to CIR subtasks through the context object's
            GetServiceById method.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds.CirWizardPageSettingsServiceId">
            <summary>
            The id of the service ICirWizardPageSettingsService.
            The service ICirWizardPageSettingsService provides acceess to
            the settings objects of those CIR wizard pages that can be customized.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds.MacroDialogInvokerServiceId">
            <summary>
            The id of the service IMacroDialogInvoker.
            The service IMacroDialogInvoker invokes a macro dialog.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds.CreateStandardTableTaskFactoryServiceId">
            <summary>
            The id of the service ICreateStandardTableTaskFactory.
            The service ICreateStandardTableTaskFactory provides access to objects that create 
            the German Federal Ministry of Finance standard tables.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds.CreateAuDSStandardTableTaskFactoryServiceId">
            <summary>
            The id of the service ICreateAuDSStandardTableTaskFactory.
            This service provides access to the properties and methods of a task that can create 
            all Audicon Data Standard standard tables.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirExecutorServiceIds.RegisterTableForMppTaskFactoryServiceId">
            <summary>
            The id of the service IRegisterTableForMppTaskFactory.
            This service provides access to the properties and methods of a task that can register 
            a table with a multi-period data preparation task.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirWizardPageIds">
            <summary>
            The class WellKnownCirWizardPageIds lists the identifiers of the CIR Wizard pages
            that can be customized using page settings objects that can be queried for using 
            the service ICirWizardPageSettingsService.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.WellKnownCirWizardPageIds.SelectAuditFolderPageId">
            <summary>
            The id of the SelectAuditFolder wizard page.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.CirSearchPatternType">
            <summary>
            The enum CirSearchPatternType defines the available search pattern types.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.CirSearchPatternType.Default">
            <summary>
            The search pattern may contain the wild cards * and ?.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.CirSearchPatternType.RegularExpression">
            <summary>
            The search pattern is a regular expression.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType">
            <summary>
            This enumeration defines how a routine is implemented.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Unspecified">
            <summary>
            The implementation type was not specified.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Exe">
            <summary>
            The routine is implemented as an executable program.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Iss">
            <summary>
            The routine is implemented as an IDEA macro.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Ise">
            <summary>
            The routine is implemented as a compiled IDEA macro.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Iem">
            <summary>
            The routine is implemented as a compiled IDEA Unicode macro.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.DotNetAssembly">
            <summary>
            The routine is implemented in a .NET assembly.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Entities.RoutineImplementationType.Com">
            <summary>
            The routine is implemented as a COM object.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Cirs.Runtime.Internal.InternalCirRuntimeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Cirs.Runtime.Internal.InternalCirRuntimeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Cirs.Runtime.Internal.InternalCirRuntimeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Cirs.Runtime.Internal.InternalCirRuntimeResources.MoveServerDatabasesTaskProxy">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections.Generic;
            using Audicon.SmartAnalyzer.IdeaAccess.Interfaces;
            
            namespace Audicon.SmartAnalyzer.Common.Types.CustomImportRoutines.Runtime.Internal
            {
                /// &lt;summary&gt;
                /// MoveServerDatabasesTaskProxy implements the task of moving server databases.
                /// It assumes that the caller uses it only from within a server task.
                /// &lt;/summary&gt;
                public class MoveServerDatabasesTaskProxy : IInvocable
                {
                    #region Constants
            
                    /// &lt;summary&gt;
              [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs">
            <summary>
            Args class representing Collaborator's event
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.Type">
            <summary>
            Event's type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.UserId">
            <summary>
            Id of user who caused the event to be fired
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.LibraryItem">
            <summary>
            Shared library item that caused the event to be fired
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.Data">
            <summary>
            Data that caused the event to be fired
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.Error">
            <summary>
            Error that caused the event to be fired
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs.Cancel">
            <summary>
            If set to true by subscriber, instructs Collaborator to stop processing
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedActionAttribute">
            <summary>
            Custom metadata attribute describing report extensions' capabilities. This attribute is conform with the contract
            Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedActionCapabilities
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedActionAttribute.SharedActionType">
            <summary>
            Action's type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedActionAttribute.Priority">
            <summary>
            Optional attribute describing processing priority of actions of the same type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedActionAttribute.Name">
            <summary>
            Optional name of the shared action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData">
            <summary>
            Generic class representing shared data used by SA Collaboration
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.SharedActionType">
            <summary>
            Type of shared action responsible for shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.Server">
            <summary>
            Name of IDEA server hosting the shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.ProjectId">
            <summary>
            ID of IDEA server project hosting the shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.UserId">
            <summary>
            ID of user who provided shared data
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.TransactionId">
            <summary>
            Shared action's transaction ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.MachineId">
            <summary>
            Unique identifier of machine where shared data was created
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.LocalProject">
            <summary>
            Name of local project shared data are related to
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.SharedActionDirection">
            <summary>
            Type of action's control flow with respect to data modified
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SharedData.Data">
            <summary>
            Action specific data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Collaboration.SyncSharedData">
            <summary>
            Helper class used to return new shared data for shared action
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Collaboration.SyncSharedData.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Collaboration.SyncSharedData.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Collaboration.ISharedData,System.DateTime,System.Boolean)">
            <summary>
            copy ctor
            </summary>
            <param name="data"></param>
            <param name="created"></param>
            <param name="syncForAnyUser"></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SyncSharedData.Created">
            <summary>
            Date of shared data creation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Collaboration.SyncSharedData.SyncForAnyUser">
            <summary>
            Specifies that this shared data was obtained when synchronizing for any user
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ContextLogger">
            <summary>
            This class writes a log file header containing the context info (OS, globalization, IDEA, SA)
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ContextLogger.#ctor(Microsoft.VisualBasic.Logging.FileLogTraceListener)">
            <summary>
            ctor
            </summary>
            <param name="targetListener">Log file listener into whose file to add the header</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ContextLogger.Write(System.String)">
            <summary>
            Implements abstract class method
            </summary>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ContextLogger.WriteLine(System.String)">
            <summary>
            Implements abstract class method
            </summary>
            <param name="message">message to trace</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ContextLogger.WriteContext">
            <summary>
            Working horse: flushes context into log file if necessary
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.DefaultFormAttribute">
            <summary>
            Simple attribute to mark a dialog form as being the main form
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.DefaultFormAttribute.Parameters">
            <summary>
            List of parameters and their values. Parameter is always separated from its value using '=' char and from other parameters using separator string.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.DefaultFormAttribute.Separator">
            <summary>
            Parameter separator.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null or empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.DefaultFormAttribute.GetParameters">
            <summary>
            Returns the list of parameters as a dictionary containing parameter name as key (case insensitive) and parameter value as value.
            </summary>
            <returns>Dictionary of parameters</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.DialogFlags">
            <summary>
            Available modifiers for dialog show operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogFlags.None">
            <summary> 
            No flag
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogFlags.Visible">
            <summary>
            Show visible dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogFlags.SaveOnExit">
            <summary>
            Saves result when exiting dialog
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionContextUtil">
            <summary>
            ExecutionContextUtil contains utilities for working with SA execution contexts.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionContextUtil.GetDefaultEntityLocation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Returns the default location of entities like imds and folders
            based on the information in the current execution context.
            If no execution context was specified, the
            method returns ExecutionLocation.Client.
            </summary>
            <param name="context">An IExecutionContext reference.
            If null, the method returns ExecutionLocation.Client.</param>
            <returns>An ExecutionLocation value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionContextUtil.IsClientDefaultEntityLocation(Audicon.SmartAnalyzer.Common.Interfaces.IExecutionContext)">
            <summary>
            Gets a boolean that specifies whether the default location
            of entities like imds and folders is ExecutionLocation.Client.
            </summary>
            <param name="context">An IExecutionContext reference.</param>
            <returns>True, if the default location of entities is ExecutioLocation.Client; otherwise, false.
            The method returns true if context is null.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionDescriptor">
            <summary>
            Helper class providing task execuion tracking information to the Task Executor class.
            Execution information contains data on input tables assigned to the test, state of last execution etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionDescriptor.ExecutionId">
            <summary>
            Id of execution information block (execution record). 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor">
            <summary>
            The class ExecutionParameterAccessor provides read-only access 
            to a test execution's set of actual parameters.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.#ctor">
            <summary>
            Initializes a new instance of type ExecutionParameterAccessor with an empty set of parameters.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of type ExecutionParameterAccessor with the actual parameters
            of the specified sequence.
            </summary>
            <param name="actualParameters">The sequence of actual parameters. Can be empty.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If actualParameters is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.ActualParameters">
            <summary>
            Gets the dictionary that contains the parameters and their actual value.
            </summary>
            <remarks>The dictionary uses StringComparer.OrdinalIgnoreCase as the key comparer.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.m_actualParameters">
            <summary>
            Holds the dictionary of parameters and their actual value.
            <para>
            Initialization: on-demand, see Parameters.
            </para>
            <para>
            Comparer: StringComparer.OrdinalIgnoreCase
            </para>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null or if a parameter with the 
            specified name does not exist.</para></param>
            <returns>The value of the specified parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If parameterName is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.GlobalParameterAccessor.Contains(System.String)">
            <summary>
            Determines whether the set of parameters contains an element with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para>
            </param>
            <returns>True, if the set of parameters contains an element with the specified
            name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ParameterizedAliasedEntity">
            <summary>
            Aliased entity (id, name, alias, flagged) additionally providing list of parameters &lt;String,Object&gt; 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ParameterizedAliasedEntity.Parameters">
            <summary>
            Getter for named parameters' list
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ParameterizedAliasedEntity.#ctor(System.Guid,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            ctor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
            <param name="alias">Alias</param>
            <param name="flagged">Flagged state</param>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ParameterizedAliasedEntity.GetParameter(System.String)">
            <summary>
            Given the parameter's name, returns its value
            </summary>
            <param name="key">parameter's name</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter">
            <summary>
            Implementation of execution parameter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter.#ctor">
            <summary>
            Deeafault ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter)">
            <summary>
            Copy ctor
            </summary>
            <param name="param"></param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter.Id">
            <summary>
            Parameter's Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter.Value">
            <summary>
            Parameter's value
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameter.Flags">
            <summary>
            Parameter's flags
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity">
            <summary>
            Specialization of ParameterizedEntity class representing entity supplied with test's execution parameters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutableEntity.#ctor(Audicon.SmartAnalyzer.Common.Types.Entity,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter})">
            <summary>
            ctor
            </summary>
            <param name="clone">entity to copy from</param>
            <param name="lstParams">list of execution parameters</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor">
            <summary>
            The class ExecutionParameterAccessor provides read-only access 
            to a test execution's set of actual parameters.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.#ctor">
            <summary>
            Initializes a new instance of type ExecutionParameterAccessor with an empty set of parameters.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionParameter})">
            <summary>
            Initializes a new instance of type ExecutionParameterAccessor with the actual parameters
            of the specified sequence.
            </summary>
            <param name="actualParameters">The sequence of actual parameters. Can be empty.
            An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If actualParameters is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.ActualParameters">
            <summary>
            Gets the dictionary that contains the parameters and their actual value.
            </summary>
            <remarks>The dictionary uses StringComparer.OrdinalIgnoreCase as the key comparer.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.m_actualParameters">
            <summary>
            Holds the dictionary of parameters and their actual value.
            <para>
            Initialization: on-demand, see Parameters.
            </para>
            <para>
            Comparer: StringComparer.OrdinalIgnoreCase
            </para>
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null or if a parameter with the 
            specified name does not exist.</para></param>
            <returns>The value of the specified parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If parameterName is not found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.ExecutionParameterAccessor.Contains(System.String)">
            <summary>
            Determines whether the set of parameters contains an element with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter whose value is requested.
            <para>The parameter names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para>
            </param>
            <returns>True, if the set of parameters contains an element with the specified
            name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If parameterName is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.MacroExecutionStatus">
            <summary>
            The enum MacroExecutionStatus defines the status values of a macro that ran to completion.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.MacroExecutionStatus.Failed">
            <summary>
            The macro has failed.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.MacroExecutionStatus.Succeeded">
            <summary>
            The macro succeeded.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.MacroExecutionStatus.Neutral">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExecutionContext.MacroExecutionStatus.Canceled">
            <summary>
            The macro was cancelled.
            </summary>
            <remarks>This status should be returned in case the macro detects and honors a cancellation request.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpression">
            <summary>
            Implements CO type related filter expression.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpression.#ctor(Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            ctor
            </summary>
            <param name="oType">Type of object</param>
            <param name="filter">Filter expression</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpression.ObjectType">
            <summary>
            Gets the type of target object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpression.Expression">
            <summary>
            Gets filter's expression.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpression.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines expression list with another expresson list
            </summary>
            <param name="list2combine">List to combine</param>
            <param name="combineOp">Logical operation to be used for combining</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList">
            <summary>
            The class EntityExpressionList implements COM-visible collection of CO type related filter expressions
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpression})">
            <summary>
            Public constructor.
            </summary>
            <param name="list">List of filter expressions related to CO types.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.#ctor(System.Collections.Generic.Dictionary{Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression})">
            <summary>
            Public constructor.
            </summary>
            <param name="list">List of filter expressions related to CO types.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.Item(Audicon.SmartAnalyzer.Common.Types.GenericObjectType)">
            <summary>
            Gets the filter expressions related to CO type specified.
            </summary>
            <param name="oType">CO type.</param>
            <returns>Filter expression related to CO type specified.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.Count">
            <summary>
            Retrieves the length of the collection.
            </summary>
            <returns>Length of the collection.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.EntityExpressionList.Combine(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines expression list with another expresson list
            </summary>
            <param name="list2combine">List to combine</param>
            <param name="combineOp">Logical operation to be used for combining</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.Extensions.GetValidExpression(Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationPart,System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Storage.IProperty})">
            <summary>
            Converts filter equation to filter expression
            </summary>
            <param name="equation">Equation to convert</param>
            <param name="properties">List of available properties</param>
            <returns>Result expression</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.Extensions.ToExpressionList(Audicon.SmartAnalyzer.Common.Interfaces.Equation.IEquationForObjectTypeList)">
            <summary>
            Casts from filter in equation format to filter in expression COM visible format
            </summary>
            <param name="equationList"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.Extensions.ToSaModuleType(Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType)">
            <summary>
            Determines target SA module type based on App Workflow standard action type
            </summary>
            <param name="stdActionType"></param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.PredefinedFilter">
            <summary>
            Implements external filter of runtime type.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.PredefinedFilter.#ctor(System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList)">
            <summary>
            ctor
            </summary>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="filter">Filter expression</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PredefinedFilter.Alias">
            <summary>
            Gets filter's alias.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PredefinedFilter.SaModuleType">
            <summary>
            Gets the type of target SA module
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PredefinedFilter.ExpressionList">
            <summary>
            Gets filter's expression.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter">
            <summary>
            Implements external filter of runtime type.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.#ctor(System.Guid,System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="id">Filter Id</param>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="filter">Filter expression</param>
            <param name="isTemp">True if temporary filter</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.#ctor(System.Guid,System.String,Audicon.SmartAnalyzer.Common.Types.SaModuleType,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IEntityExpressionList,System.Boolean,System.Version)">
            <summary>
            ctor
            </summary>
            <param name="id">Filter Id</param>
            <param name="alias">Filter alias</param>
            <param name="saModuleType">Type of target SA module</param>
            <param name="filter">Filter expression</param>
            <param name="isTemp">True if temporary filter</param>
            <param name="version">Filter vesrsion</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IRuntimeFilter)">
            <summary>
            ctor
            </summary>
            <param name="dbFilter">DB-based filter</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.Alias">
            <summary>
            Gets filter's alias.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.SaModuleType">
            <summary>
            Gets the type of target SA module
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.ExpressionList">
            <summary>
            Gets filter's expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.Name">
            <summary>
            Gets filter's name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.Description">
            <summary>
            Gets filter's description.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.Version">
            <summary>
            Gets filter's version as String
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.IsTemporary">
            <summary>
            Specifies if filter is a temporary one
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.AddExpression(Audicon.SmartAnalyzer.Common.Types.GenericObjectType,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.LogicalOP)">
            <summary>
            Combines filter expression with another expression
            </summary>
            <param name="oType">Target object type</param>
            <param name="sourceFilter">Source filter</param>
            <param name="combineOp">Logical operation to combine with</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.Id">
            <summary>
            Gets filter's unique ID.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.BaseVersion">
            <summary>
            Gets filter's version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.PublicRuntimeFilter.IsNew">
            <summary>
            Specifies if filter object is yet not saved
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor">
            <summary>
            Represents runtime external filter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType)">
            <summary>
            ctor
            </summary>
            <param name="workflowId">Current App Workflow Id</param>
            <param name="saModule">Target SA module</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.String,System.Version)">
            <summary>
            ctor
            </summary>
            <param name="workflowId">Current App Workflow Id</param>
            <param name="saModule">Target SA module</param>
            <param name="alias">Filter alias</param>
            <param name="version">Filter version</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Types.SaModuleType,System.String,System.Version,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="workflowId">Current App Workflow Id</param>
            <param name="saModule">Target SA module</param>
            <param name="alias">Filter alias</param>
            <param name="version">Filter version</param>
            <param name="isTemp">True if temporary runtime filter</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter)">
            <summary>
            ctor
            </summary>
            <param name="workflowId">Current App Workflow Id</param>
            <param name="saModule">Runtime filter instance</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.AppWorkflowId">
            <summary>
            Current App Workflow Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.SaTargetModule">
            <summary>
            Target SA module
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.Alias">
            <summary>
            Filter alias
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.Version">
            <summary>
            Filter version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor.IsTemporary">
            <summary>
            True if temporary runtime filter
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterEventArgs">
            <summary>
            Runtime filters event arguments
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterEventArgs.FilterDescriptor">
            <summary>
            Filter descriptor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterEventArgs.FilterEventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterEventArgs.#ctor(Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFilterDescriptor,Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType)">
            <summary>
            ctor
            </summary>
            <param name="descr">Filter descriptor</param>
            <param name="eventType">Event type</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFiltersAccessor">
            <summary>
            The class RuntimeFiltersAccessor implements COM-visible collection of runtime filters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFiltersAccessor.#ctor(System.Collections.Generic.IEnumerable{Audicon.SmartAnalyzer.Common.Interfaces.Filtering.IPublicRuntimeFilter})">
            <summary>
            Public constructor.
            </summary>
            <param name="list">List of audit folder data.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFiltersAccessor.Item(System.Int32)">
            <summary>
            Gets the runtime filter specified by index within the list.
            </summary>
            <param name="index">The index of the runtime filter whose data is requested.</param>
            <returns>The data of the specified runtime filter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFiltersAccessor.Count">
            <summary>
            Retrieves the length of the list of runtime filters.
            </summary>
            <returns>Length of the list of runtime filters.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Filtering.RuntimeFiltersAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity">
            <summary>
            Class representing IDEA file in project folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.FileSystemEntityType">
            <summary>
            Abstract method's implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.FolderId">
            <summary>
            IDEA project subfolder Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.InternalId">
            <summary>
            Internal IMD file Id
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            ctor
            </summary>
            <param name="path">File path</param>
            <param name="location">File location</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="path">File path</param>
            <param name="location">File location</param>
            <param name="ensureActiveProject">If true, file has to belong to active IDEA project</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.#ctor(System.Guid,System.Guid,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="id">File Id</param>
            <param name="folderId">Project subfolder Id</param>
            <param name="path">File path</param>
            <param name="location">File location</param>
            <param name="ensureActiveProject">If true, file has to belong to active IDEA project</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileEntity.#ctor(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            ctor for server file
            </summary>
            <param name="file">Server file reference</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity">
            <summary>
            File system entity description
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.Id">
            <summary>
            Entity's ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.Path">
            <summary>
            Entity's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.ActiveProjectSubfolder">
            <summary>
            Entity's name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.FileSystemEntityType">
            <summary>
            Entity type (file or folder)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.FolderId">
            <summary>
            Entity containing folder Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.InternalId">
            <summary>
            Entity internal Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.Location">
            <summary>
            Entity location
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.EnsureActiveProject">
            <summary>
            If true, file system entity has to belong to active IDEA project
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.#ctor(System.Guid,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            ctor
            </summary>
            <param name="id">Entity Id</param>
            <param name="path">Entity path</param>
            <param name="location">Entity location</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity.ToString">
            <summary>
            Overridden base class method
            </summary>
            <returns>Representation as string</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity">
            <summary>
            Class representing IDEA project folder
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.FileSystemEntityType">
            <summary>
            Abstract method's implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.FolderId">
            <summary>
            Abstract method's implementation
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            ctor
            </summary>
            <param name="path">Folder path</param>
            <param name="location">Folder location</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="path">Folder path</param>
            <param name="location">Folder location</param>
            <param name="ensureActiveProject">If true, folder has to belong to active IDEA project</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.#ctor(System.Guid,System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="id">Folder Id</param>
            <param name="path">Folder path</param>
            <param name="location">Folder location</param>
            <param name="ensureActiveProject">If true, folder has to belong to active IDEA project</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFolderEntity.#ctor(IdeaServer.Core.Entities.Interfaces.IIMDFolder)">
            <summary>
            ctor for server project folder
            </summary>
            <param name="folder">Server folder reference</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.ParameterizedIdeaFileSystemEntity">
            <summary>
            File system entity accompained with list of its extended parameters
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.ParameterizedIdeaFileSystemEntity.#ctor(Audicon.SmartAnalyzer.Common.Types.GlobalParameters.IdeaFileSystemEntity)">
            <summary>
            ctor
            </summary>
            <param name="entity">File system entity to wrap</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.ParameterizedIdeaFileSystemEntity.Entity">
            <summary>
            Wrapped file system entity
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.ParameterizedIdeaFileSystemEntity.Parameters">
            <summary>
            Entity's extended parameters list
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.GlobalParameters.ParameterizedIdeaFileSystemEntity.Item(System.String)">
            <summary>
            Parameter values accessor
            </summary>
            <param name="paramName">Parameter name</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.LazyNode`1">
            <summary>
            Node with children class where children are represented by lazy collection. Node wraps content object of parametrized type
            </summary>
            <typeparam name="T">Type of wrapped node content</typeparam>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.m_initializeChildren">
            <summary>
            Init children falsg
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.m_parent">
            <summary>
            Node parent
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.m_content">
            <summary>
            Node content object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.Children">
            <summary>
            Returns the node's children
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.Content">
            <summary>
            Returns the wrapped content object
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.#ctor(`0,System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,Audicon.SmartAnalyzer.Common.Types.LazyNode{`0},System.Boolean,Audicon.SmartAnalyzer.Common.Types.LazyNode{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="content">Content to wrap</param>
            <param name="contentFactory">Factory method to obtain child content objects</param>
            <param name="nodeFactory">Factory method to create new node instance from content objects</param>
            <param name="initializeChildren">If true, immediately initilized children collection</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.#ctor(Audicon.SmartAnalyzer.Common.Types.LazyNode{`0},`0,System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,Audicon.SmartAnalyzer.Common.Types.LazyNode{`0},System.Boolean,Audicon.SmartAnalyzer.Common.Types.LazyNode{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="parent">Parent node</param>
            <param name="content">Content to wrap</param>
            <param name="contentFactory">Factory method to obtain child content objects</param>
            <param name="nodeFactory">Factory method to create new node instance from content objects</param>
            <param name="initializeChildren">If true, immediately initilized children collection</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.LazyNode`1.RefreshChildren">
            <summary>
            Re-obtains the children list
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.HResults">
            <summary>
            Defines some frequently used HRESULTS.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.HResults.E_FAIL">
            <summary>
            HRESULT E_FAIL
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager">
            <summary>
            Static class to manage log entries
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IParentData,System.String)">
            <summary>
            Contructor
            </summary>
            <param name="parent">Parent data if available</param>
            <param name="logFile">Default log path</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.GetLogHeader">
            <summary>
            Prepares and returns the header for log file
            </summary>
            <returns>header text</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.ClearLog">
            <summary>
            Empties memory log
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.GetLog">
            <summary>
            Returns log object
            </summary>
            <returns>RoutineLoggingHelper object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.GetLogEntries">
            <summary>
            Returns the collection of log entries collected until now
            </summary>
            <returns>SimpleLogEntryReadOnlyCollection object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.WriteLog(System.String)">
            <summary>
            Writes memory log into the specified file
            </summary>
            <param name="logFile">path to the log file; if not set the default one is used</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the log file path is null or empty and the default path is also null or empty</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.LogManager.WriteLog(System.Text.StringBuilder)">
            <summary>
            Writes memory log into a string builder object
            </summary>
            <param name="builder">string builder object in which the log will be written</param>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is null</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType">
            <summary>
            LogEntryType defines the available log entry types.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType.Information">
            <summary>
            The log entru contains an informational message.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType.Warning">
            <summary>
            The log entry contains information about a warning.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType.Error">
            <summary>
            The log entry contains information about an error
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector">
            <summary>
            Implements a simple logger that collects the log entries in a list.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.#ctor(System.Int32)">
            <summary>
            Initializes a new SimpleLogEntriesCollector and sets the entry count limit.
            </summary>
            <param name="maxEntryCount">The max entry count. 
            Once this limit is reached, the object ignores any further requestes to collect log entries.
            <para>The special value -1 means that the limit is set to Int32.MaxValue.</para></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If maxEntryCount is less than -1.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.MaxEntryCount">
            <summary>
            Gets the max number of entries the object can collect.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.m_maxEntryCount">
            <summary>
            Holds the max number of log entries. 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.Log(Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry)">
            <summary>
            Adds the the specified log entry at the end of the log.
            </summary>
            <param name="logEntry">The entry to log. An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If logEntry is null.</exception>
            <remarks>If the max entry count is already reached, the method does nothing.
            <para>The method writes also a message to the console.</para></remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.LogEntries">
            <summary>
            Gets a read-only list of the collected log entries in the order of their arrival.
            The return value will never be null.
            </summary>
            <remarks>The return value will never be null.
            <para>This property is read-only.</para></remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.InternalLogEntries">
            <summary>
            Gets a reference to the list of log entries.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.m_logEntries">
            <summary>
            Holds a reference to a list that holds the log entries.
            Initialization: on-demand
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntriesCollector.WriteLine(System.String)">
            <summary>
            Writes the specified string, followed by the line terminator, to the debugger.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry">
            <summary>
            The class SimpleLogEntry holds the data of a simple log entry.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry.#ctor(Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType,System.String)">
            <summary>
            Initializes a new instance of type SimpleLogEntry with the specified message and its type.
            </summary>
            <param name="logEntryType">The type of the message to log.</param>
            <param name="message">A string containg the message to log. Can be null or empty.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry.EntryType">
            <summary>
            Gets the type of the log enrtry.
            </summary>
            <remarks>This property is read-only.
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry.Message">
            <summary>
            Gets the message that is contained in the log entry.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry.CreationTime">
            <summary>
            Gets the UTC date and time at which the current entry was created.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntryReadOnlyCollection">
            <summary>
            SimpleLogEntryReadOnlyCollection represents a read-only collection of simple log entries.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntryReadOnlyCollection.#ctor(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntry})">
            <summary>
            Initializes a new instance of type SimpleLogEntryReadOnlyCollection that is a read-only wrapper around a list.
            </summary>
            <param name="list">The list to wrap. An exception is thrown, if the list is null.</param>
            <exception cref="T:System.ArgumentNullException">If list is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogEntryReadOnlyCollection.ToString">
            <summary>
            Returns a string representation of the items in the collection. The items are separated by CRLF.
            </summary>
            <returns>A string containing the items in the collection.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogger">
            <summary>
            A delegate that handles a log entry.
            </summary>
            <param name="logEntry">The log entry to handle. An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If logEntry is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper">
            <summary>
            This class provides logging functionality that can be used by SA routines and their executors.
            </summary>
            <remarks>
            The current implementation writes the log entries to the console.
            The final implementation shall use a caller-supplied object to move the log requests toward their consumers.
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.#ctor(Audicon.SmartAnalyzer.Common.Types.Logging.SimpleLogger)">
            <summary>
            Initializes a new instance of type RoutineLoggingHelper with the specified logger.
            </summary>
            <param name="logger">A reference to the logger. An exception is thrown if this reference is null.</param>
            <exception cref="T:System.ArgumentNullException">If logger is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.Logger">
            <summary>
            Gets a reference to the logger that was specified at construction time.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.m_logger">
            <summary>
            Holds a reference to the logger to which the helper delegates the calls to add data to the log. 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.RoutineStrings">
            <summary>
            Gets / sets the culture-specific string accessor used by the logging helper's WithId methods.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.m_stringGetter">
            <summary>
            Holds a reference to an optional string accessor that is used by the WithId methods.
            Default value: null.
            Intialization: The getter of the property RoutineStrings.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogError(System.String,System.Object[])">
            <summary>
            Logs an error.
            </summary>
            <param name="message">The error message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogErrorWithId(System.String,System.Object[])">
            <summary>
            Logs an error with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogMessage(System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="message">The message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogMessageWithId(System.String,System.Object[])">
            <summary>
            Logs a message with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para>
            </param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning.
            </summary>
            <param name="message">The message to log. An exception is thrown if the message is null.</param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.LogWarningWithId(System.String,System.Object[])">
            <summary>
            Logs a warning with the specified resource id.
            </summary>
            <param name="resourceId">The id of the resource to load. An exception is thrown if resourceId is null.
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.FormatMessage(System.String,System.Object[])">
            <summary>
            Formats a string using the specified arguments.
            </summary>
            <param name="message">The format (with indexed placeholders) message. An exception is thrown if message is null.</param>
            <param name="args">The arguments for formatting the message.
            </param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.DoFormatMessage(System.String,System.Object[])">
            <summary>
            Formats a string using the specified arguments. FormatMessage delegates its implementation to this function.
            </summary>
            <param name="message">The format (with indexed placeholders) message. An exception is thrown if message is null.</param>
            <param name="args">The arguments for formatting the message.
            </param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.FaultTolerantFormatMessage(System.String,System.Object[])">
            <summary>
            Formats a string using the specified arguments.
            </summary>
            <param name="message">The format (with indexed placeholders) message. An exception is thrown if message is null.</param>
            <param name="args">The arguments for formatting the message.
            </param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.FaultTolerantFormatMessage(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Formats a string using the specified arguments.
            </summary>
            <param name="provider">The FormatProvider.</param>
            <param name="message">The format (with indexed placeholders) message. An exception is thrown if message is null.</param>
            <param name="args">The arguments for formatting the message.
            </param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.FormatMessageWithId(System.String,System.Object[])">
            <summary>
            Loads a resource string and formats it using the specified arguments.
            </summary>
            <param name="resourceId">The id of the resource to load. 
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.DoFormatMessageWithId(System.String,System.Object[])">
            <summary>
            Loads a resource string and formats it using the specified arguments.
            FormatMessageWithId delegates its implementation to this function.
            </summary>
            <param name="resourceId">The id of the resource to load. 
            <para>The resource lookups are case-insensitive.</para>
            <para>If a message with the specified id does not exist, the function composes a standard message
            that includes a reference to the missing id and the string representation of the arguments.
            </para></param>
            <param name="args">The arguments for formatting the message.</param>
            <returns>A string. See also: string.Format. If the array args is null or empty, the function returns message.
            <para>In case a FormatException is thrown by string.Format, the function composes a standard message that 
            includes a reference to message and the string representation of the arguments.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">If resourceId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Logging.RoutineLoggingHelper.Log(Audicon.SmartAnalyzer.Common.Types.Logging.LogEntryType,System.String)">
            <summary>
            Logs the specified log entry.
            </summary>
            <param name="entryType">The type of the entry.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Periods.NullTestPeriod">
            <summary>
            Service class used to specify empty period
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Periods.TestPeriods">
            <summary>
            The class TestPeriods implements the access to the period-related actual parameters of a test execution.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Periods.TestPeriods.From">
            <summary>
            Gets / sets the start date of the test's period.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Periods.TestPeriods.m_fromDate">
            <summary>
            Holds the start date of the period.
            Default value: DateTime.MinValue
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Periods.TestPeriods.To">
            <summary>
            Gets / sets the end date of the test's period.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Periods.TestPeriods.m_toDate">
            <summary>
            Holds the end date of the period.
            Default value: DateTime.MaxValue
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.QueueEventArgs`1">
            <summary>
            Class representing arguments of queue events 
            </summary>
            <typeparam name="T">type of queue's element</typeparam>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.QueueEventArgs`1.Name">
            <summary>
            Conatins name of the queue
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.QueueEventArgs`1.Length">
            <summary>
            Contains current queue's length
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.QueueEventArgs`1.Element">
            <summary>
            Contains element processed in current event
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.QueueEventArgs`1.Cancel">
            <summary>
            If set after event was handled, the caller has to cancel execution
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ReportAttribute">
            <summary>
            Custom metadata attribute describing report extensions' capabilities. This attribute is conform with the contract
            Audicon.SmartAnalyzer.Common.Interfaces.IReportCapabilities
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.ReportType">
            <summary>
            Report extension's type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.LimitedTo">
            <summary>
            The Limited To option means whether a report is limited for certain results. 
            For instance we will have SoD reports which do not make sense for non-SoD results.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.Viewer">
            <summary>
            What is used to view the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.ReportId">
            <summary>
            Unique name of the report.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.Sequence">
            <summary>
            Order of the plugin in the list of all plugins.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ReportAttribute.HasOptionsDialog">
            <summary>
            True if report has options dialog.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ReportType">
            <summary>
            Report types
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportType.Report">
            <summary>
            The report is type Report
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportType.Export">
            <summary>
            The report is type Export
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer">
            <summary>
            Viewer (N/A, TX, Excel, HTML, XAML)
            What is used to view the report.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer.none">
            <summary>
            N/A - Not available.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer.TX">
            <summary>
            TX Control.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer.Excel">
            <summary>
            Excel Worksheep.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer.Html">
            <summary>
            HTML.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ReportTypeViewer.Xaml">
            <summary>
            XAML.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ResultsByTest">
            <summary>
            Sends results gouped by tests to IReport.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ResultsByTest.AddResult(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest,System.Boolean)">
            <summary>
            Add a result to collection.
            </summary>
            <param name="result">The ITestResultFile object.</param>
            <param name="test">The ITest object.</param>
            <param name="selected">True if the result is selected.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ResultsByTest.IsSelected(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Returns True if the result is selected.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ResultsByTest.Tests">
            <summary>
            The list of results of a specific test.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ResultsByTest.Item(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest)">
            <summary>
            The list of results of a specific test.
            </summary>
            <param name="index">The test to get the list of results.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringAccessor">
            <summary>
            The class RoutineStringAccessor provides read-only access to a routine's set of string resources.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringAccessor.#ctor">
            <summary>
            Initializes an instance of type RoutineStringAccessor that provides access to an empty set of strings.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringAccessor.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.RoutineResources.IStringGetter)">
            <summary>
            Initializes an instance of type RoutineStringAccessor with a reference to a getter object.
            </summary>
            <param name="stringGetter">The IStringGetter that provides access to a set of strings. 
            An exception is thrown, if this reference is null.
            <para>The object holds a reference to the IStringGetter, but it does not own the object; therefore the caller is 
            responsible to dispose of the getter when the RoutineStringAccessor gets out of scope.</para></param>
            <exception cref="T:System.ArgumentNullException">If resourceSet is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringAccessor.Item(System.String)">
            <summary>
            Gets the value of the specified string resource.
            </summary>
            <param name="name">The name of the string resource whose value is requested.
            <para>The string names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para></param>
            <returns>The value of the specified string resource. 
            If the specified string is not found, an empty string is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringAccessor.m_stringGetter">
            <summary>
            Holds a reference to the string getter that provides 
            access to a set of strings localized for one specific culture.
            Default value: null.
            Initialization: The constructor that takes an IStringGetter reference.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter">
            <summary>
            The class RoutineStringGetter implements a string getter over a set of strings
            in a ResourceSet and an optional fallback ResourceManager.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.#ctor">
            <summary>
            Initializes a new instance of type RoutineStringGetter over an empty set of strings.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.#ctor(System.Resources.ResourceSet,System.Resources.ResourceManager,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of type RoutineStringSetter over an optional set of strings.
            </summary>
            <param name="resourceSet">An optional per-routine ResourceSet. Can be null.</param>
            <param name="globalResourceManager">An optional ResourceManager for the global routine resources.
            Can be null.</param>
            <param name="culture">An optional culture for accessing the localized resources in ResourceManager. 
            If this reference is null, the object uses the current thread's CurrentUICulture at the time the resource is requested.</param>
            
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.GlobalResourceManager">
            <summary>
            Gets the ResourceManager for the global routine resources 
            that was specified at the time of construction.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.m_globalResourceManager">
            <summary>
            Holds a reference to an optional ResourceManager
            for the global routine resources.
            Default value: null
            Initialization: Constructor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.Culture">
            <summary>
            Gets the CultureInfo for accessing GlobalResourceManager
            that was specified at the time of the construction.
            If this reference is null, the object uses the current thread's 
            CurrentUICulture at the time the resource is requested.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.m_culture">
            <summary>
            Holds a reference to an optional CultureInfo object that is
            used to lookup a localized string in GlobalResourceManager.
            Default value: null
            Initialization: Constructor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.ResourceSet">
            <summary>
            Gets the per-routine ResourceSet that was specified at the time of construction.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.m_resourceSet">
            <summary>
            Holds a reference to an optional per-routine ResourceSet.
            Default value: null
            Initialization: Constructor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.RoutineResources.RoutineStringGetter.GetString(System.String)">
            <summary>
            Gets the value of the string with the specified name.
            </summary>
            <param name="name">The name of the string resource whose value is requested.
            <para>The string names are case insensitive (comparer: 'OrdinalIgnoreCase').</para>
            <para>An exception is thrown if the name is null.</para></param>
            <returns>The value of the specified string resource. 
            If the specified string is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
            <remarks>The lookup order is: ResourceSet, GlobalResourceManager.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.InstanceActivator">
            <summary>
            Load types from SmartAnalyzer assemblies using Activator.
            The goal is to minimize the places that must be updated in case one of the name components 
            of the type name changes and the u-test should provide fast feedback in case of such changes.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.InstanceActivator.CreateInstanceOfIProjectInfo">
            <summary>
            Creates an instance of type IProjectInfo.
            </summary>
            <returns>An instance of type IProjectInfo</returns>
            <exception cref="T:System.TypeLoadException">Thrown when an instance of type IProjectInfo cannot be created.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace">
            <summary>
            SmartAnalyzerTrace provides access to the trace sources of SA
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.FileLogTraceListenerDefaultLocationRemover">
            <summary>
            This class makes up for the feature of FileLogTraceListener class whose constructor always create the default output
            folder Documents and Settings\username\Application Data\CompanyName\ProductName\ProductVersion
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.Trace">
            <summary>
            Gets a reference to SA's common trace source.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.m_commonTraceSource">
            <summary>
            Represents the common trace source of SA.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.GetAppDataLogsLocation">
            <summary>
            Returns the location of the current user's SA log files.
            </summary>
            <returns>The fully-qualified name of the folder that holds SA's per-user log files.</returns>
            <remarks>
            <para>The function cannot use the service IApplicationEnvironment 
            because the service is not necessarily available at the time of the call!</para>
            </remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.LogsLocation">
            <summary>
            Returns the location of the current user's SA log files.
            </summary>
            <returns>The fully-qualified name of the folder that holds SA's per-user log files or null if SmartAnalyzerFileLog FileLogTraceListener is not present</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.SATraceListener">
            <summary>
            Gets the SA trace listener.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.EnsureLogsDirectory(Microsoft.VisualBasic.Logging.FileLogTraceListener)">
            <summary>
            Ensures the logs directory.
            Can happens the log directory is deleted and the application will be block for a while
            </summary>
            <param name="fileListener">The file listener.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SmartAnalyzerTrace.EnsureLogsDirectory">
            <summary>
            Ensures the logs directory.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException">
            <summary>
            SourceDatabaseEmptyException is thrown whenever a result cannot be created
            because one of its source databases are empty.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.#ctor">
            <summary>
            Initializes a new SourceDatabaseEmptyException instance.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new SourceDatabaseEmptyException instance
            with a given message describing the error.
            </summary>
            <param name="message">A string describing the error/</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SourceDatabaseEmptyException class with the specified message and 
            a reference to the inner exception that has caused this exception.
            </summary>
            <param name="message">A string that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SourceDatabaseEmptyException class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.SourceDatabaseEmptyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo 
            with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Storage.DataAccessStorageExtensions">
            <summary>
            Extension methods for IDataAccessStorage.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Storage.DataAccessStorageExtensions.GetAlmProtectedPackages(Audicon.SmartAnalyzer.Common.Interfaces.IDataAccessStorage)">
            <summary>
            Returns an object that can be used to enumerate all ALM-protected packages in the
            specified data store.
            </summary>
            <param name="appStore">An IDataAccessStorage reference.</param>
            <returns>An IEnumerable&lt;IPackage&gt; reference.</returns>
            <exception cref="T:System.ArgumentNullException">If appsStore is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Storage.LicensableEntityExtensions">
            <summary>
            Extension methods for IPackage.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Storage.LicensableEntityExtensions.IsAlmProtected(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ILicensableEntity)">
            <summary>
            Determines whether an app is ALM protected.
            </summary>
            <param name="entity">An ILicensableEntity.</param>
            <returns>True if entity is ALM protected; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Storage.PackageExtensions">
            <summary>
            Extension methods for IPackage.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Storage.PackageExtensions.IsAlmProtected(Audicon.SmartAnalyzer.Common.Interfaces.Storage.IPackage)">
            <summary>
            Determines whether an app is ALM protected.
            </summary>
            <param name="package">An IPackage.</param>
            <returns>True if the app is ALM protected; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If package is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor">
            <summary>
            Describes file/test tagging action; server-side operations store serialized ActionDescriptor instances within the server library
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor.FileId">
            <summary>
            Id of IDEA table which gets associated to the tests
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor.TestFilter">
            <summary>
            Filter defining the scope of tests the action creates associations for; null means all tests are involved
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor.InputFilesAlias">
            <summary>
            Restrict new associations to input files' alaises from this list; null means all input files are involved
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor.TestTableAssociateOptions">
            <summary>
            Associate options
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociateActionDescriptor.#ctor(System.Guid,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions,System.String)">
            <summary>
            ctor
            </summary>
            <param name="fileId"></param>
            <param name="filter"></param>
            <param name="options"></param>
            <param name="inputFilesAlias"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger">
            <summary>
            Provides table tagging with creating table/test associations functionality.
            Removing the tags from tables is not possible
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.AssociationsUpdated">
            <summary>
            Indicates whether test/table associations were updated recently 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.NewAssociations">
            <summary>
            Returns list of associations created during the last associate operation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.DbTable">
            <summary>
            IDEA table under tagging
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.#ctor(System.String)">
            <summary>
            Specialized constructor.
            </summary>
            <param name="tablePath">Full path of the idea table.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file does not exist.</exception>
            <exception cref="T:System.ApplicationException">Thrown when the list of fields is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.#ctor(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Specialised constructor. Implies open database location to be that of execution
            </summary>
            <param name="ideaDatabase">Reference to opened idea database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Instanciates the class using a file name and a flag(local or on server).
            </summary>
            <param name="tablePath">Name of the file with extension.</param>
            <param name="location">Location of the file to be tagged (Local or Server).</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.#ctor(IdeaServer.Core.Entities.Interfaces.IIMDFile)">
            <summary>
            Instantiates an object using server-side IMD file
            </summary>
            <param name="imdFile">Server-side IMD file</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.ClearFieldOfTagId(System.String)">
            <summary>
            Overrides base class method. Not implemented
            </summary>
            <param name="tagID"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.ClearTagging">
            <summary>
            Overrides base class method. Not implemented
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.SaveTagging">
            <summary>
            Overrides base class method
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.SaveTagging(Audicon.SmartAnalyzer.Common.Types.Modality)">
            <summary>
            Saves defined tagging to disk file.
            </summary>
            <param name="publishSharedTagging">Controls publishing the shared tagging data. "Never" suppresses publishing, "Always" allows it. 
            By "Default" publishing takes place only by cross-boundary tagging (local execution tagging server-side table)</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.AssociatePrimary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions)">
            <summary>
            Associate active IDEA table with primary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="options">Controlling options</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.AssociateSecondary(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression,System.String,Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions)">
            <summary>
            Associate active IDEA table with secondary input file of the tests specified by filter
            </summary>
            <param name="testFilter">Test filter</param>
            <param name="inputFileAlias">Secondary input file alias</param>
            <param name="options">Controlling options</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.GetNewServerTaggingActionsCount">
            <summary>
            Returns the count of newly published server-side actions
            </summary>
            <returns>Count</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.SynchronizeWithServerTaggingActions(System.EventHandler{Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs},System.EventHandler{Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs},System.EventHandler{Audicon.SmartAnalyzer.Common.Types.Collaboration.CollaboratorEventArgs})">
            <summary>
            Consumes newly published server-side actions
            </summary>
            <param name="downloadError">Optional handler for action download errors</param>
            <param name="getNewError">Optional handler for action deserializtion errors</param>
            <param name="consumeError">Optional handler for action consuming errors</param>
            <returns>Count of actions consumed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.GetInputFileResolutionState(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile)">
            <summary>
            Checks if the given logical input file can be satisfied with the currently tagged IDEA table in order to create new asociation
            </summary>
            <param name="inF">Logical input file</param>
            <returns>Level of resolution of logical input file tags when matched against active IDEA table tags</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.CanResolveTag(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITag)">
            <summary>
            Checks if the given tag can be satisfied with the currently tagged IDEA table in order to create new asociation
            </summary>
            <param name="tag">Tag to resolve</param>
            <returns>True if given tag can be resolved by current table under tagging</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.FindEligiblePrimaryAssociation(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest,Audicon.SmartAnalyzer.Common.Types.TagsResolutionState)">
            <summary>
            This method looks for already existing eligible association between test and table
            </summary>
            <param name="test"></param>
            <param name="inputFileResolution"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociatingTagger.IsPhysicalInputFileNullOrMatching(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile)">
            <summary>
            This method is used to select execution records eligible for creating the secondary association. Record is eligible if specified secondary file is:
            a) not assigned; b) assigned to active table
            </summary>
            <param name="er"></param>
            <param name="secInF"></param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo">
            <summary>
            Table/test association descriptor class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.IsNew">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.IsDirect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.TestId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.ExecutionRecordId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.IsPrimary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.InputFileAlias">
            <summary>
            
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo.InputFileId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.IAssociationInfoAccessor">
            <summary>
            The interface IAssociationInfoAccessor implements COM-visible collection of association descriptor objects
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IAssociationInfoAccessor.Item(System.Int32)">
            <summary>
            Gets the data of the association descriptor specified by index within the list.
            </summary>
            <param name="index">The index of the association descriptor whose data is requested.</param>
            <returns>The data of the specified association descriptor.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IAssociationInfoAccessor.Count">
            <summary>
            Retrieves the length of the list of association descriptor objects.
            </summary>
            <returns>Length of the list of association descriptor objects.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfoAccessor">
            <summary>
            The class AssociationInfoAccessor implements COM-visible collection of association descriptor objects
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfoAccessor.#ctor(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfo})">
            <summary>
            Public constructor.
            </summary>
            <param name="list">List of audit folder data.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfoAccessor.Item(System.Int32)">
            <summary>
            Gets the data of the association descriptor specified by index within the list.
            </summary>
            <param name="index">The index of the association descriptor whose data is requested.</param>
            <returns>The data of the specified association descriptor.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of legal range</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.AssociationInfoAccessor.Count">
            <summary>
            Retrieves the length of the list of association descriptor objects.
            </summary>
            <returns>Length of the list of association descriptor objects.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.ExecutionChange">
            <summary>
            Specifies what changes were made for a specific IExecutionRecord.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ExecutionChange.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="executionRecord">The execution record that changed.</param>
            <param name="isNew">True if execution record was just created.</param>
            <param name="isUpdated">True if execution record was updated.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.ExecutionChange.ExecutionRecord">
            <summary>
            The execution record in question.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.ExecutionChange.IsNewExecution">
            <summary>
            True if execution record was just created.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.ExecutionChange.IsUpdatedExecution">
            <summary>
            True, if an IExecutionRecord has been updated.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes">
            <summary>
            The bussiness logic types of an idea field.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.None">
            <summary>
            Column type not defined yet.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Boolean">
            <summary>
            Column of type boolean.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Character">
            <summary>
            Column of type character.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Numeric">
            <summary>
            Column of type numeric.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Date">
            <summary>
            Column of type date.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Time">
            <summary>
            Column of type time.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Multistate">
            <summary>
            Column of type multisate.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Unknown">
            <summary>
            Other unrecognized type.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaColumnTypes.Any">
            <summary>
            Any available type.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField">
            <summary>
            Bussiness logic class that represence an idea field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.FieldName">
            <summary>
            Name of the idea field.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when assigned value is null, empty or white space.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.FieldPosition">
            <summary>
            The position of the idea field in the array of table field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.ColumnType">
            <summary>
            The type of an idea field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.IsTagged">
            <summary>
            True, if idea field is initialiy tagged.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.GetTags">
            <summary>
            Returns the list of assigned tags to column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.AddTagId(System.String)">
            <summary>
            Add a tag to the column.
            </summary>
            <param name="tagId">Tag id to add.</param>
            <returns>True if tag has been added. If tag already is assigned it will return false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.RemoveTag(System.String)">
            <summary>
            Removes a tag from the column.
            </summary>
            <param name="tagId">The id of the tag.</param>
            <returns>True if the is assigned and it is removed.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.HasTag(System.String)">
            <summary>
            Checks if the tag is is assigned to a column.
            </summary>
            <param name="tagId">Id of the tag to check.</param>
            <returns>True if tag id is assigned to column.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.HasTags">
            <summary>
            Checks if the column has tags assigned.
            </summary>
            <returns>True if column has tags assigned.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField.RemoveAllTags">
            <summary>
            Removes all tags assigned to column.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo">
            <summary>
            Represents the idea table sumary path information.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.FilePath">
            <summary>
            The relative or absolute path of the file.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.FileName">
            <summary>
            The name of the file with extension.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.FileShortName">
            <summary>
            Name of the file with out the extension.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.IsLocal">
            <summary>
            True if the file is localted on desktop or False if the file is locat on server.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.IsVirtual">
            <summary>
            True if the file is localted on server and it is a virtual table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.IsProjectTable">
            <summary>
            True if table is located in current project.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.RowsCount">
            <summary>
            Number of rows/records present in table.
            If value is unknows -1 is returned.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.IsEmptyTable">
            <summary>
            True if table has no records.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.Id">
            <summary>
            Id of the idea table.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.PathIsAbsolute">
            <summary>
            True if file path is absolute.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Int64,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="filePath">Relative of absolute path of the file.</param>
            <param name="isLocal">True if file is local.</param>
            <param name="isProjectTable">True if file one of the files in current project. Fanse if file is outside project root folder.</param>
            <param name="rowsCount">Number of rows present in table. Default value is -1 for unknown value.</param>
            <param name="isVirtual">Optional boolean that specifies whether the file is virtual.
            The default value is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the file path is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the file path is empty or is a white space.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo.Equals(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo,Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo)">
            <summary>
            Checks if two IdeaTableInfo objects have same data.
            </summary>
            <param name="file1">Instance to compare.</param>
            <param name="file2">Instance to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging">
            <summary>
            Light tagging.
            Reads and performs tagging without checking for correctness against the database.
            To be used on idea server, idea script and places wher integrity is not a must.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.GetTagIdOfField(System.String)">
            <summary>
            Returns the ID of the tag assigned to the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the tag.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.GetFieldOfTagId(System.String)">
            <summary>
            Returns the name of the field assigned to the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.ClearTagIdOfField(System.String)">
            <summary>
            Removes the tagging from the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the removed tag.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.ClearFieldOfTagId(System.String)">
            <summary>
            Removes the tagging from the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the removed field.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.ClearTagging">
            <summary>
            Removes tagging from all table columns.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.SetTagIdToField(System.String,System.String)">
            <summary>
            Adds a tag to the specified field name.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.SetFieldToTagId(System.String,System.String)">
            <summary>
            Adds a field to the specified tag ID.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="tagID">ID of the tag.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.SaveTagging">
            <summary>
            Saves defined tagging to disk file.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.ITableTagging.SaveTaggingWithTestFilter(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves defined tagging to disk file; test filter for cretaing tests associations can be specified.
            <param name="testFilter">Test filter for cretaing tests associations.</param>
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData">
            <summary>
            Class represents the data published on server to ensure sharing the tagging information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.#ctor(System.String,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            ctor
            </summary>
            <param name="tableName">Name of the IMD file to publish the shared tagging data for</param>
            <param name="testFilter">Tests filter; if set, consuming the shared tagging data creates test associations only for the tests matching this filter</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.FileId">
            <summary>
            Id of IMD file that was tagged
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.UserId">
            <summary>
            Id of user who tagged the file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.User">
            <summary>
            Name of user who tagged the file
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.TestFilter">
            <summary>
            When consumed, associations for the file identified by FileId have to be created only for tests matching this filter
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.MergeTestFilters">
            <summary>
            Merges the internal tests filter with that currently stored within the IMDFile DB
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.SharedTaggingData.Trace(System.String)">
            <summary>
            Trace contents
            </summary>
            <param name="caption">Trace message caption</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging">
            <summary>
            Light tagging.
            Reads and performs tagging without checking for correctness against the database.
            To be used on idea server, idea script and places wher integrity is not a must.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.m_ideaFields">
            <summary>
            List of table's fields
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.m_ideaFilePath">
            <summary>
            Table's full path
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.m_fileName">
            <summary>
            Table's name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.m_isLocalFile">
            <summary>
            Table's location
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.SuppressSharedTaggingPublishing">
            <summary>
            Specifies whether physical file is associated with secondary logical input file
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.#ctor(System.String)">
            <summary>
            Specialized constructor.
            The caller should compute the full path of the file.
            </summary>
            <param name="tablePath">Full path of the idea table.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file does not exist.</exception>
            <exception cref="T:System.ApplicationException">Thrown when the list of fields is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.#ctor(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Specialised constructor.
            </summary>
            <param name="ideaDatabase">Reference to opened idea database.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.#ctor(System.String,System.Boolean)">
            <summary>
            Instanciates the class using a file name(no full path) and a flag(local or on server).
            </summary>
            <param name="relativeFileName">Name of the file with extension.</param>
            <param name="isLocal">True if is local and false if on server.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.#ctor(System.String,Audicon.SmartAnalyzer.IdeaAccess.Types.ExecutionLocation)">
            <summary>
            Instanciates the class using a file path and file location
            </summary>
            <param name="fileName">Path of the file with extension.</param>
            <param name="location">File location</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.GetTagIdOfField(System.String)">
            <summary>
            Returns the ID of the tag assigned to the specified field name. This method is not supported any more
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the tag.</returns>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.GetFieldOfTagId(System.String)">
            <summary>
            Returns the name of the field assigned to the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified tag ID does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.ClearTagIdOfField(System.String)">
            <summary>
            Removes the tagging from the specified field name. This method is not supported any more
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>ID of the removed tag.</returns>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.ClearFieldOfTagId(System.String)">
            <summary>
            Removes the tagging from the specified tag ID.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <returns>Name of the removed field.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified tag ID does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.ClearTagging">
            <summary>
            Removes tagging from all table columns.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.SetTagIdToField(System.String,System.String)">
            <summary>
            Adds a tag to the specified field name.
            </summary>
            <param name="tagID">ID of the tag.</param>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified field name does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.SetFieldToTagId(System.String,System.String)">
            <summary>
            Adds a field to the specified tag ID.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="tagID">ID of the tag.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the parameter is null, empty, or only white spaces.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified field name does not exist.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.SaveTagging">
            <summary>
            Saves defined tagging to disk file.
            </summary>
            <exception cref="T:System.Data.ConstraintException">Thrown when a field name or tag ID apears more then once.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when table to be tagged has no records.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.SaveTaggingWithTestFilter(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Saves defined tagging to disk file; test filter for cretaing tests associations can be specified.
            <param name="testFilter">Test filter for cretaing tests associations.</param>
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.GetTableTagging(System.String)">
            <summary>
            Returns the fields that have tags.
            </summary>
            <param name="tablePath">Full path to the idea table.</param>
            <returns>List of fields.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified file path is null, empty or white spaces.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.GetTableTagging(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Returns the fields that have tags.
            </summary>
            <param name="ideaDatabase">Full path to the idea table.</param>
            <returns>List of fields.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the specified idea databese reference is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TableTagging.GetTableTagging(System.String,System.Boolean)">
            <summary>
            Returns the fields that have tags.
            </summary>
            <param name="relativeFileName">Idea file name with no full path.</param>
            <param name="isLocal">True if file is local and false if it is on server.</param>
            <returns>List of fields.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.TaggingUtilities">
            <summary>
            Varios utilities' methods
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TaggingUtilities.GetConvertedDBTagType(Audicon.SmartAnalyzer.Common.Types.TagDataTypes)">
            <summary>
            Convert DataBase column type to Busines Layer column type.
            </summary>
            <param name="dtType">Type in the DataBase.</param>
            <returns>Type in the Bussines Layer.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TaggingUtilities.AddExpression(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpressionGroup,Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Adds filter expression to expression group
            </summary>
            <param name="target">Target group</param>
            <param name="expression">Expression to add</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo">
            <summary>
            Tha class that represent a Tag in the bussiness logic.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.DisplayName">
            <summary>
            The name to be displayed of a Tag.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when assigned value is null, empty or white space.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.TagName">
            <summary>
            The name of a Tag.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when assigned value is null, empty or white space.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.TagId">
            <summary>
            The ID of a Tag.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when assigned value is null, empty or white space.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.TagDescription">
            <summary>
            The description of a Tag.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown when assigned value is null, empty or white space.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.TagOwner">
            <summary>
            Owner of the tag, the person or comunity that created the tag.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.DataType">
            <summary>
            The data type required for the Tag.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.IsFiltered">
            <summary>
            Specifies if the current Tag should be visible by filter.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.CompatibleColumns">
            <summary>
            The list of idea fields that support mapping of this particulat Tag.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.AssignedField">
            <summary>
            The idea field where this Tag has been assignd to.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.IsMandatory">
            <summary>
            True, if column has to be tagged.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.IsUnknown">
            <summary>
            True if tag id is not preesent in local data base.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.IsTaggingError">
            <summary>
            True if tagging is not correct acording to tag type and assigned column type.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.LogicalTable">
            <summary>
            Name of logical input table the Tag is assigned to.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo.PhysicalTable">
            <summary>
            Name of physical input table the Tag is assigned to.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector">
            <summary>
            This class is supposed to collect tags' info on the server side. Its methods closely reflect the ones of
            Audicon.SmartAnalyzer.Client.Tagging.TaggingBusinessLogic class
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.#ctor(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo,System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo})">
            <summary>
            Initializes a new instance of type TagInfoCollector by specifying the 
            source table and the list of tags.
            </summary>
            <param name="tableInfo">A reference of type IdeaTableInfo holding data
            about the source table.</param>
            <param name="dbTags">A list holding the tags to be collected from the source
            table.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetTableTagging">
            <summary>
            Returns the list of tags applyed to the tabel and the assigned table column.
            Tags that are not used are not in the returned list.
            Each tag has only the assigned table column. There is no compatible columns list. The list is empty.
            The table tags are compared with the tags info in the Database. 
            Invalid tags or columns association will not be returned.
            </summary>
            <returns>The list of tags applyed to the tabel</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetAllTabelAndDatabaseTags">
            <summary>
            Get list of tags from data base plus available in idea table.
            </summary>
            <returns>List of all available tags.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetAllIdeaFields">
            <summary>
            Returns the list of fields and attached info for an idea table.
            </summary>
            <returns>List if idea tabel fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetIdeaTableFields(Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableInfo)">
            <summary>
            Get the fields of an idea table without using idea client.
            </summary>
            <param name="tableInfo">Path of the table from whre to read the fields.</param>
            <returns>List of the fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetCompatibleIdeaFields(Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfo)">
            <summary>
            Returns a list of column available in the idea table that are type compatible whit specified type.
            </summary>
            <param name="tagInfo">Tag to be compatible.</param>
            <returns>List of compatible idea columns.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Tagging.TagInfoCollector.GetAssignedIdeaTableField(System.String)">
            <summary>
            Get the idea column assigned to a tag.
            </summary>
            <param name="tagName">ID of the tag to get the assignament.</param>
            <returns>The idea field that is assigned.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestFailEventArgs">
            <summary>
            Event related to any test failures
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestFailEventArgs.TestId">
            <summary>
            Test identifier
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestFailEventArgs.Error">
            <summary>
            Test error
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestIdentifier">
            <summary>
            Represents compound test idetifier: DB test Id + test execution session Id
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.#ctor(System.Guid,System.Guid)">
            <summary>
            ctor
            </summary>
            <param name="testId">DB test Id</param>
            <param name="sessionId">test execution session Id</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.TestId">
            <summary>
            DB test Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.SessionId">
            <summary>
            test execution session Id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.LogicalId">
            <summary>
            Logical ID of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.ShortName">
            <summary>
            Short name of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.OwnerName">
            <summary>
            Owner's name of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.Version">
            <summary>
            Version of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestIdentifier.Culture">
            <summary>
            Culture of the test
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResultEntity">
            <summary>
            Class represents the selected test result type 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultInfo,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultDescriptor,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFileInfo,Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest)">
            <summary>
            ctor
            </summary>
            <param name="testResultInfo">TestResultInfo</param>
            <param name="testResultDescriptor">TestResultDescriptor</param>
            <param name="testResultFileInfo">TestResultFileInfo</param>
            <param name="testResultFile">TestResultFile</param>
            <param name="test">Test</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.TestResultInfo">
            <summary>
            Return the TestResultInfo object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.TestResultDescriptor">
            <summary>
            return TestResultDescriptor object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.TestResultFileInfo">
            <summary>
            return TestResultFileInfo object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.TestResultFile">
            <summary>
            Return TestResultFile object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResultEntity.Test">
            <summary>
            return Test object
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResultEntityInfo">
            <summary>
            Contains all available informations regarding a specific result test result.
            Design for lazy data loading.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResultEntityInfo.#ctor(Audicon.SmartAnalyzer.Common.Interfaces.ITestResultPublicInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="resultViewModel">Base result ViewModel.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo">
            <summary>
            Class confining necessary information on IDEA 
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.Initialize(System.String)">
            <summary>
            Initializes the IDEA info items
            </summary>
            <param name="installInfoRegKey">path to IDEA installation info Registry subkey</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.Version">
            <summary>
            IDEA version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.Language">
            <summary>
            IDEA language
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.Standard">
            <summary>
            IDEA standard (ASCII or Unicode)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.DateTimeMask">
            <summary>
            IDEA date mask
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.Is64BitProcess">
            <summary>
            IDEA bitness
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.IdeaLicenseKey">
            <summary>
            Gets the IDEA license key.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo.ToString">
            <summary>
            Custom string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor">
            <summary>
            Implements the description of a chart.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.#ctor(Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType)">
            <summary>
            Costructor with setting chart type
            </summary>
            <param name="type">Chart type</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            User defined deserialization.
            </summary>
            <param name="info">Serialization info object.</param>
            <param name="context">Streaming context object</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.WindowTitle">
            <summary>
            Gets or sets the width of the chart window.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the string is greater than 128 characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the input string is null or empty.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.WindowWidth">
            <summary>
            Gets or sets the width of the chart window.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the value set is negative.</exception>
            <remarks>Setting the value to 0 means screen width.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.WindowHeight">
            <summary>
            Gets or sets the height of the chart window.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the value set is negative.</exception>
            <remarks>Setting the value to 0 means screen height.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.ChartType">
            <summary>
            Gets the type of the chart.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.ChartTitle">
            <summary>
            Gets or sets the title of the chart.
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the string is greater than 128 characters.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.ShowLegend">
            <summary>
            Controls the visibility of the chart legend.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.XAxisTitle">
            <summary>
            Gets or sets the title of the X axis.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is Pie or Treemap.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the string is greater than 128 characters.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.YAxisTitle">
            <summary>
            Gets or sets the title of the Y axis.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is Pie or Treemap.</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when the length of the string is greater than 128 characters.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.Database">
            <summary>
            Gets or sets the source IDEA table.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when inputString is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 512</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.Field">
            <summary>
            Gets or sets the field from IDEA table used for X axis.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when inputString is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 40</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.IsStratified">
            <summary>
            Defines if stratification is applied to the base field.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is Pie, Scatter or Treemap.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.ExcludeErrors">
            <summary>
            Exclude zero, error, empty values.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.StatisticOperation">
            <summary>
            Defines what statistic operation is applied.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is Scatter and value set is not Count.</exception>
            <exception cref="T:System.ArgumentException">Trown when value set is not found in the base enumeration, or is None.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.AddStatisticField(System.String)">
            <summary>
            Adds extra field for statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when inputString is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 40</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.AddStatisticFieldWithColor(System.String,System.Byte,System.Byte,System.Byte)">
            <summary>
            Adds extra field for statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="colorRed">Color's red part.</param>
            <param name="colorGreen">Color's green part.</param>
            <param name="colorBlue">Color's blue part.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when inputString is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 40</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when any of the color parts is not between 0 and 255</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.SecondaryStatisticOperation">
            <summary>
            Defines what secondary statistic operation is applied.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is not Treemap.</exception>
            <exception cref="T:System.ArgumentException">Trown when value set is not found in the base enumeration.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.AddSecondaryStatisticField(System.String)">
            <summary>
            Adds extra field for secondary statistic operation.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when inputString is null or empty</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name set contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 40</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when type of the chart is not Treemap.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.GenerateXML">
            <summary>
            Generates idash xml file
            </summary>
            <returns>XmlDocument object</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartDescriptor.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            User defined serialization.
            </summary>
            <param name="info">Serialization info object.</param>
            <param name="context">Streaming context object.</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo">
            <summary>
            Class confining necessary globalization information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.ShortDatePattern">
            <summary>
            Current short date format
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.ShortTimePattern">
            <summary>
            Current short time format
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.NumberDecimalSeparator">
            <summary>
            Current number decimal separator
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.ListSeparator">
            <summary>
            Current text list separator
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.ToString">
            <summary>
            Custom string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.GlobalizationInfo.GlobalizationCulture">
            <summary>
            Returns the globalization culture as configured via Regional Settings
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo">
            <summary>
            Class confining necessary OS information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.Version">
            <summary>
            OS Version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.Is64BitOperatingSystem">
            <summary>
            OS Platform 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.Language">
            <summary>
            OS language
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.ToString">
            <summary>
            Custom string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.GlobalizationCulture">
            <summary>
            Returns the globalization culture as configured via Regional Settings
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.OperatingSystemInfo.LocalizationCulture">
            <summary>
            Returns the localization culture 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo">
            <summary>
            Class confining necessary information on Smart Analyzer 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo.ProductName">
            <summary>
            Customizable product name for output information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo.Initialize(System.String,System.String)">
            <summary>
            Initialization od class internal modules' lists
            </summary>
            <param name="saModulesPatern">File pattern of SA program modules</param>
            <param name="thirdPartySubfolder">Subfolder of SA 3d party components</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo.SAModules">
            <summary>
            List of SA modules in form of name/version pairs
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo.ThirdPartyModules">
            <summary>
            List of 3d party modules in form of name/version pairs
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo.ToString">
            <summary>
            Custom string presentation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType">
            <summary>
            Enumeration for Test Result Index table columns' symbolic names
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.SessionID">
            <summary>
            Designates the column SessionID
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.TestID">
            <summary>
            Designates the column TestID
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.UserName">
            <summary>
            Designates the column UserName
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.ExecutionDate">
            <summary>
            Designates the column ExecutionDate
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.State">
            <summary>
            Designates the column State
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.Server">
            <summary>
            Designates the column Server
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.Project">
            <summary>
            Designates the column Project
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.CorrelationID">
            <summary>
            Designates the column CorrelationId
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType.Comment">
            <summary>
            Designates the column Comment
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions">
            <summary>
            Wrapper class around NHibernate.Criterion.Restrictions allowing using columns' symbolic names instead of physical DB names
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Eq(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Eq
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Ge(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Ge
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Gt(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Gt
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.InsensitiveLike(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.InsensitiveLike
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.IsNotEmpty(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType)">
            <summary>
            Wrapper around Restrictions.IsNotEmpty
            </summary>
            <param name="property">Column's symbolic name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.IsEmpty(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType)">
            <summary>
            Wrapper around Restrictions.IsEmpty
            </summary>
            <param name="property">Column's symbolic name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.IsNotNull(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType)">
            <summary>
            Wrapper around Restrictions.IsNotNull
            </summary>
            <param name="property">Column's symbolic name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.IsNull(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType)">
            <summary>
            Wrapper around Restrictions.IsNull
            </summary>
            <param name="property">Column's symbolic name</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Le(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Le
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Like(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Like
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Lt(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object)">
            <summary>
            Wrapper around Restrictions.Lt
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="value">Column's value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.Between(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object,System.Object)">
            <summary>
            Wrapper around Restrictions.Between
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="lo">Column's low value</param>
            <param name="hi">Column's high value</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.In(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType,System.Object[])">
            <summary>
            Wrapper around Restrictions.In
            </summary>
            <param name="property">Column's symbolic name</param>
            <param name="values">Column's values' array</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictions.GetColumnName(Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultRestrictionsType)">
            <summary>
            Matches column's symbolic name to columns' physical DB name
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile">
            <summary>
            The class TestResultFile implements a test result file.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.#ctor">
            <summary>
            Initializes a new instance of type TestResultFile with default values.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.Name">
            <summary>
            Gets or sets the name of the result file.
            </summary>
            <remarks>Default value: string.Empty</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_name">
            <summary>
            A string containing the name of the result file.
            Default value: null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.Id">
            <summary>
            Gets or sets the identifier of the IDEA table.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_identifier">
            <summary>
            A string containing the id of the result file.
            Default value: null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ParentId">
            <summary>
            Gets or sets the identifier of the IDEA table's parent.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_parentId">
            <summary>
            A string containing the id of the parent of the result file.
            Default value: null.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.RecordCount">
            <summary>
            Gets or sets the number of records of the IDEA table with the specified Id.
            </summary>
            <remarks>If the record count is not known, the caller should set RecordCount to -1, which is also the default value of this property.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is less than -1.</exception>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_recordCount">
            <summary>
            An int that stores the number of records in the result file.
            Default value: -1.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ReportSequence">
            <summary>
            Gets or sets a number that indicates the report sequence of the result file.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_reportSequence">
            <summary>
            An int that stores the report sequence.
            Default value: Int32.MaxValue.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ResultIsVisible">
            <summary>
            Gets / sets a value indicating whether the result file is visible in the GUI.
            </summary>
            <remarks>Default value: True</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_resultIsVisible">
            <summary>
            A bool that ondicates whether the result file is visible in the GUI.
            Default value: true.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ResultType">
            <summary>
            Gets or sets a value that specifies the type of the result file.
            </summary>
            <remarks> Default value: TestResultTypes.None</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_resultType">
            <summary>
            Stores the result file types.
            Default value: TestResultFileTypes.None
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.AddReportType(System.String)">
            <summary>
            Adds a report type to the collection of the report types that are supported by the current result file.
            </summary>
            <param name="reportTypeId">The identifier of the report type to add.</param>
            <returns>True, if the specified report type was added, false, if a report type with the same value already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.RemoveReportType(System.String)">
            <summary>
            Removes a report type from the collection of the report types that are supported by the current result file.
            </summary>
            <param name="reportTypeId">The identifier of the report type to remove.</param>
            <returns>True, if the report type was removed, false, if the report type was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.SupportsReportType(System.String)">
            <summary>
            Determines if the test result file supports a given report type.
            </summary>
            <param name="reportTypeId">The identifier of the report.</param>
            <returns>True, if the specified report is supported; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If reportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.GetReportTypes">
            <summary>
            Gets an array with the identifiers of the report types that are supported by the current result file.
            </summary>
            <returns>An array containing all the supported report types. 
            The function returns an empty array if the collection of supported types is empty.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.SupportedReportTypes">
            <summary>
            Gets the hashset of identifiers of the report types that are supported by the current result file.
            </summary>
            <remarks>The hashset uses the following comparer: StringComparer.OrdinalIgnoreCase.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_reportTypes">
            <summary>
            A HashSet that holds the identifiers of the supported report types.
            The HashSet uses the following comparer: StringComparer.OrdinalIgnoreCase
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.AddSupportedExportType(System.String)">
            <summary>
            Adds an export type to the collection of the export types that are supported by the current result file.
            </summary>
            <param name="exportId">The identifier of the export type to add.</param>
            <returns>True, if the specified export type was added, false, if an export type with the same value already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If exportId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.RemoveSupportedExportType(System.String)">
            <summary>
            Removes an export type from the collection of the export types that are supported by the current result file.
            </summary>
            <param name="exportId">The identifier of the export type to remove.</param>
            <returns>True, if the export type was removed, false, if the export type was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If exportId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.SupportsExportType(System.String)">
            <summary>
            Determines if the test result supports a given export type.
            </summary>
            <param name="exportTypeId">The identifier of the export type.</param>
            <returns>True, if the specified export is supported; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If exportTypeId is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.GetSupportedExportTypes">
            <summary>
            Gets an array with the identifiers of the export types that are supported by the current result file.
            </summary>
            <returns>An array containing all the supported export types. 
            The function returns an empty array if the collection of supported exports is empty.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ExportTypes">
            <summary>
            Gets the hashset of identifiers of the report types that are supported by the current result file.
            </summary>
            <remarks>The hashset uses the following comparer: StringComparer.OrdinalIgnoreCase.</remarks>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_exportTypes">
            <summary>
            A HashSet that holds the identifiers of the supported export types.
            The HashSet uses the following comparer: StringComparer.OrdinalIgnoreCase
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ExtraValues">
            <summary>
            Gets a reference to a dictionary that can be used to store extra properties 
            (e.g., the columns to be included in a report or the number of rows to be displayed in a report) for a result.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.m_extraValues">
            <summary>
            A Hashtable that can be used to store extra properties for a result.
            The Hashtable uses the following comparer: StringComparer.OrdinalIgnoreCase.
            Default: null.
            Init: On demand (see ExtraValues).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.ExtraValuesComparer">
            <summary>
            Gets the comparer for the ExtraValues hashtable.
            </summary>
            <returns>StringComparer.OrdinalIgnoreCase</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFile.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by the formatter after the object was deserialized.
            </summary>
            <param name="context">A StreamingContext reference.</param>
            <remarks>This method ensures that m_extraValues is either null or an 
            instance of type IdeaScriptHashtable.
            <para>This method is necessary to ensure that m_extraValues has the
            correct type after an older version of the type was deserialized.</para>
            </remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles">
            <summary>
            The class TestResultFiles implements a test result files collection.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.#ctor">
            <summary>
            Initializes a new empty collection of TestResultFiles.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.Create">
            <summary>
            Creates an empty test result.
            </summary>
            <returns>A reference to an empty test result.</returns>
            <remarks>This method does not add the newly created result to the collection of test results.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.Add(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Adds a result to the end of the collection of test results.
            </summary>
            <param name="value">The object to insert. An exception is thrown, if this reference is null.</param>
            <returns>True, if the result was added, false, if the result already exists.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.Remove(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Removes a result from the from the collection of test results.
            </summary>
            <param name="value">The object to remove from the list. If the object is not in the list, the function does nothing.</param>
            <returns>True, if the result was removed, false, if the result was not found.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.Clear">
            <summary>
            Removes all results from the collection of test results.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.GetTestResultFiles">
            <summary>
            Gets an array with all test results in the current collection in the order in which they were added.
            </summary>
            <returns>An array containing all test results in the current collection. 
            The function returns an empty array if the collection is empty.</returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.Items">
            <summary>
            Gets the list of items.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.m_items">
            <summary>
            A list that holds the result file references.
            The hashset will use a ReferenceComparer.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of type TestResultFiles class with serialized data.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized 
            object data about the exception being thrown.</param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo 
            with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFiles.ItemsKey">
            <summary>
            This is the name under which m_items is stored in 
            SerializationInfo during serialization / deserialization.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor">
            <summary>
            Represent the overall result of audit test execution. 
            See the TFS document $/SmartAnalyzer/Main/Docs/Development/Client/Components/ReportingRequirements.docx, Section 2.3 for details
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.SessionId">
            <summary>
            Unique value identifying each test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.TestId">
            <summary>
            Id of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.LogicalId">
            <summary>
            Logical Id of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.TestVersion">
            <summary>
            Test version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.TestLanguage">
            <summary>
            Test language
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.User">
            <summary>
            User who executed the test 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.StartDate">
            <summary>
            Time the test was queued for executon
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.CompleteDate">
            <summary>
            Time the test execution was completed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.State">
            <summary>
            Possible state of the execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Period">
            <summary>
            Period of the execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Message">
            <summary>
            Message of the execution 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Trace">
            <summary>
            Trace of the execution 
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.InputFiles">
            <summary>
            List of input files' descriptors
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Parameters">
            <summary>
            List of execution parameters
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Tags">
            <summary>
            List of execution tags
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Results">
            <summary>
            List of result files created by test execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.IsAtServer">
            <summary>
            Flag specifying the server-side execution
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Server">
            <summary>
            If server-side execution, name of the management server
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Project">
            <summary>
            If server-side execution, name of the project
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.OperatingSystemInfo">
            <summary>
            Information about OS used to execute the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.GlobalizationInfo">
            <summary>
            Globalization info when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.CasewareIdeaInfo">
            <summary>
            IDEA settings when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.SmartAnalyzerInfo">
            <summary>
            SA settings when executing the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.Comment">
            <summary>
            User-defined text describing the import session
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when length of file name (after trimming) is > 255</exception>
            <remarks>Null is allowed; empty string is converted to null</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.CorrelationId">
            <summary>
            Stores the identifier of the related CIR import session; is null for test related entries
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.ShortName">
            <summary>
            Short name of the test
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultDescriptor.OwnerName">
            <summary>
            Owner's name of the test
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes">
            <summary>
            The enum TestResultTypes defines the available types of test results.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes.None">
            <summary>
            The type of the result is not known.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes.SourceTable">
            <summary>
            The result is a source table.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes.IntermediateResult">
            <summary>
            The result is an intermediate result.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.TestResultFileTypes.FinalResult">
            <summary>
            The result is final.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType">
            <summary>
            The enum defines the available types of chart results.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Column">
            <summary>
            Column chart.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Bar">
            <summary>
            Bar chart.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Line">
            <summary>
            Line chart.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Pie">
            <summary>
            Pie chart.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Scatter">
            <summary>
            Scatter chart.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType.Treemap">
            <summary>
            Treemap chart
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestResults.StatisticOperationType">
            <summary>
            The enum defines the available statistic operations.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.StatisticOperationType.Sum">
            <summary>
            Sum operation.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.StatisticOperationType.Average">
            <summary>
            Average operation.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestResults.StatisticOperationType.Count">
            <summary>
            Count operation.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TracingConfiguration">
            <summary>
            Tracer Configuration section class
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TracingConfiguration.Instance">
            <summary>
            Singleton pattern implementation
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TracingConfiguration.TraceSubfolder">
            <summary>
            Subfolder to store the trace files
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.TracingConfiguration.SuppressTestParametersInEventLog">
            <summary>
            If true, suppress including the Parameters section in test info section as displayed in Event Log by test error
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Trees.DirectoryRecord">
            <summary>
            The class DirectoryRecord holds the id, name and parent of a directory.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.DirectoryRecord.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes an instance of type DirectoryRecord.
            </summary>
            <param name="id">The identifier of the directory.</param>
            <param name="name">The name of the directory.</param>
            <param name="parentId">The id of the parent directory.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.DirectoryRecord.Id">
            <summary>
            Gets the id of the directory. Same as Item1.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.DirectoryRecord.Name">
            <summary>
            Gets the name of the directory. Same as Item2.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.DirectoryRecord.ParentId">
            <summary>
            Gets the id of the parent. Same as Item3.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup">
            <summary>
            The class ExpressionGroup keeps the information regarding a group equation expression.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates and populates a group expression.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="isAND">if true group is AND group, else it is OR group</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.Negate">
            <summary>
            If this part is negated (NOT in front)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.Type">
            <summary>
            Gets the type of the group (AND or OR).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.Elements">
            <summary>
            Returns the internal collection of elements in current group.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.AddGroup(System.Boolean,System.Boolean)">
            <summary>
            Creates a new expression group and adds it to the current group.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="isAND">if true group is AND group, else it is OR group</param>
            <returns>newly created group</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.AddElement(System.Boolean,System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType,Audicon.SmartAnalyzer.Common.Types.EquationOperator,System.Object[])">
            <summary>
            Creates a new simple expression and adds it to the current group.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="propertyName">name of the property</param>
            <param name="propertyType">property type</param>
            <param name="equationOperator">operator to be used in the equation</param>
            <param name="operands">variable number of operands (IsInList accepts more than 1)</param>
            <returns>newly created element</returns>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.AddExpression(Audicon.SmartAnalyzer.Common.Interfaces.Trees.IExpression)">
            <summary>
            Adds expression to the group
            </summary>
            <param name="expression">Expression to add</param>
            <exception cref="T:System.ArgumentNullException">thrown when expression to add is null</exception> 
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the object during a deserialization operation.
            </summary>
            <param name="info">serialization info</param>
            <param name="ctxt">streaming context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the object into a serialization context.
            </summary>
            <param name="info">serialization info</param>
            <param name="ctxt">streaming context</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple">
            <summary>
            The class ExpressionSimple keeps the information regarding a simple equation expression.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.#ctor(System.Boolean,System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType,Audicon.SmartAnalyzer.Common.Types.EquationOperator,System.Object[])">
            <summary>
            Creates and populates a simple expression.
            </summary>
            <param name="negate">if the expression is negated or not</param>
            <param name="propertyName">name of the property</param>
            <param name="propertyType">property type</param>
            <param name="equationOperator">operator to be used in the equation</param>
            <param name="operands">variable number of operands (IsInList accepts more than 1)</param>
            <exception cref="T:System.ArgumentException">thrown when property type is not recognized</exception> 
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.Negate">
            <summary>
            Gets the negation status of the expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.Type">
            <summary>
            Gets the type of the expression (always SimpleElement).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.PropertyName">
            <summary>
            Gets the name of the property used (left side of the expression).
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.PropertyType">
            <summary>
            Gets the type of the property used.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.Operator">
            <summary>
            Gets the operator used in expression.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.Operand">
            <summary>
            Gets the operand used in expression (right side of the expression).
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the object during a deserialization operation.
            </summary>
            <param name="info">serialization info</param>
            <param name="ctxt">streaming context</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.ExpressionSimple.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the object into a serialization context.
            </summary>
            <param name="info">serialization info</param>
            <param name="ctxt">streaming context</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Trees.LeafRecord">
            <summary>
            The class LeafRecord holds the id, leaf reference id and parent of a leaf reference.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Trees.LeafRecord.#ctor(System.Int32,System.Guid,System.Int32)">
            <summary>
            Initializes an instance of type LeafRecord.
            </summary>
            <param name="id">The identifier of the directory.</param>
            <param name="referenceId">The identifier of the reference.</param>
            <param name="parentId">The id of the parent directory.</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.LeafRecord.Id">
            <summary>
            Gets the id of the directory. Same as Item1.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.LeafRecord.ReferenceId">
            <summary>
            Gets the id of the referenced object. Same as Item2.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Trees.LeafRecord.ParentId">
            <summary>
            Gets the id of the parent. Same as Item3.
            </summary>
            <remarks>This property is read-only.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Constants">
            <summary>
            Definitions of general purpose constants are here
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.SmartAnalyzerVersion">
            <summary>
            Current version of SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.MinDateValidity">
            <summary>
            Minimum validity date accepted for any db object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.MaxDateValidity">
            <summary>
            Maximum validity date accepted for any db object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AuditObjectives">
            <summary>
            Audit test objectives key; do not use it anymore
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.DialogHelp">
            <summary>
            Audit test objectives key; do not use it anymore
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.DefaultOwner">
            <summary>
            Default owner name for all content objects
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.BrandedKeySize">
            <summary>
            Length of branded key
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.InternalNamePropertyId">
            <summary>
            Alias of the audit test's primary input file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.FolderIdFileExt">
            <summary>
            Extension of the file used to specify the local folder's ID
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AuditFolderDataFileName">
            <summary>
            Name of the file containing the audit folder metadata
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AuditFolderCirLinkFileName">
            <summary>
            Extension of the file used to specify the local audit folder's link to CIR
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.CaseAdministrationVgerFileName">
            <summary>
            Name of VGER file used by IDEA to launch Project Admin tool
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.TestParametersSectionMarker">
            <summary>
            String used to mark begin and end of parameters' info section in trace output.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.SmartAnalyzerTraceSourceName">
            <summary>
            Name of Audicon's Trace source in IDEA config file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.MaxLengthOfEventLogItem">
            <summary>
            Maximum length of Event Log message 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.TestingAppId">
            <summary>
            Testing app id
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.DemoAppId">
            <summary>
            Demo app id
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.CompositeAreaPropertyId">
            <summary>
            Id of Composite Area property
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.CompositeAppNamePrefix">
            <summary>
            Default prefix of the name of composite App
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.UICustomTimeFormat">
            <summary>
            Contains the custom Time format for Date Time Picker
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.UIDateWatermark">
            <summary>
            Contains the date watermark displayed in DateTimePicker
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AutoArgEngagementFolderName">
            <summary>
            Name of automation argument "EngagementFolder"
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AutoArgClientFileName">
            <summary>
            Name of automation argument "ClientFileName"
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AutoArgAuditYearName">
            <summary>
            Name of automation argument "AuditYear"
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AutoArgAuditMonthName">
            <summary>
            Name of automation argument "AuditMonth"
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Constants.AnalyticsProjectName">
            <summary>
            Well-known name of audit project used by Audit Solutions
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Predicate">
            <summary>
            added this delegate becouse .Net framewoek has only
            predicate with argument
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CreateMacroDialogInvoker">
            <summary>
            Defines a delegate for creating a macro dialog invoker for a specified AT and execution context.
            </summary>
            <param name="test">An ITest reference to the AT.
            <para>An exception is thrown if this reference is null.</para></param>
            <param name="executionContext">An IExecutionContext reference to the execution context
            in which the invocation will take place.
            <para>An exception is thrown if this reference is null.</para></param>
            <returns>An IMacroDialogInvoker reference.</returns>
            <exception cref="T:System.ArgumentNullException">test or executionContext was null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Entity">
            <summary>
            Simple class representing named ID
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Entity.#ctor(System.Guid,System.String)">
            <summary>
            ctor
            </summary>
            <param name="id">ID</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.Entity.#ctor(Audicon.SmartAnalyzer.Common.Types.Entity)">
            <summary>
            copy ctor
            </summary>
            <param name="clone">Entity to copy from</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Entity.Id">
            <summary>
            Entity's ID
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.Entity.Name">
            <summary>
            Entity's name
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags">
            <summary>
            Flags used for preloading additional information into database objects
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.None">
            <summary>
            no additional info should be loaded
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Values4Tag">
            <summary>
            load tag values when loading a tag (works only in standalone tag object)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Values4Property">
            <summary>
            load property values when loading a property (works only in standalone property object)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Dialog4Test">
            <summary>
            load dialog info for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Info4Test">
            <summary>
            load description info for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Macro4Test">
            <summary>
            load macro info for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Properties4Test">
            <summary>
            load properties for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Properties4CO">
            <summary>
            load properties for a CO
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.Tags4Test">
            <summary>
            load tags for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.InputFiles4Test">
            <summary>
            load tags for a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AdditionalDataFlags.All4Test">
            <summary>
            all data for test
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TagDataTypes">
            <summary>
            Supported data types for a tag (combinations are allowed)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Numeric">
            <summary>
            numeric 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Alfanumeric">
            <summary>
            letters and numbers
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Alphanumeric">
            <summary>
            letters and numbers
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Time">
            <summary>
            time
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Boolean">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagDataTypes.Any">
            <summary>
            Any type
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.MacroType">
            <summary>
            possible macro types (type of script)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.MacroType.IDEAScript">
            <summary>
            IDEA script format
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.DescriptionType">
            <summary>
            possible description formatting types (for tests)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DescriptionType.DOCX">
            <summary>
            DOCX format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DescriptionType.RTF">
            <summary>
            RTF format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DescriptionType.TXT">
            <summary>
            Simple text format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DescriptionType.HTML">
            <summary>
            html format
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ImageType">
            <summary>
            possible image formatting types 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImageType.PNG">
            <summary>
            PNG format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImageType.JPG">
            <summary>
            JPG/JPeG format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImageType.GIF">
            <summary>
            GIF format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImageType.ICO">
            <summary>
            ICO format
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ResourcesType">
            <summary>
            possible resource formatting types (for tests)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResourcesType.ResBinary">
            <summary>
            Binary RESX format
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResourcesType.ResX">
            <summary>
            RESX format
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.DialogType">
            <summary>
            possible dialog types
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogType.Assembly">
            <summary>
            precompiled assembly
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.PropertyFlags">
            <summary>
            various flags of a property
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyFlags.None">
            <summary>
            no flag
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyFlags.Hidden">
            <summary>
            should not be visible to the end user
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyFlags.Multiselect">
            <summary>
            allow multi-select for values
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyFlags.System">
            <summary>
            system property; only relevant in SDK
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.PropertyDataType">
            <summary>
            Possible types of a property
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyDataType.String">
            <summary>
            string
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyDataType.Boolean">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyDataType.Date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PropertyDataType.Integer">
            <summary>
            integer
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.InputType">
            <summary>
            type of input (parameters) - GUI usage
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.InputType.NotRequired">
            <summary>
            no input is needed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.InputType.Defined">
            <summary>
            input is already defined
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.InputType.Required">
            <summary>
            input is needed and not defined yet
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.InputType.Optional">
            <summary>
            input is optional (default values are used)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.DialogRequired">
            <summary>
            type of input (parameters) - db definition usage
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogRequired.NotRequired">
            <summary>
            no imput is needed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogRequired.Optional">
            <summary>
            input is optional
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.DialogRequired.Required">
            <summary>
            input is needed
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestStatus">
            <summary>
            Status of a test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestStatus.None">
            <summary>
            not known
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestStatus.NotReady">
            <summary>
            not ready for execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestStatus.ReadyForExecution">
            <summary>
            ready for execution
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.EntityType">
            <summary>
            type of licensable entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.Unknown">
            <summary>
            unknown/undefined type
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.Package">
            <summary>
            package
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.Test">
            <summary>
            test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.Tree">
            <summary>
            tree
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.DataRequest">
            <summary>
            data request
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.CustomImportRoutine">
            <summary>
            CIR
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.CustomImportRoutineExtension">
            <summary>
            CIR Extension
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.ReportingPlugin">
            <summary>
            reporting plugin
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.AppWorkflow">
            <summary>
            app workflow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.CompositeApp">
            <summary>
            Composite App
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EntityType.CompositeAppWorkflow">
            <summary>
            Composite App Workflow
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GenericObjectType">
            <summary>
            type of objects affected by filter
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.Unknown">
            <summary>
            unknown/undefined type
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.Package">
            <summary>
            package
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.Test">
            <summary>
            test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.Tree">
            <summary>
            tree
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.DataRequest">
            <summary>
            data request
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.CustomImportRoutine">
            <summary>
            CIR
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.CustomImportRoutineExtension">
            <summary>
            CIR Extension
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.ReportingPlugin">
            <summary>
            reporting plugin
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.AppWorkflow">
            <summary>
            app workflow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.CompositeApp">
            <summary>
            Composite App
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.CompositeAppWorkflow">
            <summary>
            Composite App Workflow
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Audicon.SmartAnalyzer.Common.Types.GenericObjectType.Grid" -->
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TreeType">
            <summary>
            type of a tree object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TreeType.Standard">
            <summary>
            not calculated yet (contains only equations)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TreeType.Cached">
            <summary>
            precalculated (contains lists of test ids)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestFlags">
            <summary>
            posible flags of a test object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.None">
            <summary>
            no flag
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.OptionalDialog">
            <summary>
            test has an optional dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.ServerOnly">
            <summary>
            test can be executed only on server
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.ClientOnly">
            <summary>
            test can be executed only on client
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.PeriodRequired">
            <summary>
            test requires a period to be executed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.GlobalDataRequired">
            <summary>
            test requires global parameters
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestFlags.NoBatchExecution">
            <summary>
            test doesn't support execution in batch
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ParameterFlags">
            <summary>
            posible flags of an exection parameter
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterFlags.None">
            <summary>
            no flag; this is a parameter that comes from a dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterFlags.GlobalParameter">
            <summary>
            this is a global parameter
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TagType">
            <summary>
            posible tag types of a test object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagType.None">
            <summary>
            tagging is not needed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagType.Full">
            <summary>
            full tagging required, if all tags are optional at least one has to be tagged
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagType.Optional">
            <summary>
            all tags must be optional, no tag is mandatory to be tagged
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TagState">
            <summary>
            posible tag state
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagState.NotDone">
            <summary>
            tagging is not done
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagState.Done">
            <summary>
            tagging is done
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagState.NotNeeded">
            <summary>
            tagging is not needed
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TagsResolutionState">
            <summary>
            State of tags' resolution while matching test/table tags
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagsResolutionState.No">
            <summary>
            No resolution is possible
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagsResolutionState.Partial">
            <summary>
            Partial resolution available
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagsResolutionState.Full">
            <summary>
            Full resolution available
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TagsResolutionState.NotNeeded">
            <summary>
            Match is not tag-based
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.VisibilityStates">
            <summary>
            visibility state of a licensable entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VisibilityStates.Visible">
             <summary>
            object is visible
             </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VisibilityStates.HiddenByUser">
            <summary>
            object is hidden by user
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VisibilityStates.HiddenByAdmin">
            <summary>
            object is hidden by admin
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.LicenseFlags">
            <summary>
            Various flags used for license purposes for a content object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.None">
             <summary>
            no flag set
             </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.System">
            <summary>
            object is system
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ServerOnly">
            <summary>
            CO can be executed only on server
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ClientOnly">
            <summary>
            CO can be executed only on client
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.Demo">
            <summary>
            CO is demo only (applies only to packages for now)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.Cloud">
            <summary>
            Cloud base license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.PPU">
            <summary>
            Pay per use license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ExternalApp5">
            <summary>
            ExternalApp5 license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ExternalApp4">
            <summary>
            ExternalApp4 license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ExternalApp3">
            <summary>
            ExternalApp3 license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ExternalApp2">
            <summary>
            ExternalApp2 license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.ExternalApp1">
            <summary>
            ExternalApp1 license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.XML4SAP">
            <summary>
            XML4SAP license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.SmartV">
            <summary>
            SmartV license
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LicenseFlags.SmartX">
            <summary>
            SmartX license
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ContentFlags">
            <summary>
            Various flags used for a content object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContentFlags.None">
             <summary>
            no flag set
             </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContentFlags.NoUnicodeSupport">
            <summary>
            Does not support unicode
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContentFlags.SuppressExternalFilters">
            <summary>
            External filters are not considered
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContentFlags.FIPSBuild">
            <summary>
            Was build to be FIPS compliant
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SpecialProperty">
            <summary>
            Properties with special meaning
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SpecialProperty.ContentFlags">
            <summary>
            Content flags
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus">
            <summary>
            possible expiration states of an object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus.Expired">
            <summary>
            object is expired
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus.InGracePeriod">
            <summary>
            object is expired but still in grace period
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus.Valid">
            <summary>
            object is valid
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus.InExtraPeriod">
            <summary>
            object is expired but still in extra period
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ExpirationStatus.InWarningPeriod">
            <summary>
            object is about to expire and warning should be displayed
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.RequestType">
            <summary>
            type of a data request object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RequestType.Document">
            <summary>
            document data request
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RequestType.XML">
            <summary>
            xml data request
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TaskState2">
            <summary>
            This enum mirrors IDEA's IdeaServer.Core.Entities.Interfaces.TaskState enum. There are following reasons for using our own
            TaskState2 enum:
            1. IDEA's enum is defined in insigned module which cannot be referenced by all SA modules
            2. Our enum extends that of IDEA defining some additional states internally used by SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Unspecified">
            <summary>
            (0)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Queued">
            <summary>
            Ready for execution (1)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Scheduled">
            <summary>
            Submitted to the Windows Scheduler (2)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.SelectedForExecution">
            <summary>
            Task has successfully been de-serialized and is ready to run (3)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Starting">
            <summary>
            Task is opening the IMD files and/or other input data (4)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Running">
            <summary>
            Task is responding with progress callbacks (5)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Completed">
            <summary>
            Tasks has completed succesfully (7)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.RetryExecutionLater">
            <summary>
            An IMD file is locked by another process, task will try again once the queue
            is flushed of other tasks (8)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.UserCancelled">
            <summary>
            Client application has returned E_USER_CANCELLED from a progress call (9)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.AbortFailed">
            <summary>
            SA internal: task object is about to be created and initialized
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Initializing">
            <summary>
            SA internal: attempt to abort the task has failed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Planned">
            <summary>
            SA internal: task is planned for execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.Reconnected">
            <summary>
            SA internal: running task was just reconnected to
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TaskState2.RequestStateNeeded">
            <summary>
            SA internal: task requires requesting of its state from server
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestExecutionState">
            <summary>
            possible state of an existing execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestExecutionState.Running">
            <summary>
            execution is performing
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestExecutionState.Failed">
            <summary>
            execution failed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestExecutionState.Completed">
            <summary>
            execution is finished with success
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestExecutionState.UserCancelled">
            <summary>
            user cancelled execution
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TemplateFiles">
            <summary>
            type of template file (stored in Templates folder)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.ContentFile">
            <summary>
            content database
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.ExecutionFile">
            <summary>
            execution database (local)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.ExecutionFileServer">
            <summary>
            execution database (server)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.TreeFile">
            <summary>
            tree file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.IndexFile">
            <summary>
            results index file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.ImportIndexFile">
            <summary>
            import index file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.DataPreparationProtocolFile">
            <summary>
            data preparation protocol file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.CirFile">
            <summary>
            cir file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.TaggingHistoryFile">
            <summary>
            file keeping history of opened idea files for tagging
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.GlobalParamsFileProject">
            <summary>
            file keeping global parameters on project level
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.StandardJournalDefaultTemplateFile">
            <summary>
            default template file for standard journal
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.StdTablesTaggingTemplateFile">
            <summary>
            The name of the template file that contains tagging instructions for
            the German Ministry of Finance standard tables.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.GlobalParamsFileFolder">
            <summary>
            file keeping global parameters on folder level
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.GlobalParamsFileMachine">
            <summary>
            file keeping global parameters on machine level
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TemplateFiles.RuntimeFilterFile">
            <summary>
            File keeping runtime filters
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SharedActionType">
            <summary>
            possible types of shared actions
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.Protocol">
            <summary>
            shared action for protocol files
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.Tagging">
            <summary>
            shared action for tagging files
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.Messenger">
            <summary>
            quick message exchange action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.FileMapping">
            <summary>
            shared action related to creating input files markers
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.Parameterization">
            <summary>
            shared action related to creating files' global parameters
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionType.FileTestMapping">
            <summary>
            shared action for creating file/test associations
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestParameterType">
            <summary>
            This enum is used to specify the type of test parameters passed to the method ITestExecution.SubmitTests () in TestDescriptor.Parameters
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.ExecutionId">
            <summary>
            TestDescriptor.Parameters[ExecutionId] is an instance of ExecutionDescriptor class
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.OutputTablesList">
            <summary>
            TestDescriptor.Parameters[OutputTablesList] is a list of test's output tables; it must have a form of array String[]
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.FormatScriptForTesting">
            <summary>
            Flag specifies that audit test's script has to be formatted for Unit Test run; if flag is present in TestDescriptor.Parameters,
            it may have any value (also null)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.VerifyTestIntegrity">
            <summary>
            Flag specifies that license and anti-tamper related verifications have to be performed before running an audit test
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.UserDefined">
            <summary>
            TestDescriptor.Parameters[UserDefined] is any user-sppecific data 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.IntellectualPropertyOptions">
            <summary>
            Options related to intellectual property issues
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestParameterType.MacroDialogInvokerCreator">
            <summary>
            TestDescriptor.Parameters[MacroDialogInvokerCreator] contains a CreateMacroDialogInvoker delegate.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes">
            <summary>
            Types of additonal context information to be added to trace output
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes.None">
            <summary>
            No additional info
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes.Project">
            <summary>
            Project name required
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes.Server">
            <summary>
            Server name required
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes.User">
            <summary>
            User name required
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes.All">
            <summary>
            All extra infos are required
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FunctionalArea">
            <summary>
            Functional areas on behalf of which the tracer is acting
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Tracing">
            <summary>
            Functional area: tracing
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.General">
            <summary>
            Unspecified functional area
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TestExecutorTask">
            <summary>
            Functional area: test execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.ResultProtocoller">
            <summary>
            Functional area: test results' protocolling
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TestExecutionContext">
            <summary>
            Functional area: macro execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TestPlanner">
            <summary>
            Functional area: Test Planner
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TaskDescriptor">
            <summary>
            Functional area: client-side monitoring of test execution
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TestExecutionsMaintenance">
            <summary>
            Functional area: client-side test executions Maintenance (clean up and repair)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.TestResultsMaintenance">
            <summary>
            Functional area: client-side test executions results Maintenance (clean up and repair)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Collaboration">
            <summary>
            Functional area: SA collaboration
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Cirs">
            <summary>
            Functional area: SA cirs
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Reporting">
            <summary>
            Functional area: R&amp;R
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Parameterization">
            <summary>
            Functional area: global parameters
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Tagging">
            <summary>
            Functional area: tagging
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.CaseAdmin">
            <summary>
            Functional area: CaseAdmin
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.ColumnSelector">
            <summary>
            Functional area: ColumnSelector
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.ClientControls">
            <summary>
             Functional area: SA.Client.Controls
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.AppWorkflow">
            <summary>
            Functional area: SA.Client.AppWorkflow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalArea.Licensing">
            <summary>
            Functional area: SA.Client.Licensing
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields">
            <summary>
            Symbolic names for Test result files' fields used when editing these fields
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.None">
            <summary>
            No field
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Name">
            <summary>
            Field is 
            </summary>
            <summary>
            Field is Name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Type">
            <summary>
            Field is Type
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Size">
            <summary>
            Field is Size
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Visible">
            <summary>
            Field is Visible
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.BaseTable">
            <summary>
            Field is BaseTable
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Alias">
            <summary>
            Field is Alias
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.ShortName">
            <summary>
            Field is ShortName
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ResultFileInfoFields.Description">
            <summary>
            Field is Description
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SharedActionState">
            <summary>
            Possible states returned by Collaborate Action class methods when processing shared requests
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionState.Processed">
            <summary>
            Request successfully processed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionState.NoCustomProcessing">
            <summary>
            Collaborate Action class provides no custom processing of request; Collaborator should continue using default values/workflow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionState.NotSupported">
            <summary>
            Collaborate Action class does not support the request entirely; Collaborator should skip this action and continue with the next one
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SharedActionDirection">
            <summary>
            Possible directions of shared action's control flow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionDirection.Local">
            <summary>
            Shared action was executed locally on local data
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionDirection.Local2Server">
            <summary>
            Shared action was executed locally on server-side data
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SharedActionDirection.Server">
            <summary>
            Shared action was executed on server
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ColloaboratorEventType">
            <summary>
            Type of Collaborator's event to be specified within CollaboratorEventArgs 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ColloaboratorEventType.Undefined">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ColloaboratorEventType.Error">
            <summary>
            Error occured
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ColloaboratorEventType.ResultAlreadyConsumed">
            <summary>
            Shared result seems to be already consumed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ColloaboratorEventType.ResultsOriginIsCurrent">
            <summary>
            Shared result originates from current machine/user
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.KnownLocation">
            <summary>
            Known folder locations for SA to be used during import
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.Unknown">
            <summary>
            Location is not a know folder or irrelevant
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.Install">
            <summary>
            Instalation folder of SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.Templates">
            <summary>
            Templates folder of SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserRoamingProfile">
            <summary>
            User roaming profile folder for SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.InstallReportingPlugins">
            <summary>
            Location of the reporting plugins that come via setup
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserReportingPlugins">
            <summary>
            Location of the reporting plugins that come via import
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.InstallDataRequests">
            <summary>
            Location of data request template files that come via setup
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserDataRequests">
            <summary>
            Location of data request template files that come via import
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.InstallDocumentationFiles">
            <summary>
            Location of documentation files that come via setup
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserDocumentationFiles">
            <summary>
            Location of documentation files that come via import
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.InstallAppAuxiliaryFiles">
            <summary>
            Location of additional app-related files thet come via setup
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserAppAuxiliaryFiles">
            <summary>
            Location of additional app-related files thet come via import
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserCaches">
            <summary>
            User caches folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.FilterParameters">
            <summary>
            FilterParameters folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.LinkedFiles">
            <summary>
            Location of link files used in descriptions
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.DescriptionFiles">
            <summary>
            Location of external description files
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.CentralDeployment">
            <summary>
            Location of central deployment folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.StandardJournalTemplates">
            <summary>
            Location of user defined standard journal templates
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.AllUsersRoamingProfile">
            <summary>
            All users roaming profile folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserLogs">
            <summary>
            User logs folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.UserImportLogs">
            <summary>
            User import logs folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.CentralCompositeApps">
            <summary>
            Location of composite apps folder inside central deployment import folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.AppsPublish">
            <summary>
            Location of published apps
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.CompositeAppsPublish">
            <summary>
            Location of published composite apps
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.ProtectedData">
            <summary>
            Location to store protected data
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.KnownLocation.InstalledTemplates">
            <summary>
            Templates folder of SA relative to IDEA program folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.VerificationType">
            <summary>
            Types of signature verification
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VerificationType.Solution">
            <summary>
            Solution signature is checked
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VerificationType.Deployment">
            <summary>
            Deployment file is checked
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VerificationType.Content">
            <summary>
            Content data is checked
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VerificationType.License">
            <summary>
            License data is checked
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VerificationType.Full">
            <summary>
            Content and License data is checked
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestInfoFlags">
            <summary>
            Flags used for test info objects
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestInfoFlags.None">
            <summary>
            no flag set
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestInfoFlags.ShowInReport">
            <summary>
            show this 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestInfoFlags.ShowAsHelp">
            <summary>
            show test info as help information
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ImportState">
            <summary>
            Import states
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.Unknown">
            <summary>
            Stands for unknown state
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.FileLockedError">
            <summary>
            One file was locked and could not be replaced (either dat or cir file)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.LanguageCodeMissmatchError">
            <summary>
            Language code missmatch between objects that are imported and exiting objects (tests, trees etc)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.TypeMissmatchError">
            <summary>
            Type missmatch between objects that are imported and exiting objects (tags or properties)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.IDEAVersionError">
            <summary>
            Min IDEA version exceeds current IDEA version
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.OpenError">
            <summary>
            Error opening a package (bad path or wrong file type)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.HackError">
            <summary>
            Error verifying the signature
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.Error">
            <summary>
            Stands for normal errors / db errors
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.Skipped">
            <summary>
            Version skip
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.NothingToDoContent">
            <summary>
            Nothing was imported (no matching content)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.NothingToDoKey">
            <summary>
            Nothing was imported (wrong ILK)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.Partial">
            <summary>
            Some items could be imported some not
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ImportState.OK">
            <summary>
            All were imported ok
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.PackageOperationType">
            <summary>
            possible operations for packages (solutions)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PackageOperationType.Other">
            <summary>
            Another non specific type of operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PackageOperationType.Install">
            <summary>
            A new package is installed
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PackageOperationType.Update">
            <summary>
            An existing package is updated
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.PackageOperationType.Delete">
            <summary>
            Package is deleted
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TreeCalculationState">
            <summary>
            possible states for calculating cached trees
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TreeCalculationState.TreeStart">
            <summary>
            Calculation begins for a particular tree; second param returns tree id and third tree name>
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TreeCalculationState.TreeEnd">
            <summary>
            Calculation ends for a particular tree; second param returns tree id and third tree object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TreeCalculationState.AllTreeEnd">
            <summary>
            Calculation ends for all trees; second param returns empty guid and third null
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.EquationElementType">
            <summary>
            Type of the equation part
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationElementType.SimpleElement">
            <summary>
            Simple equation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationElementType.ANDGroup">
            <summary>
            AND group
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationElementType.ORGroup">
            <summary>
            OR group
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.EquationOperator">
            <summary>
            Represents the operator used in the equation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.Equals">
            <summary>
            Check for equality
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.IsInList">
            <summary>
            Is in list
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.Contains">
            <summary>
            String contains given chars
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.StartsWith">
            <summary>
            String starts with given chars
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.EndsWith">
            <summary>
            String ends with given chars
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.IsGreater">
            <summary>
            Is greater then (as number, date, bool)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.IsGreaterEqual">
            <summary>
            Is greater or equal with (as number, date, bool)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.IsLess">
            <summary>
            Is less then (as number, date, bool)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EquationOperator.IsLessEqual">
            <summary>
            Is less or equal with (as number, date, bool)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage">
            <summary>
            Describes how the App's links (additional files) have to be treated
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.None">
            No link info (for old files)
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.Normal">
            Just conventional link
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.Extension">
            App Extension
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.Description">
            App Description
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.Remote">
            Specifies web link. This flag can be used together with items None and Description
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.UseInAppWorkflow">
            Show the link in workflow. This flag can be used together with item Description
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppLinkUsage.SuppressInAppManagement">
            Suppress displaying the link in App Management form. This flag can be used together with item Description
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FileSystemEntityType">
            <summary>
            Specifies the type of file system entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FileSystemEntityType.File">
            <summary>
            Entity is file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FileSystemEntityType.Folder">
            <summary>
            Entity is folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.GlobalParameterType">
            <summary>
            Specifies possible types of global parameters used to parameterize the tests' input files and folders
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.GlobalParameterType.Period">
            <summary>
            File period
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CRUDType">
            <summary>
            Generic type of CRUD operations
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CRUDType.Create">
            <summary>
            Create operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CRUDType.Update">
            <summary>
            Update operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CRUDType.Read">
            <summary>
            Read operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CRUDType.Delete">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.IntellectualPropertyOptions">
            <summary>
            Options related to intellectual property issues
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IntellectualPropertyOptions.None">
            <summary>
            No options specified
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IntellectualPropertyOptions.IgnoreIPProtectionByTempFiles">
            <summary>
            If set, this flag instructs not to take IP protection level into account when dealing with temp files (instead, flags like DeleteTempFiles have to be
            considered). For instance, the flag has to be set in case deleting the temp files is controlled NOT by IP protection but by some external means 
            (like UI elements etc.)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IntellectualPropertyOptions.DeleteTempFiles">
            <summary>
            When the flag IgnoreIPProtectionByTempFiles is set, deleting the temporary files created by ATs and CIRs is controlled by this flag: files get deleted in case
            the flag is set, files get kept in case the flag is not set
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.EncodingType">
            <summary>
            Specifies the encoding that should be used by some SA methods when processing IDEA files
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EncodingType.IdeaDefault">
            <summary>
            Use IDEA encoding (App Standard)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EncodingType.Ascii">
            <summary>
            Use ASCII
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.EncodingType.Unicode">
            <summary>
            Use Unicode
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FunctionalityFlags">
            <summary>
            Flags used for test info objects
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalityFlags.None">
            <summary>
            no flag set
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FunctionalityFlags.ChangeIP">
            <summary>
            controls rights to modify ip
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.UseSourceLibrary">
            <summary>
            Use source library folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.UseSourceLibrary.No">
            <summary>
            no
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.UseSourceLibrary.Yes">
            <summary>
            yes
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.UseSourceLibrary.UseIDEASetting">
            <summary>
            read from idea
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AuditFolderType">
            <summary>
            Type of an audit folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderType.Normal">
            <summary>
            Normal audit folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderType.VAT">
            <summary>
            VAT folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderType.Multiperiod">
            <summary>
            Multiperiod folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderType.MultiperiodVAT">
            <summary>
            Multiperiod VAT folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType">
            <summary>
            Type of audit folder metadata details
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType.Basic">
            <summary>
            Basic data (name, path, location, audit area and folder type)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType.Period">
            <summary>
            Folder period
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType.RelatedFolders">
            <summary>
            Liat of related aidit folders (having the same audit area)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType.LinkedCir">
            <summary>
            Id of CIR linked to audit folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditFolderDataType.All">
            <summary>
            Entire information
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType">
            <summary>
            Type of file/directory related operation
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType.CreateDirectory">
            <summary>
            Folder created
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType.DeleteDirectory">
            <summary>
            Folder deleted
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType.MoveFile">
            <summary>
            File moved
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FolderTypes">
            <summary>
            Logical types of audit project's subfolders
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FolderTypes.None">
            <summary>
            No special type
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FolderTypes.Normal">
            <summary>
            Regular Windows folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FolderTypes.AuditFolder">
            <summary>
            SA Audit folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FolderTypes.IdeaProject">
            <summary>
            IDEA project folder
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FolderTypes.IdeaProjectLibrary">
            <summary>
            IDEA project library folder
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutableType">
            <summary>
            Executable type of app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutableType.DotNet">
            <summary>
            .NET based
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutableType.Iss">
            <summary>
            IDEA Script based
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutableType.WellKnown">
            <summary>
            Internal action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionLocation">
            <summary>
            Execution location of app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionLocation.Default">
            <summary>
            Default for execution context
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionLocation.Local">
            <summary>
            Action is executed always locally
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionLocation.Server">
            <summary>
            Action is executed always on server
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionType">
            <summary>
            Type of workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionType.Standard">
            <summary>
            Standard action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionType.Custom">
            <summary>
            Custom action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags">
            <summary>
            Options of app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.None">
            <summary>
            No flag is set
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.Hidden">
            <summary>
            Action is not displayed within App start workflow dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.ExecuteOnce">
            <summary>
            Action can be executed only once during the workflow execution session.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.WithProgress">
            <summary>
            Actions requires reflecting its progress
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.WithOutput">
            <summary>
            Actions requires reflecting its output
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.HideAppWorkflowDialog">
            <summary>
            Actions requires hiding the App Workflow Dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.Cancellable">
            <summary>
            Action is cancallable
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionFlags.WithCustomDialog">
            <summary>
            Action provides its own user interface
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType">
            <summary>
            Type of standard app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.CreateDataRequest">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.RunSir">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.RunAuditTests">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.ResultsAndReporting">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.PrepareImportedData">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.CaseAdministration">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.ProjectSelection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardActionType.MultiplePeriodPreparation">
            <summary>
            The multiple period preparation standard action
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardLinkTypes">
            <summary>
            Link types for stabdard workflows
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardLinkTypes.None">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardLinkTypes.Description">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardLinkTypes.AvailableItems">
            <remarks/>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowStandardLinkTypes.GlobalParameters">
            <remarks/>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionState">
            <summary>
            Execution state of app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionState.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionState.Success">
            <summary>
            Action was executed successfully
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionState.Error">
            <summary>
            Action was executed with error
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionExecutionState.Aborted">
            <summary>
            Action was aborted
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.LinkFlags">
            <summary>
            Flags for link files of apps
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LinkFlags.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LinkFlags.UseInAppWorkflow">
            <summary>
            Link should be shown in app workflow
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LinkFlags.SuppressInAppManagement">
            <summary>
            Suppress displaying the link in App Management form
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState">
            <summary>
            Processing state of app workflow action
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState.None">
            <summary>
            Default state
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState.Waiting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState.InProcess">
            <summary>
            
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState.Delegated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AppWorkflowActionProcessingState.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ParameterValueType">
            <summary>
            Type of parameter's value
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.String">
            <summary>
            string
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.Boolean">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.DateTime">
            <summary>
            date
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.Integer">
            <summary>
            integer
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.Float">
            <summary>
            integer
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.Object">
            <summary>
            object
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterValueType.Period">
            <summary>
            period
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ParameterFunctionalityType">
            <summary>
            Type of parameter
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterFunctionalityType.GlobalParameter">
            <summary>
            global parameter
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterFunctionalityType.AuditFolders">
            <summary>
            Audit Folders
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType">
            <summary>
            Type of owner (related entity)
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.Company">
            <summary>
            company level
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.Workflow">
            <summary>
            workflow related
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.File">
            <summary>
            file related
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.Folder">
            <summary>
            folder related
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.Project">
            <summary>
            project related
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.ParameterOwnerType.Execution">
            <summary>
            execution record related
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions">
            <summary>
            Flags controlling the behavour of test/table associating functionality
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.PartialTaggingForPrimaryIsAllowed">
            <summary>
            When set, primary input file can be associated to IDEA table when partially tagged. By default, full tagging is required for primary input file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.FullTaggingForSecondaryIsRequired">
            <summary>
            When set, secondary input file can be associated to IDEA table only hwen fully tagged. By default, partial tagging is sufficient for secondary input file
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.TagBasedAssociationOnly">
            <summary>
            When set, associate methods will ignore logical input file having direct associate type (TagType==None). 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.DirectAssociationOnly">
            <summary>
            When set, associate methods will ignore logical input file having tag-based associate type (TagType==Full or TagType==Optional). 
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.TestTableAssociateOptions.AlwaysShareServerAssociations">
            <summary>
            When set, associations for server-side tables are published by local execution too 
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AuditProjectChildrenType">
            <summary>
            Specifies the way AuditProjectAdmin obtains list of children
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditProjectChildrenType.Simple">
            <summary>
            Simple mode: all child subfolders are obtained
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditProjectChildrenType.IdeaProjectsOnly">
            <summary>
            Only subfolders representing IDEA projects are obtained
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditProjectChildrenType.Standard">
            <summary>
            SA standard. Described in requrements docu attached to Req. #30064, Section 2.1.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.AuditType">
            <summary>
            Type of audit
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditType.Tax">
            <summary>
            Tax audit
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditType.Annual">
            <summary>
            Annual audit
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditType.Internal">
            <summary>
            Internal audit
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.AuditType.Any">
            <summary>
            Any audit
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation">
            <summary>
            Physical location of IDEA entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation.Default">
            <summary>
            Default for execution context
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation.Local">
            <summary>
            Local entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.IdeaEntityLocation.Server">
            <summary>
            Server entity
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.CombineState">
            <summary>
            Outcome of combination of composite parts into composite entity
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.Allowed">
            <summary>
            Combine possible
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.Denied">
            <summary>
            Unspecified denied
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.SourceIsComposite">
            <summary>
            Source composite part is a composite itself, denied
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.NotCompatible">
            <summary>
            Composite parts are not compatible, denied
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.SourceNotCombinable">
            <summary>
            Source composite part cannot be part of composite, denied
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.TargetNotCombinable">
            <summary>
            Target composite part cannot be part of composite, denied
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.SourceAlreadyInComposite">
            <summary>
            Source composite part is alrready a part of target pomposite
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.CombineState.IdenticalSourceAndTarget">
            <summary>
            Source and target parts are identical
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.SaModuleType">
            <summary>
            Modules of SA
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.Unknown">
            <summary>
            not set
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.SelectAndRunList" -->
        <!-- Badly formed XML comment ignored for member "F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.SelectAndRunNavigation" -->
        <!-- Badly formed XML comment ignored for member "F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.ResultsAndReporting" -->
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.CIRWizard">
            <summary>
            CIR wizard dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.CIRPrepareData">
            <summary>
            CIR preapre data dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.Tagging">
            <summary>
            Tagging dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.ProjectAdministration">
            <summary>
            Project administration dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.DataRequest">
            <summary>
            Data Request dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.ProjectSelection">
            <summary>
            Project Selection dialog
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.SaModuleType.MultiplePeriodPreparation">
            <summary>
            Multiple Period Preparation dialog
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.FilterFlags">
            <summary>
            Flags of runtime filters
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.FilterFlags.None">
            <summary>
            No flag set
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.LogicalOP">
            <summary>
            Boolean logic operations
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LogicalOP.And">
            <summary>
            AND
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.LogicalOP.Or">
            <summary>
            OR
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType">
            <summary>
            Type of runtime filters administration event
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType.Created">
            <summary>
            New runtime filter was created
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType.Updated">
            <summary>
            Runtime filter was updated
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType.Deleted">
            <summary>
            Runtime filter was deleted
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.RuntimeFilterEventType.ActiveUpdated">
            <summary>
            New active runtime filter was set
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.Modality">
            <summary>
            General purpose enum describing modality of arbitrary actions
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Modality.Never">
            <summary>
            Action takes never place
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Modality.Always">
            <summary>
            Action takes always place
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.Modality.Default">
            <summary>
            Action takes place depending on context
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2">
            <summary>
            Generic class representing named ID (Entity) with keyed parameters' list
            </summary>
            <typeparam name="TKey">parameters' collection key type</typeparam>
            <typeparam name="TParam">parameters' collection value type</typeparam>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2.Parameters">
            <summary>
            Getter for named parameters' list
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2.#ctor(System.Guid,System.String)">
            <summary>
            ctor
            </summary>
            <param name="id">entity's ID</param>
            <param name="name">entity's name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2.#ctor(Audicon.SmartAnalyzer.Common.Types.Entity)">
            <summary>
            ctor
            </summary>
            <param name="clone">entity to copy from</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2.#ctor(Audicon.SmartAnalyzer.Common.Types.Entity,System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})">
            <summary>
            ctor
            </summary>
            <param name="clone">entity to copy from</param>
            <param name="lstParams">list of paramaters</param>
            <param name="getKey">method to extract parameter's name</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.ParameterizedEntity`2.GetParameter(`0)">
            <summary>
            Given the parameter's name, returns its value
            </summary>
            <param name="key">parameter's name</param>
            <returns></returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.UserInfo">
            <summary>
            Short information abut IDEA user
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.UserInfo.#ctor(System.Guid,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="id">User's id</param>
            <param name="name">User's name</param>
            <param name="displayName">User's display name</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.UserInfo.Id">
            <summary>
            User's ID (server only)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.UserInfo.Name">
            <summary>
            User's name (max.mustermann)
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.UserInfo.DisplayName">
            <summary>
            User's display name (Mustermann, Max)
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute">
            <summary>
            Internal attributed to be assigned to seriliable classes which require version tolrant serialization
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyCommon">
            <summary>
            SA.Common assembly name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyParameters">
            <summary>
            SA.Paremeters assembly name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyClientControls">
            <summary>
            SA.Client.Controls' name.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyCirsStandardTables">
            <summary>
            SA.Cirs.StandardTables' name.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyCirsMpp">
            <summary>
            SA.Cirs.Mpp's name.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassTestResultDescriptor">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassTestResultFile">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassTestIdentifier">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassTagInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassIdeaTableField">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassTestPeriods">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassParameterizedEntity">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassSimpleLogEntry">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassExecutionParameter">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassEntity">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassAliasedEntity">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassParameterizedAliasedEntity">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassExecutableEntity">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfWeekend">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfTextBox">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfSingleList">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfOptionGroup">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfFromToList">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfComboBox">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfCheckBox">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfAging">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ContentOfDuplicate">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassBaseContent">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassBaseContentExtended">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfGap">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumTestExecutionState">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumIdeaColumnTypes">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumLogEntryType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumTestResultFileTypes">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassOperatingSystemInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassCasewareIdeaInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassSmartAnalyzerInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassGlobalizationInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassSharedData">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumPropertyDataType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumEquationOperator">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumAuditType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumEquationElementType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassExpressionGroup">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassExpressionSimple">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ContentOfGenericParameter">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ContentOfDataExchanger">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassCirExecutionParameter">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassSharedTaggingData">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassBuchungsjournalMitErwResultInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassContentOfStratification">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassMultiPeriodResultColumnInfo">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassMultiPeriodPreparationArgs">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassDialogTaskStepCount">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.InterfaceIDialogTaskStepCount">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.ClassChartDescriptor">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumChartResultType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.EnumStatisticOperationType">
            <summary>
            VTS sensitive type name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.AssemblyName">
            <summary>
            Assembly name of serilizable type
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.TypeFullName">
            <summary>
            Full name (namespace + class) of serilizable type
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Types.VersionTolerantSerializationRequiredAttribute.VtsTypesComplianceTest(System.Reflection.Assembly,System.Func{System.Type,System.String,System.String,System.Boolean})">
            <summary>
            General method for validating of VTS compliance
            </summary>
            <param name="assembly2Test">Assembly to validate the VTS compliance for</param>
            <param name="testCB">delegate to be called for each VTS sensitive type within assembly</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.BackupList">
            <summary>
            List of backup files
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor setting base folder and key type 
            </summary>
            <param name="keyByOrigin">original path will be used as key if set to true, otherwise the destination path will be used as key</param>
            <param name="baseFolder">base folder where the backup files will be kept</param>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.BackupList.KeyByOrigin">
            <summary>
            returns what info is used as key
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.BackupList.BaseFolder">
            <summary>
            returns base folder where the backup files are kept
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.GetKeyForItem(Audicon.SmartAnalyzer.Common.Utilities.BackupFile)">
            <summary>
            returns the key for an item
            </summary>
            <param name="item">item of the collection</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.Add(System.String)">
            <summary>
            Adds a new item starting from the original file path
            </summary>
            <param name="originalFile">original file path</param>
            <returns>newly created item</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.Add(Audicon.SmartAnalyzer.Common.Utilities.BackupFile)">
            <summary>
            Adds a new item from an existing item
            </summary>
            <param name="tempBackupFile">old item (temporary backup object)</param>
            <returns>newly created item</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.RollBack(System.Boolean)">
            <summary>
            Performs a rollback of all items in the collection
            </summary>
            <param name="deleteBackup">if true the backup files are deleted</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupList.Erase(System.Boolean)">
            <summary>
            Deletes all the backup files
            </summary>
            <param name="keepFolder">Keep or not the base folder (if created by this object)</param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper">
            <summary>
            Contains methods for computing week of year, weeks per year etc values.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetUserDefaultLocaleName">
            <summary>
            Retrieves the name of the current user's locale.
            </summary>  
            <returns>A string.</returns>  
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Returns an ISO8601 week number (assumptions: Weeks start on Monday and the week 1 is the week with the year's first Thursday in it
            </summary>
            <param name="date">A DateTime value whose week number is requested.</param>
            <param name="year">An int that receives the year of the value's week number.</param>
            <returns></returns>
            <remarks>Based on Wikipedia's algorithm at https://en.wikipedia.org/wiki/ISO_week_date. </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeekOfYearAsString(System.DateTime)">
            <summary>
            Gets the ISO-8601 WeekOfYear formatted as yyyy-Www.
            </summary>
            <param name="date">A DateTime value whose week number is requested.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeeksPerYear(System.Int32)">
            <summary>
            Returns the number of weeks in the specified year.
            </summary>
            <param name="year">An int representing the year whose week count is requested.</param>
            <returns>An int containing the week count.</returns>
            <remarks>Based on "The Mathematics of the ISO 8601 Calendar" (http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeeksPerYearFast(System.Int32)">
            <summary>
            Returns the number of weeks in the specified year.
            </summary>
            <param name="year">An int representing the year whose week count is requested.</param>
            <returns>An int containing the week count.</returns>
            <remarks>Based on a rule derived in 2001 by Simon Cassidy and presented in 
            "The Mathematics of the ISO 8601 Calendar" (http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.p(System.Int32)">
            <summary>
            P-function for GetIso8601WeeksPerYearFast.
            </summary>
            <param name="year">An int representing the year.</param>
            <returns>An int.</returns>
            <remarks>Based on a rule derived in 2001 by Simon Cassidy and presented in 
            "The Mathematics of the ISO 8601 Calendar" (http://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeekOfYearStart(System.Int32,System.Int32)">
            <summary>
            Gets the start date of a week of year number, using ISO-8601's rules.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="year">An int representing the year.</param>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetIso8601WeekOfYearStartAndEnd(System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using ISO-8601's rules.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="year">An int representing the year.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYear(System.DateTime,System.Globalization.Calendar,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.Int32@)">
            <summary>
            Gets the week number, using the specified calendar, calendar week rule and first day of week.
            </summary>
            <param name="date">A DateTime value whose week number is requested.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="rule">A CalendarWeekRule value.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="year">A reference to an int that receives the calendar-specific year of the value's week number.</param>
            <returns>An int.</returns>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo">
            <summary>
            Holds data for a calendar era.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo.#ctor(System.Int32,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Initializesa new EraInfo instance with the specified
            era id, era start date, min and max era-relative years.
            </summary>
            <param name="era">An int containing the era id. Cannot be zero.</param>
            <param name="startDate">A Date containing the era's Gregorian start date.</param>
            <param name="minEraYear">An int containing the min era-relative year.</param>
            <param name="maxEraYear">An int containing the max era-relative year.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If era is zero.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo.Era">
            <summary>
            Era id.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo.StartDate">
            <summary>
            Era's start date.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo.MinEraYear">
            <summary>
            The era-relative min year.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo.MaxEraYear">
            <summary>
            The era-relative max year.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.JapaneseLunisolarFourthEraInfo">
            <summary>
            Holds information about the 4th era of the JapaneseLunisolar calendar.
            </summary>
            <remarks>This information will be used to work around a problem in the implementatio of JapaneseLunisolarCalendar's ToDateTime
            that does not recognize the era-relative year 0.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.JapaneseLunisolarEraId">
            <summary>
            Lists the ids of the JapaneseLunisolar calendar.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar, calendar week rule  and first day of week.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="year">An int representing the calendar-specific year.</param>
            <param name="era">An non-zero int representing the era of the calendar year or zero, if the calendar year is in the current calendar's era.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="rule">A CalendarWeekRule value.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd(System.Int32,System.Int32,Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo,System.Globalization.Calendar,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar, calendar week rule  and first day of week.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="year">An int representing the calendar-specific year.</param>
            <param name="eraInfo">An EraInfo reference to the era that includes the specified year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="rule">A CalendarWeekRule value.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime? value or null, if the start date would be less than the calendar's min date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year and week is not 
            equal to the week of the calendar's min date or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar or eraInfo is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstDayRule(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'FirstDayRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="era">The era of the calendar year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstDayRule(System.Int32,System.Int32,Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'FirstDayRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="eraInfo">An EraInfo reference to the era that includes the specified year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar or eraInfo is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstFullWeekRule(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'FirstFullWeekRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="era">The era of the calendar year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstFullWeekRule(System.Int32,System.Int32,Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'FirstFullWeekRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="eraInfo">An EraInfo reference to the era that includes the specified year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstFourDayWeekRule(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'GetWeekOfYearStartAndEnd_FirstFourDayWeekRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="era">The era of the calendar year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar or eraInfo is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearStartAndEnd_FirstFourDayWeekRule(System.Int32,System.Int32,Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo,System.Globalization.Calendar,System.DayOfWeek,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using the specified calendar and first day of week and
            the calendar week rule 'GetWeekOfYearStartAndEnd_FirstFourDayWeekRule'.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="calendarYear">An int representing the calendar-specific year.</param>
            <param name="eraInfo">An EraInfo reference to the era that includes the specified year.</param>
            <param name="calendar">A Calendar object.</param>
            <param name="firstDayOfWeek">A DayOfWeek value that specifies the first day of the week.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than the calendar's min year or if
            week is greater than the number of weeks in the specified year.</exception>
            <exception cref="T:System.ArgumentNullException">If calendar or eraInfo is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetYearStartDate(System.Int32,System.Globalization.Calendar,Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.EraInfo)">
            <summary>
            Computes the start date of the specified era-relative year.
            </summary>
            <param name="eraRelativeYear">The era-relative year.</param>
            <param name="calendar">The Calendar that includes the specified year and era.</param>
            <param name="eraInfo">An EraInfo containing the era information.</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentNullException">If calendar or eraInfo is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If eraRelativeYear is not in the range
            specified in eraInfo.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetWeekOfYearAsString(System.Int32,System.Int32)">
            <summary>
            Gets the WeekOfYear formatted as yyyy-Www.
            </summary>
            <param name="weekOfYear">An int that contains the week of year number.</param>
            <param name="year">An int that contains the year nuumber.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetUKTaxWeekOfYear(System.DateTime,System.Int32@)">
            <summary>
            Returns an UK HMRC tax week number (http://www.merlyn.demon.co.uk/weekinfo.htm#UKTW)
            </summary>
            <param name="date">A DateTime value.</param>
            <param name="year">An int reference that receives the year of the value's week of year.</param>
            <returns>An int</returns>
            <remarks>Based on "HM Revenue and Customs Tax Weeks" at http://www.merlyn.demon.co.uk/weekcalc.htm </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CalendarHelper.GetUKTaxWeekOfYearStartAndEnd(System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Gets the start and end dates of a week of year number, using UKTax' rules.
            </summary>
            <param name="week">An int representing the week number.</param>
            <param name="year">An int representing the year.</param>
            <param name="endDate">A reference to a DateTime value that receives the
            end date of the specified week.</param>
            <returns>A DateTime? value or null, if year is zero and week is 39.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If week is less than 1 or year is less than zero or if
            week is greater than the number of weeks in the specified year.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.AggregateExceptionExtensions">
            <summary>
            Extension methods for AggregateException.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.AggregateExceptionExtensions.AnyInnerException(System.AggregateException,System.Func{System.Exception,System.Boolean})">
            <summary>
            Determines whether the AggregateException's collection of inner exceptions after flattening 
            contains an element that satisfies the specified condition.
            </summary>
            <param name="exception">The AggregateException whose list of inner exceptions after flattening will be examined.</param>
            <param name="predicate">The function to test each element.</param>
            <returns>True if an inner exception that satisfies the condition exists; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">If exception or predicate is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.AggregateExceptionExtensions.FirstOrDefaultInnerException(System.AggregateException,System.Func{System.Exception,System.Boolean})">
            <summary>
            Searches for the first inner exception of an AggregateException that satisfies the specified condition.
            </summary>
            <param name="exception">The AggregateException whose list of inner exceptions after flattening will be examined.</param>
            <param name="predicate">The function to test each element.</param>
            <returns>The first inner exception that satisfies the condition; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">If exception or predicate is null.</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.AuditFolderDataXML">
            <summary>
            Serialization for AuditFolderBuildData class
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.BackupFile">
            <summary>
            Creates a backup copy of a given file
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.#ctor(System.String)">
            <summary>
            Contructor with backup file path automatically generated
            </summary>
            <param name="originalFilePath">file to be backed up</param>
            <exception cref="T:System.ArgumentNullException">thrown if originalFilePath is null or empty or white spaces only</exception>
            <remarks>backup file path is generated using the same base folder as the original file, same file name without extension
            append current timestamp and add the extension of the original file</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.#ctor(System.String,System.String)">
            <summary>
            Constructor receiving original file path and the destination folder
            </summary>
            <param name="originalFilePath">path of the file to be backed up</param>
            <param name="baseFolder">path where the backup file should be located; null or empty string means the same folder as the original file</param>
            <exception cref="T:System.ArgumentNullException">thrown if originalFilePath is null or empty or white spaces only</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.#ctor(Audicon.SmartAnalyzer.Common.Utilities.BackupFile,System.String)">
            <summary>
            Constructor receiving a temp backup object already made and the real dest folder
            </summary>
            <param name="tempBackup">another backup object</param>
            <param name="baseFolder">path where the backup file should be located; null or empty string means the same folder as the original file</param>
            <exception cref="T:System.ArgumentNullException">thrown if tempBackup is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor receiving original file path and the planned backup file path and name
            </summary>
            <param name="originalFilePath">path of the file to be backed up</param>
            <param name="baseFolder">path where the backup file should be located; null or empty string mean the same folder as the original file</param>
            <param name="backupFileName">name of the backup file; null or empty string mean that internal algorithm for naming is used</param>
            <exception cref="T:System.ArgumentNullException">thrown if originalFilePath is null or empty or white spaces only</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.PrepareBackup(System.String,System.String)">
            <summary>
            Validates input for constructors
            </summary>
            <param name="originalFilePath">path of the file to be backed up</param>
            <param name="backupFilePath">path where the backup file should be located</param>
            <exception cref="T:System.ArgumentNullException">thrown if originalFilePath or backupFilePath is null or empty or white spaces only</exception>
            <exception cref="T:System.IO.FileNotFoundException">thrown if the originalFilePath is not found</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.OriginalFilePath">
            <summary>
            Returns the original file path
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.BackupFilePath">
            <summary>
            Returns the backup file path
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.RollBack(System.Boolean)">
            <summary>
            Performs a rollback; backup file is copied over the original file and then it is deleted if parameter is asking this
            </summary>
            <param name="deleteBackup">if true the backup file is deleted otherwise it is left</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.BackupFile.RandomString(System.Int32)">
            <summary>
            Generates a random string with the given length
            </summary>
            <param name="size">Size of the string</param>
            <returns>Random string</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1">
            <summary>
            Simple FIFO queue class. On enqueue, a new thread from thread pool is started that dequeues items
            and calls a callback method passed to the queue as construction parameter. The number of such thread
            is limited through construction parameter.
            
            The buffer handles aborting of working threads properly.
            </summary>
            <typeparam name="TItem">Type of contained items</typeparam>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.QueueCallBack">
            <summary>
            Type of callback method used to process the queue items
            </summary>
            <param name="oItem">Item to process</param>
            <returns></returns>
        </member>
        <member name="E:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Processing">
            <summary>
            Public event fired before next queue element gets processed
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Count">
            <summary>
            Returns the length of the queue
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.ThreadCount">
            <summary>
            Returns current number of processing threads
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.QueueEmptySignal">
            <summary>
            Retrieves the Queue Empty Event
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.CompletedSignal">
            <summary>
            Retrieves the processing completed event
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Empty">
            <summary>
            Quick check whether queue is empty
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Name">
            <summary>
            Gets or sets optional name of the queue
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.ApartmentState">
            <summary>
            Apartment type of queue's processing threads. Make sense only if m_useThreadPool is false
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.#ctor(Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue{`0}.QueueCallBack)">
            <summary>
            Constructor
            </summary>
            <param name="cbOnDequeue">External callback called on dequeue</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.#ctor(Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue{`0}.QueueCallBack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="cbOnDequeue">External callback called on dequeue</param>
            <param name="maxThreads">Maximal allowed number of processing threads</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.#ctor(Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue{`0}.QueueCallBack,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="cbOnDequeue">External callback called on dequeue</param>
            <param name="maxThreads">Maximal allowed number of processing threads</param>
            <param name="useTP">Specifies whether processing threads are Thread Pool based</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Finalize">
            <summary>
            dtor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.WaitEmpty(System.Int32)">
            <summary>
            Waits till queue is empty
            </summary>
            <param name="nTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.WaitCompleted(System.Int32)">
            <summary>
            Waits till processing is completed
            </summary>
            <param name="nTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Enqueue(`0)">
            <summary>
            Enqueues item
            </summary>
            <param name="oItem">Item to enqueue</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.EnqueueRange(System.Collections.Generic.IList{`0})">
            <summary>
            Enqueues range of item
            </summary>
            <param name="items">Items to enqueue</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Remove(`0)">
            <summary>
            Removes a given item from queue. ATTENTION: algorithm is most inefficient!!! Something has to be done about it afterwards
            </summary>
            <param name="item">Item to remove</param>
            <returns>Number ot items removed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Clear">
            <summary>
            Clears the queue
            </summary>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.MainEP(System.Object)">
            <summary>
            Working horse : entry point of processing threads
            </summary>
            <param name="state">item to process</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.MainEPImpl">
            <summary>
            Main processing of queue items
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Report">
            <summary>
            Reports current internal state of the queue
            </summary>
            <returns>Report as a string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Report(`0)">
            <summary>
            Reports current internal state of the queue; looks up specified item and reports whether it is present within the queue
            </summary>
            <param name="probe">Item to look up</param>
            <returns>Report as a string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CancellableQueue`1.Dispose">
            <summary>
            Dispose pattern
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.ComHelper">
            <summary>
            Provides helpers for COM interoperability.
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.VariantFalse">
            <summary>
            VARIANT_FALSE
            </summary>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.VariantTrue">
            <summary>
            VARIANT_TRUE
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.ToVariantBool(System.Boolean)">
            <summary>
            Converts a boolean to a VARIANT_BOOL.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>VariantTrue, if value is true; otherwise VariantFalse.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.CleanupAfterComCalls">
            <summary>
            Makes sure the RCWs created during a series of COM calls are finalized and their COM objects released.
            For details, see Nathan's interoperability guide.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.SafeReleaseComObject(System.Object)">
            <summary>
            Releases the reference to a RCW if the specified reference is not null
            and it is an RCW.
            </summary>
            <param name="o">The object to release.</param>
            <remarks>If o is null or if o is not a COM object, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.SafeFinalReleaseComObject(System.Object)">
            <summary>
            Releases all references to a RCW if the specified reference is not null
            and it is an RCW.
            </summary>
            <param name="o">The object to release.</param>
            <remarks>If o is null or if o is not a COM object, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.SafeReleaseComObjectOrDispose(System.Object)">
            <summary>
            Releases the reference to a RCW if the specified reference is not null
            and it is an RCW; otherwise, tries to dispose of the object.
            </summary>
            <param name="o">The object to release.</param>
            <remarks>If o is null or if o is not a COM object or if it does not implement IDisposable, the method does nothing.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ComHelper.SafeFinalReleaseComObjectOrDispose(System.Object)">
            <summary>
            Releases all references to a RCW if the specified reference is not null
            and it is an RCW; otherwise, tries to dispose of the object.
            </summary>
            <param name="o">The object to release.</param>
            <remarks>If o is null or if o is not a COM object or if it does not implement IDisposable, the method does nothing.</remarks>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.ErrorUtils">
            <summary>
            Provides helpers for error reporting and handling.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ErrorUtils.IsCriticalException(System.Exception)">
            <summary>
            Determines if an exception cannot be handled and must be rethrown.
            </summary>
            <param name="ex">The Exception to check.</param>
            <returns>True, if the specified exception cannot be handled and must be rethrown; otherwise, false.
            For example, a StackOverflowException is a critical exception that cannot be safely handled by our application.
            </returns>
            <remarks>The implementation is based on System.Windows.Forms.ClientUtils.IsCriticalException in .NET 2.0.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ErrorUtils.IsCatchableException(System.Exception)">
            <summary>
            Determines whether an exceptiom is catchable exception.
            </summary>
            <param name="exception">The e.</param>
            <returns>
            	<c>true</c> if the the specified exception is catchable exception; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx">
            <summary>
            Encrypts and decrypts an array of bytes
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx.#ctor">
            <summary>
            Default constructor
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when current assembly and calling assembly don't have same key</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx.#ctor(System.Boolean)">
            <summary>
            Constructor allowing the set of compression
            </summary>
            <param name="useCompression">Allow usage of compression</param>
            <exception cref="T:System.InvalidOperationException">Thrown when current assembly and calling assembly don't have same key</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx.ConvertData(System.Byte[])">
            <summary>
            Encrypts an array of bytes
            </summary>
            <param name="plainData">source array of bytes</param>
            <returns>encrypted array</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when plainData is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx.RestoreData(System.Byte[])">
            <summary>
            Decrypts an array of bytes
            </summary>
            <param name="convertedData">encrypted array of bytes</param>
            <returns>decrypted array</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversionEx.Combine(System.Byte[][])">
            <summary>
            Combines a set of byte arrays into one single byte array
            </summary>
            <param name="arrays">list of byte arrays</param>
            <returns>resulting byte array</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.HashDefinition">
            <summary>
            Hashing description
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.HashDefinition.#ctor">
            <summary>
            Initializes a new empty HashDefinition object.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.HashDefinition.#ctor(Audicon.SmartAnalyzer.Common.Utilities.HashDefinition)">
            <summary>
            Initializes a new HashDefinition
            with a copy of the specified HashDefinition.
            </summary>
            <param name="value">The HashDefinition to copy.</param>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.HashDefinition.AlgorithmName">
            <summary>
            Algorithm name
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.HashDefinition.AlgorithmVersion">
            <summary>
            Algorithm version
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.HashData">
            <summary>
            Hashing information
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.HashData.#ctor(Audicon.SmartAnalyzer.Common.Utilities.HashDefinition)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.HashData.HashValue">
            <summary>
            Calculated hash data
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities">
            <summary>
            Ad hoc class for special type of Idea access
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.GetFilePathRelativeToProject(System.String,System.Boolean)">
            <summary>
            Returns the path of an idea table relative to current project.
            </summary>
            <param name="fullPath">Full path of the file.</param>
            <param name="isLocal">True if it is a local file.</param>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is null, empty or white spcace.</exception>
            <returns>The relative path to the project working folder. Will return full path if file is outside the project folder.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.GetLocalFilePathRelativeToProject(System.String,System.String)">
            <summary>
            Returns the path of an idea table relative to current project.
            </summary>
            <param name="path">Path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is null, empty or white spcace.</exception>
            <returns>The relative path to the project working folder. Will return full path if file is outside the project folder.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.GetImdFileId(System.String,System.Boolean,System.Guid@)">
            <summary>
            Returns ID of IMD file
            </summary>
            <param name="fileName">IMD file name</param>
            <param name="localFile">local/server flag</param>
            <param name="ideaServerFileId">For server files, file's DB ID is returned here</param>
            <returns>File ID (for server files, IdeaInternalDBID is returned)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.InputFile(Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITest,System.String)">
            <summary>
            For the given Audut Test and logical file alias, returns logical input file
            </summary>
            <param name="test">Audit test</param>
            <param name="inputFileAlias">Logical file alias</param>
            <returns>Logical input file</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.InputFile(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,Audicon.SmartAnalyzer.Common.Interfaces.Storage.ITestInputFile)">
            <summary>
            For given execution record and logical input file, returns corresponding physical input file
            </summary>
            <param name="execRec">Execution record</param>
            <param name="inF">Logical input file</param>
            <returns>Physical input file</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.InputFile(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,System.String)">
            <summary>
            For given execution record and input file alias, returns corresponding physical input file
            </summary>
            <param name="execRec">Execution record</param>
            <param name="alias">Input file alias</param>
            <returns>Physical input file</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.IdeaUtilities.InputFile(Audicon.SmartAnalyzer.Common.Interfaces.Tracking.IExecutionRecord,System.String,System.Guid)">
            <summary>
            For given execution record, input file alias and IMD file ID, returns corresponding physical input file
            </summary>
            <param name="execRec">Execution record</param>
            <param name="alias">Input file alias</param>
            <param name="inpufFileId">IMD file ID</param>
            <returns>Physical input file</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.InputRules">
            <summary>
            Contains various validation rules for input
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.ValidateString(System.String,System.String[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Validates a string value
            </summary>
            <param name="inputString">value to check</param>
            <param name="exceptedChars">list of excepted characters</param>
            <param name="acceptEmpty">true if null or empty string is considered valid</param>
            <param name="minLength">minimum allowed number of characters</param>
            <param name="maxLength">maximum allowed number of characters</param>
            <exception cref="T:System.ArgumentNullException">thrown when inputString is null or empty and acceptEmpty is false</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">thrown when one char from the excepted list is found inside inputString</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">thrown when given value's length is not between min vale and max value</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.ValidateString(System.String,System.String[],System.String[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Validates a string value
            </summary>
            <param name="inputString">value to check</param>
            <param name="exceptedChars">list of excepted characters</param>
            <param name="allowedChars">list of allowed chars; all other chars will be considered excepted</param>
            <param name="acceptEmpty">true if null or empty string is considered valid</param>
            <param name="minLength">minimum allowed number of characters</param>
            <param name="maxLength">maximum allowed number of characters</param>
            <exception cref="T:System.ArgumentNullException">thrown when inputString is null or empty and acceptEmpty is false</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">thrown when one char from the excepted list is found inside inputString</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">thrown when given value's length is not betwwen min vale and max value</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.ValidateInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates an int value
            </summary>
            <param name="inputInteger">value to check</param>
            <param name="minValue">minimum allowed value</param>
            <param name="maxValue">maximum allowed value</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">thrown when given value is not between min value and max value</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.ValidateDate(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Validates a date value
            </summary>
            <param name="inputDate">value to check</param>
            <param name="minValue">minimum allowed value</param>
            <param name="maxValue">maximum allowed value</param>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">thrown when given value is not between min vale and max value</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.ValidateEnum(System.Enum)">
            <summary>
            Validates an enum-kind value against the enum definition
            </summary>
            <param name="inputValue">value to check</param>
            <exception cref="T:System.ArgumentException">thrown when the given value is not valid for the base type enum</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.CastToDataType(System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType)">
            <summary>
            Converts a given string to the type specified in DataType property
            </summary>
            <param name="input">any string</param>
            <param name="dataType">type of the property</param>
            <returns>object having base type the type specified in DataType property</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if input is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if dataType is not one defined in the PropertyDataType enum</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when given value cannot be converted to the internal type</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.CastToDataType(System.String,Audicon.SmartAnalyzer.Common.Types.PropertyDataType,Audicon.SmartAnalyzer.Common.Types.EquationOperator)">
            <summary>
            Converts a given string to the type specified in DataType property for the specified operator
            </summary>
            <param name="input">any string</param>
            <param name="dataType">type of the property</param>
            <param name="usedOperator">operator used</param>
            <returns>object having base type the type specified in DataType property</returns>
            <exception cref="T:System.ArgumentException">Thrown if dataType is not one defined in the PropertyDataType enum</exception>
            <exception cref="T:System.ArgumentException">Thrown if operator is not one defined in the EquationOperator enum</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when given value cannot be converted to the internal type</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.InputRules.DefaultValue(Audicon.SmartAnalyzer.Common.Types.PropertyDataType)">
            <summary>
            Returns the default value for each type
            </summary>
            <param name="dataType">type of the property</param>
            <returns>string</returns>
            <exception cref="T:System.ArgumentException">Thrown if dataType is not one defined in the PropertyDataType enum</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.LicenseContextRedirector`1">
            <summary>
            Class allows redirecting the lookup of license key for a specified licensed type to a specified assembly
            </summary>
            <typeparam name="TLicensed">Licensed type to redirect lookup for</typeparam>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.LicenseContextRedirector`1.#ctor(System.Reflection.Assembly)">
            <summary>
            ctor
            </summary>
            <param name="licModule">Assembly to redirect lookup to</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.LicenseContextRedirector`1.Finalize">
            <summary>
            Finalizes an instance of type LicenseContextRedirector.
            </summary>
            <remarks>The finalizer calls Dispose(false).</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.LicenseContextRedirector`1.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
            <summary>
            Overrides bas class version. Implements lookup redirection
            </summary>
            <param name="type">Type to find license key for</param>
            <param name="resourceAssembly">Assembly to look for a key</param>
            <returns>Key string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.LicenseContextRedirector`1.Dispose">
            <summary>
            Dispose method. Resets the license context
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.ReferenceComparer`1">
            <summary>
            Implements IEqualityComparer by comparing the references with object.ReferenceEquals.
            </summary>
            <typeparam name="T">The reference type.</typeparam>
        </member>
        <member name="F:Audicon.SmartAnalyzer.Common.Utilities.ReferenceComparer`1.Default">
            <summary>
            The per-type singleton.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ReferenceComparer`1.#ctor">
            <summary>
            The private default constructor.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ReferenceComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>True, if the references arer equal; otherwise, false.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ReferenceComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for an object.
            </summary>
            <param name="obj">The object for which the functions computes a hash code. 
            The function does not call the object's implementation of GetHashCode. It calls RuntimeHelpers.GetHashCode.</param>
            <returns>A hash code computed over the reference.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data. As long as encryption and decryption routines use the same
            parameters to generate the keys, the keys are guaranteed to be the same.
            The class uses static functions with duplicate code to make it easier to
            demonstrate encryption and decryption logic. In a real-life application, 
            this may not be the most efficient way of handling encryption, so - as
            soon as you feel comfortable with it - you may want to redesign this class.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.Encrypt(System.Byte[],System.Byte[],System.Byte[],Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.HashAlgorithmValues,System.Int32,System.String,Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.KeySizeValues)">
            <summary>
            Encrypts specified byte array using Rijndael symmetric key algorithm
            and returns a byte array result.
            </summary>
            <param name="plainData">Plaindata value to be encrypted (as byte array)</param>
            <param name="passPhrase">Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.</param>
            <param name="saltValue">Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.</param>
            <param name="hashAlgorithm">Hash algorithm used to generate password. 
            Allowed values are: "MD5" and "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.</param>
            <param name="passwordIterations">Number of iterations used to generate password. 
            One or two iterations should be enough.</param>
            <param name="initVector">Initialization vector. This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be exactly 16 ASCII characters long.</param>
            <param name="keySize">Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            Longer keys are more secure than shorter keys.</param>
            <returns>Encrypted value formatted as a byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the params is null (or empty for strings)</exception>
            <exception cref="T:System.ArgumentException">Thrown when hashAlgorithm is not MD5 or SHA1</exception>
            <exception cref="T:System.ArgumentException">Thrown when keySize is not 128, 192 or 256</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when passwordIterations is smaller than 1</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when initVector is not 16 chars long</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.Decrypt(System.Byte[],System.Byte[],System.Byte[],Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.HashAlgorithmValues,System.Int32,System.String,Audicon.SmartAnalyzer.Common.Utilities.RijndaelSimple.KeySizeValues)">
            <summary>Decrypts specified ciphertext using Rijndael symmetric key algorithm.</summary>
            <param name="cipherText">Byte array formatted ciphertext value.</param>
            <param name="passPhrase">Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.</param>
            <param name="saltValue">Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.</param>
            <param name="hashAlgorithm">Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.</param>
            <param name="passwordIterations">Number of iterations used to generate password. 
            One or two iterations should be enough.</param>
            <param name="initVector">Initialization vector. This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be exactly 16 ASCII characters long.</param>
            <param name="keySize">Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.</param>
            <returns>Decrypted string value.</returns>
            <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the params is null (or empty for strings)</exception>
            <exception cref="T:System.ArgumentException">Thrown when hashAlgorithm is not MD5 or SHA1</exception>
            <exception cref="T:System.ArgumentException">Thrown when keySize is not 128, 192 or 256</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when passwordIterations is smaller than 1</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.DataOutOfRangeException">Thrown when initVector is not 16 chars long</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.RijndaelAlt">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data.
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.FastConversion">
            <summary>
            Encrypts and decrypts an array of bytes
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.#ctor">
            <summary>
            Default constructor
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when current assembly and calling assembly don't have same key</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.#ctor(System.Boolean)">
            <summary>
            Constructor allowing the set of compression
            </summary>
            <param name="useCompression">Allow usage of compression</param>
            <exception cref="T:System.InvalidOperationException">Thrown when current assembly and calling assembly don't have same key</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.ConvertData(System.Byte[],System.String)">
            <summary>
            Encrypts an array of bytes
            </summary>
            <param name="plainData">source array of bytes</param>
            <param name="algorithm">name of the algorithm to be used; in case this is empty or null old algorithm will be used</param>
            <returns>encrypted array</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when plainData is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.ConvertData(System.Byte[])">
            <summary>
            Encrypts an array of bytes
            </summary>
            <param name="plainData">source array of bytes</param>
            <returns>encrypted array</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when plainData is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.RestoreData(System.Byte[])">
            <summary>
            Decrypts an array of bytes
            </summary>
            <param name="convertedData">encrypted array of bytes</param>
            <returns>decrypted array</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.CreateHashAlgorithm(System.String)">
            <summary>
            Creates an instance of the hash algorithm specified by given name
            </summary>
            <param name="algorithmName">Name of the algorithm</param>
            <returns>New isntance of the hash algorithm</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when given algorithm name is null or empty or white space</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the algorithm cannot be created (internal exception will specify why)</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FastConversion.HashData(System.Byte[],System.String)">
            <summary>
            Creates a hash of the given data using the given algorith name
            </summary>
            <param name="plainData">Data to be hashed</param>
            <param name="algorithm">Name of the hashing algorithm</param>
            <returns>Generated hash</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data to be hashed is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.CryptoUtils.CreateHashAlgorithm(System.String)">
            <summary>
            Creates a HashAlgorithm from the specified name.
            </summary>
            <param name="algorithmName">The name of the algorithm.</param>
            <returns>A HashAlgorithm for the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">If algorithmName is null or if it consists of only white spaces.</exception>
            <exception cref="T:System.InvalidOperationException">If the hash algorithm with the specified name could not be resolved.</exception>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.Header.HeaderVersion">
            <summary>
            Header version
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.Header.UseCompression">
            <summary>
            Use compression
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.Header.AlgorithmName">
            <summary>
            Algorithm name
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1">
            <summary>
            Simple FIFO queue class. On enqueue, a new thread from thread pool is started that dequeues items
            and calls a callback method passed to the queue as construction parameter. The number of such thread
            is limited through cunstruction parameter.
            
            The dequeueing process can also be blocked by external wait handles passed in AssignBlockingQueues() method.
            </summary>
            <typeparam name="TItem">Type of contained items</typeparam>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.QueueCallBack">
            <summary>
            Type of callback method used to process the queue items
            </summary>
            <param name="oItem">Item to process</param>
            <returns></returns>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Count">
            <summary>
            Returns the length of the queue
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.ThreadCount">
            <summary>
            Returns current number of processing threads
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.QueueEmptySignal">
            <summary>
            Retrieves the Queue Empty Event
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.CompletedSignal">
            <summary>
            Retrieves the processing completed event
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Empty">
            <summary>
            Quick check whether queue is empty
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Name">
            <summary>
            Gets or sets optional name of the queue
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.#ctor(Audicon.SmartAnalyzer.Common.Utilities.FifoQueue{`0}.QueueCallBack)">
            <summary>
            Constructor
            </summary>
            <param name="cbOnDequeue">External callback called on dequeue</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.#ctor(Audicon.SmartAnalyzer.Common.Utilities.FifoQueue{`0}.QueueCallBack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="cbOnDequeue">External callback called on dequeue</param>
            <param name="maxThreads">Maximal allowed number of processing threads</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Finalize">
            <summary>
            dtor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.WaitEmpty(System.Int32)">
            <summary>
            Waits till queue is empty
            </summary>
            <param name="nTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.WaitCompleted(System.Int32)">
            <summary>
            Waits till processing is completed
            </summary>
            <param name="nTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Enqueue(`0)">
            <summary>
            Enqueues item
            </summary>
            <param name="oItem">Item to enqueue</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.EnqueueRange(System.Collections.Generic.IList{`0})">
            <summary>
            Enqueues range of item
            </summary>
            <param name="items">Items to enqueue</param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Clear">
            <summary>
            Clears the queue
            </summary>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.MainEP(System.Object)">
            <summary>
            Working horse : entry point of processing threads
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Report(`0)">
            <summary>
            Reports current internal state of the queue; looks up specified item and reports whether it is present within the queue
            </summary>
            <param name="probe">Item to look up</param>
            <returns>Report as a string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.FifoQueue`1.Dispose">
            <summary>
            Dispose pattern
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer">
            <summary>
            Thread-safe wrapper around System.ComponentModel.Design.ServiceContainer
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.GetService``1">
            <summary>
            Looks up registered service of specified type
            </summary>
            <typeparam name="T">type of service to retrieve</typeparam>
            <returns>service reference, or null if not registered</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddService``1(``0)">
            <summary>
            Registeres service of specified type
            </summary>
            <typeparam name="T">type of service to register</typeparam>
            <param name="serviceInstance">reference of service object</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.RemoveService``1">
            <summary>
            Removes service of specified type
            </summary>
            <typeparam name="T">type of service to remove</typeparam>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddServiceFactory``2(System.Func{System.ComponentModel.Design.IServiceContainer,``1,``0})">
            <summary>
            Registers a factory to produce service instances
            </summary>
            <typeparam name="TSvc">Service type the factory produced</typeparam>
            <typeparam name="TArg">Type of argument to pass to service creator</typeparam>
            <param name="creator">service creation method</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.RemoveServiceFactory``2">
            <summary>
            Removes a service factory of the specified type.
            </summary>
            <typeparam name="TSvc">Service type the factory produced</typeparam>
            <typeparam name="TArg">Type of argument to pass to service creator</typeparam>
            <returns>Returns the current creation method.
            The method returns null, if a service of the specified type was not registered.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.GetServiceInstance``2(``1)">
            <summary>
            Retrieves new instance of service with registered factory
            </summary>
            <typeparam name="TSvc">Service type the factory produced</typeparam>
            <typeparam name="TArg">Type of argument to pass to service creator</typeparam>
            <param name="args">Value of argument to pass to service creator</param>
            <returns>New instance of service</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.AddService()
            </summary>
            <param name="serviceType">type of service to register</param>
            <param name="callback">creation method</param>
            <param name="promote">true if promote to parent container</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.AddService()
            </summary>
            <param name="serviceType">type of service to register</param>
            <param name="callback">creation methodk</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.AddService()
            </summary>
            <param name="serviceType">type of service to register</param>
            <param name="serviceInstance">service reference to register</param>
            <param name="promote">true if promote to parent container</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.AddService()
            </summary>
            <param name="serviceType">type of service to register</param>
            <param name="serviceInstance">service reference to register</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.RemoveService()
            </summary>
            <param name="serviceType">type of service to remove</param>
            <param name="promote">true if promote to parent container</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.RemoveService(System.Type)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.RemoveService()
            </summary>
            <param name="serviceType">type of service to remove</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.GetService(System.Type)">
            <summary>
            Thread-safe analog of System.ComponentModel.Design.ServiceContainer.GetService()
            </summary>
            <param name="serviceType">type of service to retrive</param>
            <returns>service of specified type</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.Factory`2">
            <summary>
            Helper class for implementing service factory
            </summary>
            <typeparam name="TSvc">Service type the factory produced</typeparam>
            <typeparam name="TArg">Type of argument to pass to service creator</typeparam>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.Factory`2.Creator">
            <summary>
            Gets a reference to the creator.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.StoreServerContext">
            <summary>
            Stores current server domain context
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.RemoveServerContext">
            <summary>
            Removes current server domain context
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.SetServerContext">
            <summary>
            Applies stored server domain context
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.SafeServiceContainer.Dispose">
            <summary>
            Implements IDisposable
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility">
            <summary>
            Static access to Audicon.SmartAnalyzer.Components.Trace.TraceWrapper
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.InitializeSaContext(Audicon.SmartAnalyzer.Common.Types.TestResults.CasewareIdeaInfo,Audicon.SmartAnalyzer.Common.Types.TestResults.SmartAnalyzerInfo)">
            <summary>
            Tracer access method
            </summary>
            <param name="ideaInfo"></param>
            <param name="saInfo"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Info(System.String)">
            <summary>
            Tracer access method
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Info(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="message"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Info(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="format"></param>
            <param name="argv"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Warning(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="message"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Warning(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="format"></param>
            <param name="argv"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Error(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String)">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="message"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Error(Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Tracer access method
            </summary>
            <param name="funcArea"></param>
            <param name="format"></param>
            <param name="argv"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Trace(System.Diagnostics.TraceEventType,Audicon.SmartAnalyzer.Common.Types.FunctionalArea,System.String,System.Object[])">
            <summary>
            Tracer access method
            </summary>
            <param name="traceLevel"></param>
            <param name="funcArea"></param>
            <param name="message"></param>
            <param name="argv"></param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.TraceUtility.Trace(System.Diagnostics.TraceEventType,Audicon.SmartAnalyzer.Common.Types.FunctionalArea,Audicon.SmartAnalyzer.Common.Types.ContextInfoTypes,System.String,System.Object[])">
            <summary>
            Tracer access method
            </summary>
            <param name="traceLevel"></param>
            <param name="funcArea"></param>
            <param name="infoTypes"></param>
            <param name="message"></param>
            <param name="argv"></param>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.Utilities">
            <summary>
            Contains general purpose utility methods
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetMacAddress">
            <summary>
            Retrieves current MAC address 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetUniqueMachineId">
            <summary>
            Retrieves unique computer's ID. It is either its MAC address or just name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Serialize(System.Object)">
            <summary>
            Serializes given object to array of bytes
            </summary>
            <param name="graph">Objects' graph to serialize</param>
            <returns>Serialized object as byte array</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Serialize(System.Object,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)">
            <summary>
            Serializes given object to array of bytes
            </summary>
            <param name="graph">Objects' graph to serialize</param>
            <param name="style">Hint as to how strict deserialization is with respect to assembly version</param>
            <returns>Serialized object as byte array</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SerializeToFile(System.Object,System.String)">
            <summary>
            Serializes given object into file
            </summary>
            <param name="graph">Objects' graph to serialize</param>
            <param name="filePath">Name of output file</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Deserialize``1(System.Object)">
            <summary>
            Deserializes object of a given type from the array of bytes
            </summary>
            <typeparam name="TResult">Type of result object</typeparam>
            <param name="stream">stream containing serialized bytes</param>
            <returns>Deserialized object, or null if deserialization to a given type is not possible</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Deserialize``1(System.Object,System.Boolean)">
            <summary>
            Deserializes object of a given type from the array of bytes
            </summary>
            <typeparam name="TResult">Type of result object</typeparam>
            <param name="stream">stream containing serialized bytes</param>
            <param name="ignoreError">if false, method rethrows serialization exception</param>
            <returns>Deserialized object, or null if deserialization to a given type is not possible</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.DeserializeFromFile(System.String)">
            <summary>
            Deserializes contents of file
            </summary>
            <param name="fileName">File name</param>
            <returns>Deserialized file's contents</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MakeException(System.Exception)">
            <summary>
            Based on exception, the method builds full error message where all internal exceptions, when present, do contribute
            </summary>
            <param name="ex">Uppermost exception</param>
            <returns>Full error message</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Equals``1(``0[],``0[])">
            <summary>
            Compares 2 arrays by comparing each element and returns if they are equal or not
            </summary>
            <typeparam name="T">Any type that supports Equals</typeparam>
            <param name="array">Array that will be compared</param>
            <param name="other">Array that first one will be compared with</param>
            <returns>True if they have the same elements (as values), otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Sscanf(System.String,System.String)">
            <summary>
            Method similar to C++ sscanf
            </summary>
            <param name="original">formatted string</param>
            <param name="format">format</param>
            <returns>array of extracted values as strings</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsCriticalException(System.Exception)">
            <summary>
            Determines whether [is critical exception] [the specified ex].
            </summary>
            <param name="ex">The ex.</param>
            <returns>
            	<c>true</c> if [is critical exception] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsSevereException(System.Exception)">
            <summary>
            Determines whether [is severe exception] [the specified ex].
            </summary>
            <param name="ex">The ex.</param>
            <returns>
            	<c>true</c> if [is severe exception] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsDefined(System.Enum)">
            <summary>
            Check among the enumeration values
            </summary>
            <param name="value">value to be checked</param>
            <returns>true if the value is defined in the numeration, otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsValidEnumValue(System.Enum)">
            <summary>
            Validates the value against the real enumeration
            </summary>
            <param name="value">value to be checked</param>
            <returns>true if the value is made from members of the enumeration numeration, otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsFlagsEnumDefined(System.Enum)">
            <summary>
            Checks an enum with flags attribute for validity
            </summary>
            <param name="value">value to be checked</param>
            <returns>true if the value can be constructed or exists</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.HasFlags(System.Enum)">
            <summary>
            Tells if it has the flags attribute or not
            </summary>
            <param name="value">value who's base enumeration will be checked</param>
            <returns>true if the ebumeration has the flag "Flags", otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetAssembly(System.Int32)">
            <summary>
            Go through the stack and gets the assembly
            </summary>
            <param name="stackTraceLevel">The stack trace level.</param>
            <returns>Found assembly or null.</returns>
            <exception cref="T:System.ArgumentException">Thrown when input parameter is negative.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ValidateCall">
            <summary>
            Validates a function call;
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when current assembly and calling assembly don't have same key.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when calling assemblies could not be found.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ComputeId(System.Guid,System.String)">
            <summary>
            Computes a deterministic GUID from a GUID and a language code following RFC 4122, section 4.3.
            </summary>
            <param name="id">The language-independent id of an object.</param>
            <param name="languageCode">The language code. 
            The function uses the lower-case version (using the rules of the invariant culture) of the language code to compute the new identifier.
            An exception is thrown if this reference is null.</param>
            <returns>A new version 5 GUID derived from the id and the lower-case version (using the rules of the invariant culture) of the language code.</returns>
            <exception cref="T:System.ArgumentNullException">If languageCode is null.</exception>
            <remarks>
            <para>The function has the following property: 
            Two results are equal if and only if the language-independent ids are equal and the language codes are equal (except the casing).</para>
            <para>
            The function generates a version 5 GUID according to RFC4122 for name-based UUIDs using the SHA1 hash algorithm. 
            </para>
            <para> The code follows Bradley Grainger's implementation of the GuidUtility class.
            Please refer to code.logos.com ("Generating a deterministic GUID") for details.
            </para>
            </remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SwapByteOrder(System.Byte[])">
            <summary>
            Converts the array of bytes of a GUID to / from network order.
            </summary>
            <param name="guid">The array of bytes of the GUID to transform.</param>
            <exception cref="T:System.ArgumentNullException">If guidBytes is null.</exception>
            <remarks>The code was taken from Bradley Grainger's implementation of the GuidUtility class.
            Please refer to code.logos.com ("Generating a deterministic GUID") for details.</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SwapBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Swaps the specified bytes of an array.
            </summary>
            <param name="source">The array of bytes whose specified items will be swapped.</param>
            <param name="left">The index of the first item to swap.</param>
            <param name="right">The index of the second item to swap.</param>
            <exception cref="T:System.ArgumentNullException">If sourceBytes is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SetReadOnlyFlag(System.String)">
            <summary>
            Sets RO flag for the specified file
            </summary>
            <param name="filePath">full file path</param>
            <remarks>file availability is not checked</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.RemoveReadOnlyFlag(System.String)">
            <summary>
            Removes RO flag for the specified file
            </summary>
            <param name="filePath">full file path</param>
            <remarks>file availability is not checked</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.RemoveFolderReadOnlyFlag(System.String)">
            <summary>
            Removes read-only attribute by a folder
            </summary>
            <param name="folder">Folder to process</param>
            <returns>Folder attributes after performing the operation</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SetFolderReadOnlyFlag(System.String)">
            <summary>
            Sets read-only attribute to a folder
            </summary>
            <param name="folder">Folder to process</param>
            <returns>Folder attributes after performing the operation</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.FolderAttributesSet(System.String,System.IO.FileAttributes[])">
            <summary>
            Checks whether specufic attributes are set for the folder
            </summary>
            <param name="folder">Folder to check</param>
            <param name="attrs2Check">Attributes to check</param>
            <returns>True if any of the specified attribute is set for the folder, false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.SafeCopyFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a file to the given destination (thread safe)
            </summary>
            <param name="source">source file path</param>
            <param name="destination">destination file path</param>
            <param name="overwrite">if true and destination file exists it will be overwritten</param>
            <param name="giveFullRights">if true, to the destination file (if copied) full access right will be given for everyone </param>
            <exception cref="T:System.ArgumentNullException">thrown if source or destination is null or empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">thrown when source file does not exist</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GiveFullRights(System.String)">
            <summary>
            Give full right to Everyone account for the specified file
            </summary>
            <param name="filePath">file path</param>
            <exception cref="T:System.ArgumentNullException">thrown if source or destination is null or empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">thrown when source file does not exist</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetPcLocalTime(System.String)">
            <summary>
            Obtains local time on specified workstation
            </summary>
            <param name="pcName">Name of workstation; "." for local PC</param>
            <returns>Local time on given PC</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.FormatInv(System.String,System.Object[])">
            <summary>
            String extension formatting
            </summary>
            <param name="fmt">Format</param>
            <param name="args">args</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.CanDeleteTempDatabases(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            This extension method decides whether execution context permits deleting the temp files created by ATs/CIRs.
            Applicable for Macro Command DeleteDatabase. Following is the decision matrix for DeleteDatabase as required by Requirement #26724
            Checkbox visible	                                                Checkbox NOT visible
            Checkbox checked	        Checkbox NOT checked	
            IPP ON	    IPP OFF	    IPP ON	IPP OFF	                        IPP ON	IPP OFF
            DEL	        DEL	        KEEP    	KEEP                            	DEL	    DEL
            </summary>
            <param name="execCtx">Execution context object</param>
            <returns>True if deleting the temp files is permitted; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.CanGetRidOfTempDatabases(Audicon.SmartAnalyzer.Common.Components.ExecutionContext.TaskExecutionContext)">
            <summary>
            This extension method decides whether execution context permits deleting the temp files created by ATs/CIRs.
            Applicable for Macro Command GetRidOf. Following is the decision matrix for GetRidOf as required by Requirement #26724
            Checkbox visible	                                                Checkbox NOT visible
            Checkbox checked	        Checkbox NOT checked	
            IPP ON	    IPP OFF	    IPP ON	IPP OFF	                        IPP ON	IPP OFF
            DEL	        DEL	        DEL    	KEEP                            	DEL	    KEEP
            </summary>
            <param name="execCtx">Execution context object</param>
            <returns>True if deleting the temp files is permitted; false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>true if the files exist,otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.CreateTextFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Creates new text file
            </summary>
            <param name="path">File path</param>
            <param name="fileContent">File content</param>
            <param name="overwrite">If true, overwrite sth existing file</param>
            <param name="encoding">File encoding</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsSameOrDescendantOf(System.IO.DirectoryInfo,System.String)">
            <summary>
            Determines whether specified path represents given directory or one of its ancestor directories
            </summary>
            <param name="dir">Directory</param>
            <param name="ancestorPath">Potential ancestor path</param>
            <returns>True if potential ancestor path is same directory or actual ancestor directory</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsSameOrDescendantOf(System.String,System.String)">
            <summary>
            Determines whether specified path represents given directory or one of its ancestor directories
            </summary>
            <param name="dir">Directory</param>
            <param name="ancestorPath">Potential ancestor path</param>
            <returns>True if potential ancestor path is same directory or actual ancestor directory</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsDescendantOf(System.IO.DirectoryInfo,System.String)">
            <summary>
            Determines whether specified path represents one of directory's ancestor directories
            </summary>
            <param name="dir">Directory</param>
            <param name="ancestorPath">Potential ancestor path</param>
            <returns>True if potential ancestor path is actual ancestor directory</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ExpandPath(System.String)">
            <summary>
            Procees path string by expanding the environment variables, making path absolute and removing trailing backslashes
            </summary>
            <param name="path">path string</param>
            <returns>Processed path string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MoveFolder(System.String,System.String,System.Func{Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType,System.String,System.String,System.Exception,System.Boolean},System.Action{System.Tuple{Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType,System.String}})">
            <summary>
            Moves the folder
            </summary>
            <param name="sourceFolder">Source folder to move</param>
            <param name="targetFolder">Target folder to move source folder into</param>
            <param name="errorCallback"></param>
            <param name="progressCallback"></param>
            <returns>Full path of the moved folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MoveFolder(System.String,System.String,System.String,System.Func{Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType,System.String,System.String,System.Exception,System.Boolean},System.Action{System.Tuple{Audicon.SmartAnalyzer.Common.Types.FileSystemOperationType,System.String}})">
            <summary>
            Moves the folder
            </summary>
            <param name="sourceFolder">Source folder to move</param>
            <param name="targetFolder">Target folder to move source folder into</param>
            <param name="file2Cache">File to be present in target folder even if the move was not complete</param>
            <param name="errorCallback"></param>
            <param name="progressCallback"></param>
            <returns>Full path of the moved folder</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MoveDirectoryContent(System.String,System.String,System.Boolean)">
            <summary>
            Moves the content of the directory.
            </summary>
            <param name="sourceDirName">Name of the source directory.</param>
            <param name="destDirName">Name of the destination directory.</param>
            <param name="overwrite">if set to <c>true</c> existing directories should be overwritten.; otherwise False.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsComClassRegistered(System.String)">
            <summary>
            Deermines whether COM class with specified Prog Id is registered.
            </summary>
            <param name="comClassProgId">Prog Id to check</param>
            <returns>True if class with specified Prog Id is registered, false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsDriveReady(System.String)">
            <summary>
            Checks whether the drive of the given path is ready
            </summary>
            <param name="path">Path whose drive has to be checked</param>
            <returns>True if the drive of the given path is ready, false otherwise</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetComponents(System.Windows.Forms.Form)">
            <summary>
            Returns all components found on given form.
            </summary>
            <param name="form">Parent form.</param>
            <returns>Dictionary of components having as key their name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetComponents``1(System.Windows.Forms.Form)">
            <summary>
            Returns all components found on given form with a specific type.
            </summary>
            <typeparam name="T">Specific type of the component.</typeparam>
            <param name="form">Parent form.</param>
            <returns>Dictionary of components having as key their name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetOnlyComponents(System.Windows.Forms.Form)">
            <summary>
            Returns only components found on given form (no controls).
            </summary>
            <param name="form">Parent form.</param>
            <returns>Dictionary of components having as key their name.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Compress(System.Byte[])">
            <summary>
            Compresses an array of bytes using a GZipStream;
            </summary>
            <param name="value">The byte array to compress.
            An exception is thrown if this reference is null.</param>
            <returns>The result of the compression as a byte array.</returns>
            <exception cref="T:System.ArgumentNullException">If value is null.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Decompress(System.Byte[])">
            <summary>
            Decompresses a byte array with GZipStream.
            </summary>
            <param name="value">The byte array to decompress.
            An exception is thrown if this reference is null.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.Utilities.FileCacher">
            <summary>
            Simple class caching the file's contents and re-creating the file in multiple folders when disposed
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index in the collection where the predicate evaluates to true.
            
            Returns -1 if no matching item found
            </summary>
            <typeparam name="TSource">Type of collection</typeparam>
            <param name="source">Source collection</param>
            <param name="predicate">Function to evaluate</param>
            <returns>Index where predicate is true, or -1 if not found.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MakeValidFileName(System.String)">
            <summary>
            Makes the name of file valid.
            Replace invalid characters with _
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fileName</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsHostReady(System.String)">
            <summary>
            Determines accessibility of host computer
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsEqual``1(``0,``0)">
            <summary>
            Compares 2 values of type T
            </summary>
            <param name="value1">first value to be compared</param>
            <param name="value2">second value to be compared</param>
            <returns>true if the values are equal, otherwise false</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetInvalidPathChars">
            <summary>
            Returns the list of invalid chars for a windows path
            </summary>
            <returns>array of strings</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetInvalidFileNameChars(System.Boolean)">
            <summary>
            Returns the list of invalid chars for a windows file name
            </summary>
            <returns>array of strings</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.AsString(Audicon.SmartAnalyzer.Common.Types.GlobalParameterType)">
            <summary>
            String presentation converter for some enum GlobalParameterType. Should be used instead of ToString()
            </summary>
            <param name="item">GlobalParameterType enum item</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Performs a string replacement operation considering also the type of string comparison.
            </summary>
            <param name="input">Input string.</param>
            <param name="oldValue">String to be replaced.</param>
            <param name="newValue">String to replace with.</param>
            <param name="comparison">Type of string comparison.</param>
            <returns>New string resulted after replacement.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ReplaceOneTime(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Performs a string replacement operation (only first time) considering also the type of string comparison.
            </summary>
            <param name="input">Input string.</param>
            <param name="oldValue">String to be replaced.</param>
            <param name="newValue">String to replace with.</param>
            <param name="comparison">Type of string comparison.</param>
            <returns>New string resulted after replacement.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetConfigValue(System.Configuration.Configuration,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Reads the specified entry from a given configuration file and returns a given default value in case of an error
            </summary>
            <param name="cfgFile">Configuration object to read from</param>
            <param name="entryName">Name of the entry to be read</param>
            <param name="defaultValue">Default value that should be returned in case of an error</param>
            <param name="expandVariables">Expand environment variables</param>
            <param name="allowEmpty">If empty is not allowed and the value read is empty, the returned value is set to default value</param>
            <returns>Read value (or default value)</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when cfgFile is null, entryName is null or empty, defaultValue is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ExpandEnvironmentVariables(System.String)">
            <summary>
            Expand the environment variables found in a string and return the new created string
            </summary>
            <param name="input">Input string</param>
            <returns>Original string if no variables are found or a new string with variables expanded</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Scramble(System.String)">
            <summary>
            Scrambles a text.
            </summary>
            <param name="clearText">String to be scrambled.</param>
            <returns>A scrambled text.</returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
            <exception cref="T:System.ArgumentException">If message is empty.</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.Unscramble(System.String)">
            <summary>
            Unscrambles scrambled text
            </summary>
            <param name="scrambledText">scrambled text</param>
            <returns>Unscrambled text</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.StringToVersion(System.String,System.Int32@)">
            <summary>
            Conversts a string into a version object and return the size (number of version elements used)
            </summary>
            <param name="inputVersion">version in string format</param>
            <param name="versionSize">number of elements used (1 to 4)</param>
            <returns>Version object or null in case parsing could not be performed</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.VersionToString(System.Version,System.Int32)">
            <summary>
            Converts a version object into string considering number of elements needed
            </summary>
            <param name="inputVersion">Version object</param>
            <param name="versionSize">number of version elements (1 to 4)</param>
            <returns>String result or null in case inputs are incorrect (null version or size not between 1 and 4)</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.CompareVersionToString(System.Version,System.String)">
            <summary>
            Compares a version object to a string repesenting a version
            </summary>
            <param name="inputVersion">version object</param>
            <param name="inputString">string object</param>
            <returns>
            null if any of the inputs are null or empty or string cannot be converted to a version
            0 if the resulting versions are equal
            1 if the first parameter is greater than the second (as versions)
            -1 if the second parameter is greate than the first (as versions)
            </returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ShowHostProcessWindow(System.Boolean)">
            <summary>
            Shows/hides the main window of hosting process (normally, IDEA)
            </summary>
            <param name="show">Show/hide value</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.ShowHostProcessWindow(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Shows/hides the main window of hosting process (normally, IDEA)
            </summary>
            <param name="show">Show/hide value</param>
            <param name="automationOnly">Specifies how to act in automation scenario. Null: always; true: only in automation; false: not in automation</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.TrimString(System.String)">
            <summary>
            Trimms a string; if null it returns empty string
            </summary>
            <param name="input">string to be trimmed</param>
            <returns>trimmed string</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.AddGraphicalResult(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile,Audicon.SmartAnalyzer.Common.Types.TestResults.ChartResultType)">
            <summary>
            Adds a new graphical result associated to the current result. The object will be null in case the parent result is located on server.
            </summary>
            <param name="result">Result file object.</param>
            <param name="chartType">Type of the chart.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when result is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetGraphicalResults(Audicon.SmartAnalyzer.Common.Interfaces.TestResults.ITestResultFile)">
            <summary>
            Returns the list of graphical results, or null.
            </summary>
            <param name="result">Result file object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when result is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.TryDispose(System.Object)">
            <summary>
            Disposes the object if it supports IDisposable. 
            Does nothing if the object is null or does not support IDisposable.
            </summary>
            <param name="objectToDispose">The object to dispose. Can be null.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.GetTempFilePathWithExtension(System.String)">
            <summary>
            Generates a temporary file name with specific extension
            </summary>
            <param name="extension">Extension string, including dot.</param>
            <returns>Temporary file path.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.TryDeleteFile(System.String)">
            <summary>
            Tries to delete specified file.
            </summary>
            <param name="filePath">Path of the file.</param>
            <returns>True if the file doesn't exist or it was deleted successfully, false if the file could not be deleted.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsFipsCompliant(System.String)">
            <summary>
            Checks if given algorithm (by name) is fips compliant
            </summary>
            <param name="algorithmName">Name of the algorithm</param>
            <returns>True if algorithm is fips compliant, false if not and null in case the name cannot be matched to an algorithm</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.MakeSurePathExists(System.String)">
            <summary>
            Makes sure that a path tree exists
            </summary>
            <param name="folder">folder to create</param>
            <remarks>no tests are done</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.TimestampToString">
            <summary>
            Converts current timestamp into a string by calculationg nr of seconds since 20130101
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.StringToTimestamp(System.String)">
            <summary>
            Converts a string containing number of seconds since 20130101 to a local date and time. Returns null if conversion fails.
            </summary>
            <param name="input">input string</param>
            <returns>date time or null</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.Utilities.IsFileLocked(System.String)">
            <summary>
            Checks if a file is in use
            </summary>
            <param name="filePath">Path of the file</param>
            <returns>Return true if file is locked, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when file path is null or empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file does not exist</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Utilities.ZipManager">
            <summary>
            Class implementing basic functionality for using Microsoft package classes
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.ZipPath">
            <summary>
            Path of the zip file to use
            </summary>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when path set contains one char from the list: *?"&lt;>|</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileAdd(System.String)">
            <summary>
            Adds a file into the package 
            </summary>
            <param name="fileToAdd">path of the file to add</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToAdd is null or empty or whitespace</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the input file does not exist</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileAdd(System.String,System.String)">
            <summary>
            Adds a file into the package specifying subfolder 
            </summary>
            <param name="fileToAdd">path of the file to add</param>
            <param name="subfolderTree">subfolder in the zip file where the file should be added (empty string means root)</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToAdd is null or empty or whitespace</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when subfolderTree is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when subfolderTree contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the input file does not exist</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileAdd(System.String,System.String,System.String)">
            <summary>
            Adds a file into the package specifying subfolder and new name
            </summary>
            <param name="fileToAdd">path of the file to add</param>
            <param name="subfolderTree">subfolder in the zip file where the file should be added (empty string means root)</param>
            <param name="name">new name of the file in archive (empty string means the original file name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToAdd is null or empty or whitespace</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when subfolderTree is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when subfolderTree contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the input file does not exist</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileAddStream(System.IO.Stream,System.String,System.String)">
            <summary>
            Adds a file into the package from a stream specifying subfolder and new name
            </summary>
            <param name="fileToAdd">stream containing file bytes</param>
            <param name="subfolderTree">subfolder in the zip file where the file should be added (empty string means root)</param>
            <param name="name">new name of the file in archive</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToAdd is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when subfolderTree is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or empty or whitespaces</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when subfolderTree contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name contains one char from the list: *?"&lt;>|</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.GetFileList">
            <summary>
            Returns the list of files inside the package
            </summary>
            <returns>list of strings</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileExist(System.String)">
            <summary>
            Checks if a file exists inside the package
            </summary>
            <param name="fileToFind">file to be found inside the package (full path)</param>
            <returns>true if exists, false if not</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if fileToFind is null, empty or whitespace</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileExtract(System.String,System.String)">
            <summary>
            Extract a file from the package into the specified folder
            </summary>
            <param name="fileToExtract">File to be extracted</param>
            <param name="destinationFolder">Destination folder</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToExtract is null, empty or whitespaces</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when destinationFolder is null, empty or whitespaces</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when destinationFolder contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file to be extracted is not found inside the package</exception>
            <remarks>Destination folder is created if it doesn't exist</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileExtract(System.String,System.String,System.String)">
            <summary>
            Extract a file from the package into the specified folder and with the specified name
            </summary>
            <param name="fileToExtract">File to be extracted</param>
            <param name="destinationFolder">Destination folder</param>
            <param name="name">Destination name</param>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToExtract is null, empty or whitespaces</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when destinationFolder is null, empty or whitespaces</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null, empty or whitespaces</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when destinationFolder contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:Audicon.SmartAnalyzer.Common.Exceptions.InvalidCharacterException">Thrown when name contains one char from the list: *?"&lt;>|</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file to be extracted is not found inside the package</exception>
            <remarks>Destination folder is created if it doesn't exist</remarks>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Common.Utilities.ZipManager.FileExtractStream(System.String)">
            <summary>
            Extract the specified file from package as a stream
            </summary>
            <param name="fileToExtract">File to be extracted</param>
            <returns>Memory stream containing the bytes of the file</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when fileToExtract is null, empty or whitespaces</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file to be extracted is not found inside the package</exception>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Resources.Macro">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyField">
            <summary>
              Looks up a localized string similar to The field provided is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyFormatString">
            <summary>
              Looks up a localized string similar to The string to be formatted is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyMessage">
            <summary>
              Looks up a localized string similar to The message is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyPath">
            <summary>
              Looks up a localized string similar to The path provided is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyTableName">
            <summary>
              Looks up a localized string similar to The database name provided is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EmptyTagName">
            <summary>
              Looks up a localized string similar to The tag name provided is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EqIsEmpty">
            <summary>
              Looks up a localized string similar to The equation is blank..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.EquationToLong">
            <summary>
              Looks up a localized string similar to Invalid equation. The equation exceeds the maximum length of {0} characters..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.FilePathNotValid">
            <summary>
              Looks up a localized string similar to Invalid file path..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidContext">
            <summary>
              Looks up a localized string similar to The SAcontext object is empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidDataBaseFormat">
            <summary>
              Looks up a localized string similar to The base name must be formatted as a string..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidOperationRemoveHistory">
            <summary>
              Looks up a localized string similar to The RemoveHistory operation cannot be performed on {0}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidOptionalArgument">
            <summary>
              Looks up a localized string similar to The optional argument is invalid..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidOptionalArguments">
            <summary>
              Looks up a localized string similar to The optional arguments are invalid..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.InvalidTableName">
            <summary>
              Looks up a localized string similar to The database name &apos;{0}&apos; is not present in the given context..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.MissingPermisions">
            <summary>
              Looks up a localized string similar to Missing access rights for folder &apos;{0}&apos;. A user needs read, write and delete rights for an IDEA project directory..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.OutOfRangeFieldType">
            <summary>
              Looks up a localized string similar to The field type is out of range..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.OutOfRangePositionOfField">
            <summary>
              Looks up a localized string similar to The position of the field is out of range..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.OutOfRangeResultType">
            <summary>
              Looks up a localized string similar to The result type assigned is out of range..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.TagManagementPerformTask">
            <summary>
              Looks up a localized string similar to You must call PerformTask before trying to get the tag information..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.TestFilename">
            <summary>
              Looks up a localized string similar to test19215CF816C0.txt.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Macro.WrongFieldName">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Common.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_AbsoluteFolderPathNotAllowed">
            <summary>
              Looks up a localized string similar to The path to the destination folder cannot be absolute..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_BadImplementationType">
            <summary>
              Looks up a localized string similar to The ImplementationType must be &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_CirDataPreparationLauncher_UnexpectedContextType">
            <summary>
              Looks up a localized string similar to The specified context object does not have the expected type. Expected: &apos;{0}&apos;, Actual: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_CirExecutor_AllDataPreparationDataElementsMustBeExtensionsExceptFirstElement">
            <summary>
              Looks up a localized string similar to All elements of DataPreparationData except the first one must be extensions..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_EmptyCollection">
            <summary>
              Looks up a localized string similar to The collection cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_EmptyDatabasePath">
            <summary>
              Looks up a localized string similar to The database path cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_EmptyString">
            <summary>
              Looks up a localized string similar to The string cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_EquationTooLong">
            <summary>
              Looks up a localized string similar to The equation is too long..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidArgumentType">
            <summary>
              Looks up a localized string similar to The type of the actual parameter is incorrect. Supported types: {0}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidDatabaseArgumentType">
            <summary>
              Looks up a localized string similar to The type of the current database parameter is incorrect. Supported types: {0}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidDatabasePath">
            <summary>
              Looks up a localized string similar to The database path must be a valid file path..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value does not exist or contains flags that do not exist in the base enumeration..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidRange">
            <summary>
              Looks up a localized string similar to Invalid range.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidScriptPath">
            <summary>
              Looks up a localized string similar to The script path must be a valid file path..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_InvalidSpecialDayFilterArrayElementType">
            <summary>
              Looks up a localized string similar to The array element must be either a DateTime value, an array with at least 2 elements having at index 0 the IDEA string rep. of a valid Gregorian calendar date and at index 1 the name of the special day or a string containing the IDEA string rep. of a valid Gregorian calendar date..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_ListElementTypeNotDate">
            <summary>
              Looks up a localized string similar to The list element type must be Date..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NegativeOrZeroValue">
            <summary>
              Looks up a localized string similar to The value cannot be negative or zero..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NegativeValue">
            <summary>
              Looks up a localized string similar to The value cannot be negative..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NegativeValueInEnum">
            <summary>
              Looks up a localized string similar to Cannot process negative {0} as {1} enumeration with flags..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NotADateList">
            <summary>
              Looks up a localized string similar to The list does not contain date values..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NotADecimalOrNumericList">
            <summary>
              Looks up a localized string similar to The list does not contain decimal or numeric values..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NotAStringList">
            <summary>
              Looks up a localized string similar to The list does not contain string values..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NotATimeList">
            <summary>
              Looks up a localized string similar to The list does not contain time values..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NotDbNameOrRef">
            <summary>
              Looks up a localized string similar to The first argument must be either an IDEA database name or an IDEA database reference..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NullIdeaClient">
            <summary>
              Looks up a localized string similar to IdeaClient cannot be null..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NullRangeEnd">
            <summary>
              Looks up a localized string similar to The end value cannot be null..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_NullRangeStart">
            <summary>
              Looks up a localized string similar to The start value cannot be null..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_RunDotNetTask_ContextTypeMismatch">
            <summary>
              Looks up a localized string similar to The type of the context object does not match the type expected by the method to be invoked..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_ScriptCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The script cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_Sequence_DuplicateId">
            <summary>
              Looks up a localized string similar to The sequence cannot contain items with the same ID ({0})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_Sequence_NullsNotAllowed">
            <summary>
              Looks up a localized string similar to The sequence cannot contain nulls..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_SimpleImportFilesHelper_NullsNotAllowed">
            <summary>
              Looks up a localized string similar to The collection cannot contain nulls..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Arg_SizeTooSmallToDecrypt">
            <summary>
              Looks up a localized string similar to The input array is too small to be decrypted with this algorithm..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.CLBR_ERR_NO_SERVER_REQUEST">
            <summary>
              Looks up a localized string similar to This request can only be processed locally..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ColumnNotFound_DefaultMessage">
            <summary>
              Looks up a localized string similar to The specified column was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ColumnNotFound_DefaultMessage2">
            <summary>
              Looks up a localized string similar to The specified column was not found in the database &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ColumnNotFound_DefaultMessage3">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; was not found in the database &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ColumnNotFound_DefaultMessage4">
            <summary>
              Looks up a localized string similar to The column &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.DatabaseAndColumnNamesFragment">
            <summary>
              Looks up a localized string similar to Database name = &apos;{0}&apos;, ColumnName = &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.DatabaseGetFieldError">
            <summary>
              Looks up a localized string similar to GetField method throws an error. Field &apos;{0}&apos; may not exist..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.DatabaseNameCannotBeEmptyMessage">
            <summary>
              Looks up a localized string similar to The database name cannot be empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ERR_TE_NO_DAL_FOUND">
            <summary>
              Looks up a localized string similar to The Data Access Component is not initialized..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_DuplicateId">
            <summary>
              Looks up a localized string similar to Object {0} with ID &apos;{1}&apos; already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_DuplicateName">
            <summary>
              Looks up a localized string similar to Object {0} with ID &apos;{1}&apos; has a duplicate name (&apos;{2}&apos;) for language &apos;{3}&apos; and owner &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_InvalidChar">
            <summary>
              Looks up a localized string similar to Invalid character: {0} ({1})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_ObjectNotFound">
            <summary>
              Looks up a localized string similar to Object cannot be found: {0} ({1})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_Range">
            <summary>
              Looks up a localized string similar to Allowed range: [{0}, {1}]..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_Signature">
             <summary>
               Looks up a localized string similar to Checking type {2} failed for object {0} ({1}) with the error:
            {3}.
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_TagMandatoryNotAllowed">
            <summary>
              Looks up a localized string similar to The mandatory tag &apos;{2}&apos; is not allowed for the assigned database &apos;{1}&apos; of the audit test &apos;{0}&apos; because the assigned database was defined as having optional tagging..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_TagsNotAllowed">
            <summary>
              Looks up a localized string similar to Tags are not allowed for the assigned database &apos;{1}&apos; of the audit test &apos;{0}&apos; because the assigned database was defined as not having tags..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_TagsNotDefined">
            <summary>
              Looks up a localized string similar to Tags were not defined for the assigned database &apos;{1}&apos; of the audit test &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrLog_WrongVersion">
             <summary>
               Looks up a localized string similar to Object searched: {0}
            Version found: {1}
            Version expected: {2}.
             </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CannotCreateHashAlgorithm">
            <summary>
              Looks up a localized string similar to Cannot create hash algorithm with name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirDataPreparationLauncher_ContextNotForServerTask">
            <summary>
              Looks up a localized string similar to The specified execution context is not associated with an IDEA Server task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_DataPreparationDataCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to DataPreparationData cannot be null or empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_DataPreparationDataCannotContainNulls">
            <summary>
              Looks up a localized string similar to DataPreparationData cannot contain nulls..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_FirstElementOfDataPreparationDataCannotBeExtension">
            <summary>
              Looks up a localized string similar to The first element of DataPreparationData cannot be an extension..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_MoveImportedDatabasesNotSupported">
            <summary>
              Looks up a localized string similar to The current execution context does not allow moving the imported databases to a different folder..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_NotSupportedExecutableType">
            <summary>
              Looks up a localized string similar to The executable type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_SubtaskFailed_ReferToExecutionLog">
            <summary>
              Looks up a localized string similar to A subtask of the Standard Import Routine failed. Refer to the run log for details..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirExecutor_TaskHasUnknownImplementationType">
            <summary>
              Looks up a localized string similar to The task &apos;{0}&apos; has an unknown implementation type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirRuntime_NotSupportedResourceType">
            <summary>
              Looks up a localized string similar to The resource type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_CirRuntime_ResourcesLoadFailure">
            <summary>
              Looks up a localized string similar to The resources of the object with ID &apos;{0}&apos; could not be loaded..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_DestinationDatabaseAlreadyExists">
            <summary>
              Looks up a localized string similar to The destination database already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_EndDateNotInCalendarRange">
            <summary>
              Looks up a localized string similar to The end date {0:d} is invalid. It should be a value in the Gregorian calendar range {1:d} - {2:d}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_EquationTooLong">
            <summary>
              Looks up a localized string similar to The length of the equation &apos;{0}&apos; is greater than {1}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_ExecutionContextNotSet">
            <summary>
              Looks up a localized string similar to The execution context was not set..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_FieldDoesNotSupportStatistics">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; of type &apos;{1}&apos; in the database &apos;{2}&apos; does not support statistics..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_FileNotFound">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_HashAlgorithmNotFoundInCryptoConfig">
            <summary>
              Looks up a localized string similar to The hash algorithm &apos;{0}&apos; was not found in CryptoConfig..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidFileId">
            <summary>
              Looks up a localized string similar to The unique identifier of the file &apos;{0}&apos; does not match with the expected ID ({1})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidFileSystemEntity">
            <summary>
              Looks up a localized string similar to IDEA databases and folders have to be specified either by a name or by an ID..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidFolderId">
            <summary>
              Looks up a localized string similar to The unique identifier &apos;{0}&apos; of the directory does not match with the expected ID ({1})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidIdFileName">
            <summary>
              Looks up a localized string similar to The unique identifier &apos;{0}&apos; of the directory has an invalid name format..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidWeekendsOptionValue">
            <summary>
              Looks up a localized string similar to The specified WeekendsOption value is not defined..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_InvalidWeekNumberingValue">
            <summary>
              Looks up a localized string similar to The specified WeekNumbering value is not defined..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_ISLibraryNotFound">
            <summary>
              Looks up a localized string similar to The following SmartAnalyzer library folder cannot be found: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_LocalDatabaseNotFound">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; cannot be found in the current project..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_NotConnectedToIS">
            <summary>
              Looks up a localized string similar to You must be connected to the server in order to perform this operation..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_NotConnectedToISProject">
            <summary>
              Looks up a localized string similar to You must be connected to the server project in order to perform this operation..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_AssemblyLoadFailure">
            <summary>
              Looks up a localized string similar to The assembly of the task &apos;{0}&apos; could not be loaded..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_EmptyAssemblyImage">
            <summary>
              Looks up a localized string similar to The array of bytes that contains the image of the .NET assembly cannot be null or empty..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_EmptyTaskName">
            <summary>
              Looks up a localized string similar to The name of a .NET task was not specified..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_ExecutionFailed">
            <summary>
              Looks up a localized string similar to The execution of the task &apos;{0}&apos; in the assembly &apos;{1}&apos; failed..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_IncorrectMethodName">
            <summary>
              Looks up a localized string similar to Incorrect specification of method name &apos;{0}&apos;. Expected format: &lt;fullClassName&gt;.&lt;staticPublicMethodName&gt;.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_MethodCannotHaveReturnValue">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; of the type &apos;{1}&apos; in the assembly &apos;{2}&apos; cannot have a return value..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_MethodNotFoundInType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; in the assembly &apos;{1}&apos; does not have a public and static method with the name &apos;{2}&apos; and the following signature: public static void {2} ({3})..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_TypeInAssemblyIsNotClass">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; in the assembly &apos;{1}&apos; is not a class..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_RunDotNetTask_TypeNotFoundInAssembly">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; could not be found in the assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_ServerDatabaseNotFound">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; cannot be found in the current server project..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_StartDateNotInCalendarRange">
            <summary>
              Looks up a localized string similar to The start date {0:d} is invalid. It should be a value in the Gregorian calendar range {1:d} - {2:d}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_TableNameCannotBeNullOrEmptyIfGenerateUniqueNameNotSet">
            <summary>
              Looks up a localized string similar to The database name cannot be null or empty if the option to generate a unique name was not set..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_TooManyFolderIdFiles">
            <summary>
              Looks up a localized string similar to The directory &apos;{0}&apos; contains more than one unique identifier..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_UnknownColumnType">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; has an unknown type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Error_UserDefaultLocaleNameDetectionFailed">
            <summary>
              Looks up a localized string similar to Could not retrieve the user&apos;s default locale name..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorAutomationArgNotFound">
            <summary>
              Looks up a localized string similar to Automation argument &apos;{0}&apos; is not specified..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorCannotAccessLocalParametersFromServer">
            <summary>
              Looks up a localized string similar to Local parameters cannot be accessed during the server execution..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorCannotCastExtendedParameterToType">
            <summary>
              Looks up a localized string similar to Cannot convert the global parameter &apos;{0}&apos; of type &apos;{1}&apos; into type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorColumnNamePropertyNotDefined">
            <summary>
              Looks up a localized string similar to The property ColumnName is not defined. The name of the field must be a non-empty string..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorCouldNotMoveAllDatabases">
            <summary>
              Looks up a localized string similar to Could not move all databases. Reason: {0}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorDatabaseTypeNotSupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported as database parameter..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorExtendedParameterNotFound">
            <summary>
              Looks up a localized string similar to The global parameter &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorExtendedParameterTypeNotSupported">
            <summary>
              Looks up a localized string similar to The global parameter cannot be of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorFileOutsideActiveProject">
            <summary>
              Looks up a localized string similar to The database &apos;{0}&apos; does not belong to the active IDEA project..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorFolderOutsideActiveProject">
            <summary>
              Looks up a localized string similar to The folder &apos;{0}&apos; does not belong to the active IDEA project..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorGenericDirectoryExists">
            <summary>
              Looks up a localized string similar to The directory &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorGenericInvalidDirectory">
            <summary>
              Looks up a localized string similar to The directory &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorIdeaLibraryNotFound">
            <summary>
              Looks up a localized string similar to The IDEA project library of type &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorInputFileWithAliasNotFoundInContext">
            <summary>
              Looks up a localized string similar to An assigned database with the alias &apos;{0}&apos; was not found in the current execution context..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorMoveFolderCannotMoveToItself">
            <summary>
              Looks up a localized string similar to The directory cannot be moved to its current location or to its child folder..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorParameterizerServerNotFound">
            <summary>
              Looks up a localized string similar to The Global Parameters service cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorPathIsNotAuditFolder">
            <summary>
              Looks up a localized string similar to The path &apos;{0}&apos; does not represent an audit folder..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorServerProjectNotFound">
            <summary>
              Looks up a localized string similar to The IDEA Server project &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorTableFieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The database field index has to be between 1 and {0}..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorTableFieldNotFound">
            <summary>
              Looks up a localized string similar to The database field &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorUnescapedTerminalBackslash">
            <summary>
              Looks up a localized string similar to The escape character \ was not used correctly. Example: Incorrect: abc\ Correct: abc\\.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.ErrorValuesPropertyNotDefined">
            <summary>
              Looks up a localized string similar to The property Values is not defined..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.GeneralFileName">
            <summary>
              Looks up a localized string similar to File name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_ERROR_CREATING_INSTANCE_OF_IPROJECTINFO">
            <summary>
              Looks up a localized string similar to Cannot create an instance of type IProjectInfo..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_ERROR_TAGGING_NO_TABLE_PATH_SET">
            <summary>
              Looks up a localized string similar to As saving tags requires exclusive access to the IDEA database, the database path has to be defined using TaggingTable. The reference to IIdeaDatabase is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_ERROR_VALUE_CANNOT_BE_NULL_EMPTY_WHITESPACE">
            <summary>
              Looks up a localized string similar to The assigned value cannot be null, empty or contain only blank spaces..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_ERROR_VALUE_EMPTY_OR_WHITESPACE">
            <summary>
              Looks up a localized string similar to The value cannot be empty or contain only blank spaces..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_S_ERROR_TAGGING_EMPTY_TABLE">
            <summary>
              Looks up a localized string similar to Tagging cannot be performed on an empty database..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.IDS_TAGGING_TAG_COLUMN_SEPARATOR">
            <summary>
              Looks up a localized string similar to  - .
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.InvalidDataTypeCast">
            <summary>
              Looks up a localized string similar to Invalid value given or stored according to the data type..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.InvalidOperation_ExecutorIsBusy">
            <summary>
              Looks up a localized string similar to The executor is busy..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Log_CirDataPreparationLauncher_UnknownLogEntryType">
            <summary>
              Looks up a localized string similar to Unknown LogEntryType &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Log_CirExecutor_DataPreparationTaskFailed">
            <summary>
              Looks up a localized string similar to Running the data preparation task of the Standard Import Routine &apos;{0}&apos; with ID &apos;{1}&apos; failed. --&gt; {2}: {3}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Log_CirExecutor_DataPreparationTaskFailed_ShortMessage">
            <summary>
              Looks up a localized string similar to Running the data preparation task failed. --&gt; {0}: {1}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.Log_IdeaMacroTaskHelper_ScriptExecutorMessages">
            <summary>
              Looks up a localized string similar to ScriptExecutor messages: {0}.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERR_AMBIGUOUS_AUX_FILE">
            <summary>
              Looks up a localized string similar to Auxiliary file is ambiguous between multiple apps..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERR_APPSVC_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The required application service cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_INVALID_FIELD_TYPE">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; field type is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_LOCALLY_ONLY">
            <summary>
              Looks up a localized string similar to This operation is only allowed for local databases..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_NO_FIELD_ADDED">
            <summary>
              Looks up a localized string similar to No field definition is added to the new IDEA database definition..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_NO_TABLE_ADDED">
            <summary>
              Looks up a localized string similar to No IDEA database is added to the task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_NO_TABLE_OPENED">
            <summary>
              Looks up a localized string similar to No IDEA database is opened by the task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_SERVER_ONLY">
            <summary>
              Looks up a localized string similar to This operation is only allowed for server databases..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_TABLE_ALREADY_ADDED">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; has already been added to the task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_TABLE_ALREADY_CREATED">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; has already been created by the task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_TABLE_ALREADY_OPENED">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; has already been opened by the task..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_ERROR_TABLE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The IDEA database &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_FIELD_RENAME_TITLE">
            <summary>
              Looks up a localized string similar to Rename Field.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_NEW_FIELD_DESCR">
            <summary>
              Looks up a localized string similar to New description.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_NEW_FIELD_NAME">
            <summary>
              Looks up a localized string similar to New field name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_OLD_FIELD_DESCR">
            <summary>
              Looks up a localized string similar to Old description.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.MCMD_OLD_FIELD_NAME">
            <summary>
              Looks up a localized string similar to Old field name.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.NotSupportedMacroFormat">
            <summary>
              Looks up a localized string similar to The macro type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.RoutimeLoggingHelperMessageFormat">
            <summary>
              Looks up a localized string similar to Message format: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.RoutineLoggingHelperMessageNotFound">
            <summary>
              Looks up a localized string similar to A message with the ID &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.RoutineLoggingHelperMessageParts">
            <summary>
              Looks up a localized string similar to The following values are part of the message:.
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Common.Resources.Messages.WarningHistoryCleanerIsObsolete">
            <summary>
              Looks up a localized string similar to The Class HistoryCleaner is obsolete. Use the ProtectIP.RemoveHistory method instead..
            </summary>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess">
            <summary>
            Helper interface for accessing datalayer from dialogs
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.Location">
            <summary>
            Current location
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.Environment">
            <summary>
            Current workflow id
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.Parent">
            <summary>
            Parent object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.Log">
            <summary>
            Log object
            </summary>
        </member>
        <member name="P:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.InputFiles">
            <summary>
            Input files of current execution
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.FindFilesByAlias(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns the list of files having as alias one of the entries in the 'aliases' list and are located in the given folder.
            </summary>
            <param name="aliases">list of alias string</param>
            <param name="folder">root folder of the found files</param>
            <returns>list of file paths</returns>
            <exception cref="T:System.ArgumentNullException">thrown when 'aliases' list is null or empty or folder is null</exception>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Client.Components.Services.IDialogDataAccess.GetExtendedParameterizer">
            <summary>
            Returns an instance of ExtendedParameterizer class
            </summary>
            <returns>ExtendedParameterizer instance</returns>
        </member>
        <member name="T:Audicon.SmartAnalyzer.Components.IdeaServerOperations">
            <summary>
            Internal Class that has only the purpos to operate on opened idea tables.
            It is a sepparate class to resolve idea client reference persistances.
            Only when separate class instance is set to null and garbage collected all references are released.
            </summary>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFields(System.String)">
            <summary>
            Returns the columns available in the idea table.
            We are able to tag only initialy protected fiels.
            Tagging unprotected fields will make lost the entire tagging.
            </summary>
            <param name="ideaTablePath">Path to the idea table.</param>
            <returns>List of idea table fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFields(System.String,System.Boolean)">
            <summary>
            Gets the list of idea fields and attached information.
            </summary>
            <param name="fileName">File name to open.</param>
            <param name="isLocal">True if local and false if on server.</param>
            <returns>List of idea fields</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFields(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Returns the columns available in the idea table.
            We are able to tag only initialy protected fiels.
            Tagging unprotected fields will make lost the entire tagging.
            </summary>
            <param name="ideaDatabase">reference to idea table opened database.</param>
            <returns>List of idea table fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.TagIdeaTable(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField},System.String)">
            <summary>
            Applies list of tagged fields to the table.
            The list of fields should have been read on the same table.
            </summary>
            <param name="fieldList">List of fields to apply.</param>
            <param name="ideaTablePath">Path to the idea table.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.TagIdeaTable(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField},System.String,System.Boolean)">
            <summary>
            Applies list of tagged fields to the table.
            The list of fields should have been read on the same table.
            </summary>
            <param name="fieldList">List of fields to apply.</param>
            <param name="fileName">Name of the file to tag.</param>
            <param name="isLocal">True if file is local and false if on server.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFieldsWithoutIdeaClient(System.String)">
            <summary>
            Get the fields of an idea table without using idea client.
            </summary>
            <param name="ideaTablePath">Path of the table from whre to read the fields.</param>
            <returns>List of the fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.TagIdeaTableWithoutIdeaClient(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField},System.String)">
            <summary>
            Applies list of tagged fields to the table.
            </summary>
            <param name="fieldList">List of fields to apply.</param>
            <param name="ideaTablePath">Path to the idea table.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.TagIdeaTableWithoutIdeaClient(System.Collections.Generic.IList{Audicon.SmartAnalyzer.Common.Types.Tagging.IdeaTableField},System.String,System.Boolean)">
            <summary>
            Applies list of tagged fields to the table.
            </summary>
            <param name="fieldList">List of fields to apply.</param>
            <param name="fileName">Name of the idea file.</param>
            <param name="isLocal">True if file is located localy and false if it is on server.</param>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFieldsWithoutIdeaClient(COMMONIDEACONTROLSLib.IIdeaDatabase)">
            <summary>
            Get the fields of an idea table.
            </summary>
            <param name="ideaDatabase">The idea database from where to read the data.</param>
            <returns>List of the fields.</returns>
        </member>
        <member name="M:Audicon.SmartAnalyzer.Components.IdeaServerOperations.GetIdeaTableFieldsWithoutIdeaClient(System.String,System.Boolean)">
            <summary>
            Get the fields of an idea table.
            </summary>
            <param name="fileName">Name of the idea file.</param>
            <param name="isLocal">True if file is located localy and false if it is on server.</param>
            <returns></returns>
        </member>
    </members>
</doc>
